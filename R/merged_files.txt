# ./KucoinAccountAndFunding.R

# File: KucoinAccountAndFunding.R

box::use(
    R6,
    rlang[abort],
    ./account_and_funding[
        get_account_summary_info_impl, get_apikey_info_impl, get_spot_account_type_impl,
        get_spot_account_dt_impl, get_spot_account_detail_impl, get_cross_margin_account_impl, get_isolated_margin_account_impl, get_futures_account_impl, get_spot_ledger_impl,
        get_spot_hf_ledger_impl
    ],
    ./utils[get_api_keys]
)

#' KucoinAccountAndFunding Class for KuCoin Account & Funding Endpoints
#'
#' The `KucoinAccountAndFunding` class provides an interface to interact with various endpoints
#' in the Account & Funding category of the KuCoin API. It leverages asynchronous programming to send HTTP requests
#' and handle responses. Configuration parameters (such as API key, secret, passphrase, base URL, and key version)
#' are loaded from the environment or can be passed in directly.
#'
#' @section Methods:
#' - **initialize(config)**: Creates a new instance of the class. If no configuration is provided,
#'   `get_api_keys()` is used to load API credentials from environment variables.
#' - **get_account_summary_info()**: Returns a promise that resolves to a data.table containing the account summary data.
#' - **get_apikey_info()**: Returns a promise that resolves to a data.table containing the API key information.
#'
#' For more details, please refer to:
#' - Get Account Summary Info: [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-summary-info)
#' - Get Apikey Info: [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-apikey-info)
#'
#' @examples
#' \dontrun{
#'   library(coro)
#'   account <- KucoinAccountAndFunding$new()
#'   coro::run(function() {
#'       dt_summary <- await(account$get_account_summary_info())
#'       print(dt_summary)
#'       dt_apikey <- await(account$get_apikey_info())
#'       print(dt_apikey)
#'   })
#' }
#'
#' @export
KucoinAccountAndFunding <- R6::R6Class(
    "KucoinAccountAndFunding",
    public = list(
        #' @field config A list containing API configuration parameters such as
        #' `api_key`, `api_secret`, `api_passphrase`, `base_url`, and `key_version`.
        config = NULL,
        
        #' Initialize a new KucoinAccountAndFunding object.
        #'
        #' @description
        #' Sets up the configuration for making authenticated API requests.
        #' If no configuration is provided, `get_api_keys()` is invoked to load the necessary credentials from environment variables.
        #'
        #' @param config A list containing API configuration parameters.
        #'               Defaults to the output of `get_api_keys()`.
        #' @return A new instance of the `KucoinAccountAndFunding` class.
        initialize = function(config = get_api_keys()) {
            self$config <- config
        },
        
        #' Get Account Summary Information from KuCoin.
        #'
        #' @description
        #' Asynchronously retrieves account summary information by sending a GET request to the
        #' `/api/v2/user-info` endpoint of the KuCoin API.
        #' 
        #' For full endpoint details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-summary-info).
        #'
        #' @details
        #' **Endpoint:** `GET https://api.kucoin.com/api/v2/user-info`
        #' 
        #' **Response Schema:**
        #' - **code** (string): `"200000"` indicates success.
        #' - **data** (object): Contains fields such as `level`, `subQuantity`, `spotSubQuantity`,
        #'   `marginSubQuantity`, `futuresSubQuantity`, `optionSubQuantity`, `maxSubQuantity`,
        #'   `maxDefaultSubQuantity`, `maxSpotSubQuantity`, `maxMarginSubQuantity`, `maxFuturesSubQuantity`, and `maxOptionSubQuantity`.
        #'
        #' @return A promise that resolves to a data.table containing the account summary data.
        #' @examples
        #' \dontrun{
        #'   coro::run(function() {
        #'       dt <- await(account$get_account_summary_info())
        #'       print(dt)
        #'   })
        #' }
        get_account_summary_info = function() {
            get_account_summary_info_impl(self$config)
        },
        
        #' Get API Key Information from KuCoin.
        #'
        #' @description
        #' Asynchronously retrieves API key information by sending a GET request to the
        #' `/api/v1/user/api-key` endpoint of the KuCoin API.
        #' The returned JSON data is converted to a data.table.
        #' 
        #' For full endpoint details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-apikey-info).
        #'
        #' @details
        #' **Endpoint:** `GET https://api.kucoin.com/api/v1/user/api-key`
        #' 
        #' **Response Schema:**
        #' - **code** (string): `"200000"` indicates success.
        #' - **data** (object): Contains fields such as:
        #'     - **uid** (integer): Account UID.
        #'     - **subName** (string, optional): Sub account name (if applicable).
        #'     - **remark** (string): Remarks.
        #'     - **apiKey** (string): The API key.
        #'     - **apiVersion** (integer): API version.
        #'     - **permission** (string): Comma-separated list of permissions (e.g., General, Spot, Margin, Futures, InnerTransfer, Transfer, Earn).
        #'     - **ipWhitelist** (string, optional): IP whitelist.
        #'     - **isMaster** (boolean): Whether it is the master account.
        #'     - **createdAt** (integer): API key creation time in milliseconds.
        #'
        #' @return A promise that resolves to a data.table containing the API key information.
        #' @examples
        #' \dontrun{
        #'   coro::run(function() {
        #'       dt <- await(account$get_apikey_info())
        #'       print(dt)
        #'   })
        #' }
        get_apikey_info = function() {
            get_apikey_info_impl(self$config)
        },

        #' Get Spot Account Type from KuCoin.
        #'
        #' @description
        #' Asynchronously determines whether the current user is a high-frequency or low-frequency spot user
        #' by sending a GET request to the `/api/v1/hf/accounts/opened` endpoint.
        #' The response is a boolean value: TRUE indicates a high-frequency spot user, FALSE indicates a low-frequency spot user.
        #'
        #' @details
        #' **Endpoint:** `GET https://api.kucoin.com/api/v1/hf/accounts/opened`
        #' 
        #' **Response Schema:**
        #' - **code** (string): `"200000"` indicates success.
        #' - **data** (boolean): The spot account type. TRUE means the user is high-frequency, FALSE means low-frequency.
        #'
        #' For more details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-type-spot).
        #'
        #' @return A promise that resolves to a boolean indicating the spot account type.
        #' @examples
        #' \dontrun{
        #'   coro::run(function() {
        #'       is_high_freq <- await(account$get_spot_account_type())
        #'       print(is_high_freq)
        #'   })
        #' }
        get_spot_account_type = function() {
            get_spot_account_type_impl(self$config)
        },

        #' Get Spot Account List from KuCoin.
        #'
        #' @description
        #' Asynchronously retrieves a list of spot accounts by sending a GET request to the
        #' `/api/v1/accounts` endpoint with optional query parameters.
        #' Query parameters may include:
        #'   - **currency** (string, optional): e.g., "USDT".
        #'   - **type** (string, optional): Allowed values are "main" or "trade".
        #' The returned JSON data is converted to a data.table.
        #'
        #' @details
        #' **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts`
        #' 
        #' **Response Schema:**
        #' - **code** (string): `"200000"` indicates success.
        #' - **data** (array of objects): Each object contains:
        #'     - **id** (string): Account ID.
        #'     - **currency** (string): Currency code.
        #'     - **type** (string): Account type (e.g., "main", "trade", "balance").
        #'     - **balance** (string): Total funds in the account.
        #'     - **available** (string): Funds available for withdrawal or trading.
        #'     - **holds** (string): Funds on hold.
        #'
        #' @param query A list of query parameters to filter the account list.
        #'              For example: list(currency = "USDT", type = "main").
        #'
        #' @return A promise that resolves to a data.table containing the spot account list.
        #' @examples
        #' \dontrun{
        #'   coro::run(function() {
        #'       dt <- await(account$get_spot_account_list(list(currency = "USDT", type = "main")))
        #'       print(dt)
        #'   })
        #' }
        get_spot_account_dt = function(query = list()) {
            get_spot_account_dt_impl(self$config, query)
        },

        #' Get Spot Account Detail from KuCoin.
        #'
        #' @description
        #' Asynchronously retrieves detailed information for a single spot account by sending a GET request to the
        #' `/api/v1/accounts/{accountId}` endpoint. This endpoint is used when the account ID is known.
        #' The returned JSON object is converted to a data.table.
        #'
        #' @param accountId A string representing the account ID.
        #'
        #' @return A promise that resolves to a data.table containing the account detail for the specified account.
        #' @details
        #' **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts/{accountId}`
        #' 
        #' **Response Schema:**
        #' - **code** (string): `"200000"` indicates success.
        #' - **data** (object): Contains the following fields:
        #'     - **currency** (string): The currency of the account.
        #'     - **balance** (string): Total funds in the account.
        #'     - **available** (string): Funds available for withdrawal or trading.
        #'     - **holds** (string): Funds on hold (not available for use).
        #'
        #' For further details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-detail-spot).
        #'
        #' @examples
        #' \dontrun{
        #'   coro::run(function() {
        #'       dt <- await(account$get_spot_account_detail("548674591753"))
        #'       print(dt)
        #'   })
        #' }
        get_spot_account_detail = function(accountId) {
            get_spot_account_detail_impl(self$config, accountId)
        },

        #' Get Cross Margin Account from KuCoin.
        #'
        #' @description
        #' Asynchronously retrieves information about the cross margin account by sending a GET request to the
        #' `/api/v3/margin/accounts` endpoint with optional query parameters. The response is converted to a data.table.
        #'
        #' @param query A list of query parameters to filter the account information. Supported parameters include:
        #'   - **quoteCurrency** (string, optional): Allowed values: `"USDT"`, `"KCS"`, `"BTC"`. Default is `"USDT"`.
        #'   - **queryType** (string, optional): Allowed values: `"MARGIN"`, `"MARGIN_V2"`, `"ALL"`. Default is `"MARGIN"`.
        #'
        #' @return A promise that resolves to a data.table containing the cross margin account information.
        #'
        #' @details
        #' **Endpoint:** `GET https://api.kucoin.com/api/v3/margin/accounts`
        #'
        #' For further details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-cross-margin).
        #'
        #' @examples
        #' \dontrun{
        #'   coro::run(function() {
        #'       dt <- await(account$get_cross_margin_account(list(quoteCurrency = "USDT", queryType = "MARGIN")))
        #'       print(dt)
        #'   })
        #' }
        get_cross_margin_account = function(query = list()) {
            get_cross_margin_account_impl(self$config, query)
        },

        #' Get Isolated Margin Account from KuCoin.
        #'
        #' @description
        #' Asynchronously retrieves information about the isolated margin account by sending a GET request to the
        #' `/api/v3/isolated/accounts` endpoint with optional query parameters. The response is converted to a data.table.
        #'
        #' @param query A list of query parameters to filter the isolated margin account information.
        #'        Supported parameters include:
        #'         - **symbol** (string, optional): For isolated trading pairs; if omitted, queries all pairs.
        #'         - **quoteCurrency** (string, optional): Allowed values: `"USDT"`, `"KCS"`, `"BTC"`. Default is `"USDT"`.
        #'         - **queryType** (string, optional): Allowed values: `"ISOLATED"`, `"ISOLATED_V2"`, `"ALL"`. Default is `"ISOLATED"`.
        #'
        #' @return A promise that resolves to a data.table containing the isolated margin account information.
        #'
        #' @details
        #' **Endpoint:** `GET https://api.kucoin.com/api/v3/isolated/accounts`
        #'
        #' For more details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-isolated-margin).
        #'
        #' @examples
        #' \dontrun{
        #'     coro::run(function() {
        #'         dt <- await(account$get_isolated_margin_account(list(quoteCurrency = "USDT", queryType = "ISOLATED")))
        #'         print(dt)
        #'     })
        #' }
        get_isolated_margin_account = function(query = list()) {
            get_isolated_margin_account_impl(self$config, query)
        },

        #' Get Futures Account from KuCoin Futures API
        #'
        #' @description
        #' Asynchronously retrieves the futures account information by calling the futures endpoint.
        #'
        #' @param query A list of query parameters to filter the account information.
        #'              Supported parameter: **currency** (string, optional) – the account currency (default is "XBT").
        #'
        #' @return A promise that resolves to a data.table containing the futures account information.
        #'
        #' @examples
        #' \dontrun{
        #'     coro::run(function() {
        #'         dt <- await(account$get_futures_account(list(currency = "USDT")))
        #'         print(dt)
        #'     })
        #' }
        get_futures_account = function(query = list()) {
            get_futures_account_impl(self$config, query)
        },

        #' Get Spot Ledger from KuCoin
        #'
        #' @description
        #' Asynchronously retrieves the spot (and margin) ledger records by querying the `/api/v1/accounts/ledgers` endpoint.
        #'
        #' @param query A list of query parameters to filter the ledger records.
        #'              Supported parameters include:
        #'              - **currency** (string, optional): One or more currencies (up to 10).
        #'              - **direction** (string, optional): "in" or "out".
        #'              - **bizType** (string, optional): The business type (e.g., "TRANSFER").
        #'              - **startAt** (integer, optional): Start time in milliseconds.
        #'              - **endAt** (integer, optional): End time in milliseconds.
        #'              - **currentPage** (integer, optional): The page number (default is 1).
        #'              - **pageSize** (integer, optional): Number of results per page (default is 50).
        #'
        #' @return A promise that resolves to a data.table containing the ledger records.
        #'
        #' @examples
        #' \dontrun{
        #'     coro::run(function() {
        #'         dt <- await(account$get_spot_ledger(list(currency = "BTC", direction = "in", bizType = "TRANSFER", currentPage = 1, pageSize = 50)))
        #'         print(dt)
        #'     })
        #' }
        get_spot_ledger = function(query = list()) {
            get_spot_ledger_impl(self$config, query)
        }
    )
)

# ./KucoinSubAccount.R

box::use(
    R6,
    rlang[abort],
    ./accounts_sub_account[ add_subaccount_impl ],
    ./utils[get_api_keys, get_subaccount]
)

#' KuCoin SubAccount Class
#'
#' This class provides an interface to interact with KuCoin SubAccount endpoints.
#' It uses asynchronous programming to send HTTP requests and handle responses.
#' API configuration parameters are loaded from the environment by default,
#' and sub‐account–specific parameters can also be loaded via the helper function.
#'
#' @section Methods:
#' - **initialize(config, sub_account)**: Creates a new instance with API and sub‐account configuration.
#' - **add_subaccount(password, subName, access, remarks)**: Creates a new sub‐account on KuCoin.
#'
#' @examples
#' \dontrun{
#'   library(coro)
#'   subAcc <- KuCoinSubAccount$new()
#'   coro::run(function() {
#'       result <- await(subAcc$add_subaccount(
#'           password = "1234567",
#'           subName  = "Name1234567",
#'           access   = "Spot",
#'           remarks  = "Test sub-account"
#'       ))
#'       print(result)
#'   })
#' }
#'
#' @export
KuCoinSubAccount <- R6::R6Class(
    "KuCoinSubAccount",
    public = list(
        config = NULL,
        sub_account = NULL,
        
        #' Initialize a new KuCoinSubAccount object.
        #'
        #' @param config A list containing API configuration parameters. Defaults to the output of `get_api_keys()`.
        #' @param sub_account A list containing sub‐account configuration parameters. Defaults to the output of `get_subaccount()`.
        #' @return A new instance of the `KuCoinSubAccount` class.
        initialize = function(config = get_api_keys(), sub_account = get_subaccount()) {
            self$config <- config
            self$sub_account <- sub_account
        },
        
        #' Add SubAccount
        #'
        #' @description
        #' Creates a new sub‐account on KuCoin by sending a POST request to the appropriate endpoint.
        #'
        #' @param password A string representing the sub‐account password (7–24 characters, must contain letters and numbers).
        #' @param subName A string representing the sub‐account name (7–32 characters, must contain at least one letter and one number, with no spaces).
        #' @param access A string representing the permission type (allowed values: "Spot", "Futures", "Margin").
        #' @param remarks An optional string for remarks (1–24 characters).
        #'
        #' @return A promise that resolves to a list containing sub‐account details (uid, subName, remarks, access).
        #' @examples
        #' \dontrun{
        #'   coro::run(function() {
        #'       result <- await(subAcc$add_subaccount(
        #'           password = "1234567",
        #'           subName  = "Name1234567",
        #'           access   = "Spot",
        #'           remarks  = "Test sub-account"
        #'       ))
        #'       print(result)
        #'   })
        #' }
        add_subaccount = function(password, subName, access, remarks = NULL) {
            add_subaccount_impl(self$config, password, subName, access, remarks)
        }
    )
)

# ./account.R


# ./account_and_funding.R

# File: account_and_funding.R

box::use(
    httr[GET, status_code, content, timeout, add_headers],
    jsonlite[fromJSON],
    rlang[abort],
    coro,
    promises,
    data.table[as.data.table],
    ./helpers_api[build_headers, process_kucoin_response],
    ./utils[convert_datetime_range_to_ms, build_query, get_base_url]
)

#' Get Account Summary Information Implementation
#'
#' This asynchronous function implements the logic for retrieving account summary information
#' from the KuCoin API. It constructs the full URL, builds the authentication headers, sends the
#' GET request, and returns the parsed response data as a data.table.
#'
#' @param config A list containing API configuration parameters.
#'
#' @return A promise that resolves to a data.table containing the account summary data.
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v2/user-info`
#'
#' **Response Schema:**
#' - **code** (string): `"200000"` indicates success.
#' - **data** (object): Contains fields such as `level`, `subQuantity`, `spotSubQuantity`,
#'   `marginSubQuantity`, `futuresSubQuantity`, `optionSubQuantity`, `maxSubQuantity`,
#'   `maxDefaultSubQuantity`, `maxSpotSubQuantity`, `maxMarginSubQuantity`, `maxFuturesSubQuantity`, and `maxOptionSubQuantity`.
#'
#' The returned data is converted to a data.table before resolving the promise.
#'
#' @examples
#' \dontrun{
#'   config <- list(
#'       api_key = "your_api_key",
#'       api_secret = "your_api_secret",
#'       api_passphrase = "your_api_passphrase",
#'       base_url = "https://api.kucoin.com",
#'       key_version = "2"
#'   )
#'   # Run the asynchronous request using coro::run
#'   coro::run(function() {
#'       dt <- await(get_account_summary_info_impl(config))
#'       print(dt)
#'   })
#' }
#'
#' @export
get_account_summary_info_impl <- coro::async(function(config) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v2/user-info"
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- GET(url, headers, timeout(3))

        # Use the helper to check the response and extract the data.
        data <- process_kucoin_response(response, url)

        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_account_summary_info_impl:", conditionMessage(e)))
    })
})

#' Get API Key Information Implementation
#'
#' This asynchronous function implements the logic for retrieving API key information
#' from the KuCoin API. It constructs the full URL, builds the authentication headers, sends the
#' GET request, and returns the parsed response data as a data.table.
#'
#' @param config A list containing API configuration parameters.
#'
#' @return A promise that resolves to a data.table containing the API key information.
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v1/user/api-key`
#'
#' **Response Schema:**
#' - **code** (string): `"200000"` indicates success.
#' - **data** (object): Contains fields such as:
#'     - **uid** (integer): Account UID.
#'     - **subName** (string, optional): Sub account name (if applicable).
#'     - **remark** (string): Remarks.
#'     - **apiKey** (string): The API key.
#'     - **apiVersion** (integer): API version.
#'     - **permission** (string): Comma-separated list of permissions.
#'     - **ipWhitelist** (string, optional): IP whitelist.
#'     - **isMaster** (boolean): Whether it is the master account.
#'     - **createdAt** (integer): API key creation time in milliseconds.
#'
#' The returned data is converted to a data.table before resolving the promise.
#'
#' @examples
#' \dontrun{
#'   coro::run(function() {
#'       dt <- await(get_apikey_info_impl(config))
#'       print(dt)
#'   })
#' }
#'
#' @export
get_apikey_info_impl <- coro::async(function(config) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/user/api-key"
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_apikey_info_impl:", conditionMessage(e)))
    })
})

#' Get Spot Account Type Implementation
#'
#' This asynchronous function retrieves the spot account type information from the KuCoin API.
#' It sends a GET request to the `/api/v1/hf/accounts/opened` endpoint, which determines whether the
#' current user is a high-frequency spot user (returns TRUE) or a low-frequency spot user (returns FALSE).
#'
#' @param config A list containing API configuration parameters.
#'
#' @return A promise that resolves to a boolean indicating the spot account type.
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v1/hf/accounts/opened`
#'
#' **Response Schema:**
#' - **code** (string): `"200000"` indicates success.
#' - **data** (boolean): `TRUE` indicates that the current user is a high-frequency spot user;
#'   `FALSE` indicates a low-frequency spot user.
#'
#' For further details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-type-spot).
#'
#' @examples
#' \dontrun{
#'   config <- list(
#'       api_key = "your_api_key",
#'       api_secret = "your_api_secret",
#'       api_passphrase = "your_api_passphrase",
#'       base_url = "https://api.kucoin.com",
#'       key_version = "2"
#'   )
#'   coro::run(function() {
#'       is_high_freq <- await(get_spot_account_type_impl(config))
#'       print(is_high_freq)
#'   })
#' }
#'
#' @export
get_spot_account_type_impl <- coro::async(function(config) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/hf/accounts/opened"
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        # data is expected to be a boolean value.
        return(data)
    }, error = function(e) {
        abort(paste("Error in get_spot_account_type_impl:", conditionMessage(e)))
    })
})


#' Get Spot Account DT Implementation
#'
#' This asynchronous function retrieves a list of spot accounts from the KuCoin API.
#' It sends a GET request to the `/api/v1/accounts` endpoint with optional query parameters,
#' and returns the account list as a data.table.
#'
#' @param config A list containing API configuration parameters.
#' @param query A list of query parameters to filter the account list.
#'              Supported parameters include:
#'              - **currency** (string, optional): e.g., "USDT".
#'              - **type** (string, optional): Allowed values include "main" or "trade".
#'
#' @return A promise that resolves to a data.table containing the spot account list.
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts`
#'
#' **Response Schema:**
#' - **code** (string): `"200000"` indicates success.
#' - **data** (array of objects): Each object contains:
#'     - **id** (string): Account ID.
#'     - **currency** (string): Currency code.
#'     - **type** (string): Account type (e.g., "main", "trade", "balance").
#'     - **balance** (string): Total funds in the account.
#'     - **available** (string): Funds available for withdrawal or trading.
#'     - **holds** (string): Funds on hold.
#'
#' The returned JSON array is converted to a data.table.
#'
#' @examples
#' \dontrun{
#'   query <- list(currency = "USDT", type = "main")
#'   coro::run(function() {
#'       dt <- await(get_spot_account_dt_impl(config, query))
#'       print(dt)
#'   })
#' }
#'
#' @export
get_spot_account_dt_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/accounts"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)

        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_spot_account_dt_impl:", conditionMessage(e)))
    })
})

#' Get Spot Account Detail Implementation
#'
#' This asynchronous function retrieves detailed information for a single spot account
#' from the KuCoin API. It requires the account ID as a path parameter. The function
#' constructs the full URL by embedding the provided `accountId` into the endpoint, builds
#' the authentication headers, sends the GET request, and returns the parsed response data
#' as a data.table.
#'
#' @param config A list containing API configuration parameters.
#' @param accountId A string representing the account ID for which details are requested.
#'
#' @return A promise that resolves to a data.table containing the spot account detail.
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts/{accountId}`
#'
#' **Response Schema:**
#' - **code** (string): `"200000"` indicates success.
#' - **data** (object): Contains the following fields:
#'     - **currency** (string): The currency of the account.
#'     - **balance** (string): Total funds in the account.
#'     - **available** (string): Funds available for withdrawal or trading.
#'     - **holds** (string): Funds on hold (not available for use).
#'
#' For further details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-detail-spot).
#'
#' @examples
#' \dontrun{
#'   config <- list(
#'       api_key = "your_api_key",
#'       api_secret = "your_api_secret",
#'       api_passphrase = "your_api_passphrase",
#'       base_url = "https://api.kucoin.com",
#'       key_version = "2"
#'   )
#'   # Suppose you want to retrieve details for account "548674591753":
#'   coro::run(function() {
#'       dt <- await(get_spot_account_detail_impl(config, "548674591753"))
#'       print(dt)
#'   })
#' }
#'
#' @export
get_spot_account_detail_impl <- coro::async(function(config, accountId) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- paste0("/api/v1/accounts/", accountId)
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_spot_account_detail_impl:", conditionMessage(e)))
    })
})

#' Get Cross Margin Account Implementation
#'
#' This asynchronous function retrieves information about the cross margin account from the KuCoin API.
#' It sends a GET request to the `/api/v3/margin/accounts` endpoint with optional query parameters and returns
#' the parsed response data as a data.table.
#'
#' @param config A list containing API configuration parameters.
#' @param query A list of query parameters to filter the account information. Supported parameters include:
#'   - **quoteCurrency** (string, optional): The quote currency. Allowed values: `"USDT"`, `"KCS"`, `"BTC"`.
#'     If not provided, the default is `"USDT"`.
#'   - **queryType** (string, optional): The type of account query. Allowed values:
#'     `"MARGIN"` (only query low-frequency cross margin account),
#'     `"MARGIN_V2"` (only query high-frequency cross margin account),
#'     `"ALL"` (aggregate query, as seen on the website). The default is `"MARGIN"`.
#'
#' @return A promise that resolves to a data.table containing the cross margin account information. The
#' data.table includes the following fields:
#'   - **totalAssetOfQuoteCurrency** (string): Total assets in the quote currency.
#'   - **totalLiabilityOfQuoteCurrency** (string): Total liabilities in the quote currency.
#'   - **debtRatio** (string): The debt ratio.
#'   - **status** (string): The position status (e.g., `"EFFECTIVE"`, `"BANKRUPTCY"`, `"LIQUIDATION"`,
#'     `"REPAY"`, or `"BORROW"`).
#'   - **accounts** (list): A list of margin account details. Each element is an object containing:
#'       - **currency** (string): Currency code.
#'       - **total** (string): Total funds in the account.
#'       - **available** (string): Funds available for withdrawal or trading.
#'       - **hold** (string): Funds on hold.
#'       - **liability** (string): Current liabilities.
#'       - **maxBorrowSize** (string): Maximum borrowable amount.
#'       - **borrowEnabled** (boolean): Whether borrowing is enabled.
#'       - **transferInEnabled** (boolean): Whether transfers into the account are enabled.
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v3/margin/accounts`
#'
#' For further details, see the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-cross-margin).
#'
#' @examples
#' \dontrun{
#'   query <- list(quoteCurrency = "USDT", queryType = "MARGIN")
#'   coro::run(function() {
#'       dt <- await(get_cross_margin_account_impl(config, query))
#'       print(dt)
#'   })
#' }
#'
#' @export
get_cross_margin_account_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v3/margin/accounts"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)

        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_cross_margin_account_impl:", conditionMessage(e)))
    })
})
#' Get Isolated Margin Account Implementation
#'
#' This asynchronous function retrieves information about the isolated margin account from the KuCoin API.
#' It sends a GET request to the `/api/v3/isolated/accounts` endpoint with optional query parameters and
#' returns the parsed response data as a data.table.
#'
#' @param config A list containing API configuration parameters.
#' @param query A list of query parameters to filter the isolated margin account information.
#'        Supported parameters include:
#'         - **symbol** (string, optional): For isolated trading pairs; if omitted, queries all pairs.
#'         - **quoteCurrency** (string, optional): The quote currency. Allowed values: `"USDT"`, `"KCS"`, `"BTC"`. Default is `"USDT"`.
#'         - **queryType** (string, optional): The type of account query. Allowed values: `"ISOLATED"`, `"ISOLATED_V2"`, `"ALL"`. Default is `"ISOLATED"`.
#'
#' @return A promise that resolves to a data.table containing the isolated margin account information.
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v3/isolated/accounts`
#'
#' **Response Schema:**
#' - **code** (string): `"200000"` indicates success.
#' - **data** (object): Contains:
#'     - **totalAssetOfQuoteCurrency** (string): Total assets in the quote currency.
#'     - **totalLiabilityOfQuoteCurrency** (string): Total liabilities in the quote currency.
#'     - **timestamp** (integer): The timestamp.
#'     - **assets** (array of objects): Each object represents a margin account detail with fields such as:
#'           - **symbol** (string): Trading pair symbol (e.g., "BTC-USDT").
#'           - **status** (string): Position status.
#'           - **debtRatio** (string): Debt ratio.
#'           - **baseAsset** (object): Details of the base asset.
#'           - **quoteAsset** (object): Details of the quote asset.
#'
#' For more details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-isolated-margin).
#'
#' @examples
#' \dontrun{
#'     query <- list(quoteCurrency = "USDT", queryType = "ISOLATED")
#'     coro::run(function() {
#'         dt <- await(get_isolated_margin_account_impl(config, query))
#'         print(dt)
#'     })
#' }
#'
#' @export
get_isolated_margin_account_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v3/isolated/accounts"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)

        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_isolated_margin_account_impl:", conditionMessage(e)))
    })
})

#' Get Futures Account Implementation
#'
#' This asynchronous function retrieves the futures account information from the KuCoin Futures API.
#' It sends a GET request to the `/api/v1/account-overview` endpoint with optional query parameters.
#'
#' @param config A list containing API configuration parameters.
#' @param query A list of query parameters to filter the account information. Supported parameter:
#'        - **currency** (string, optional): The account currency. The default is "XBT", but you may specify others (e.g., "USDT", "ETH").
#'
#' @return A promise that resolves to a data.table containing the futures account information.
#'
#' @details
#' **Endpoint:** `GET https://api-futures.kucoin.com/api/v1/account-overview`
#'
#' For further details, please refer to the
#' [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-futures).
#'
#' @examples
#' \dontrun{
#'     query <- list(currency = "USDT")
#'     coro::run(function() {
#'         dt <- await(get_futures_account_impl(config, query))
#'         print(dt)
#'     })
#' }
#'
#' @export
get_futures_account_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        # Use the futures base URL if provided in config; otherwise, use the default.
        if (!is.null(config$futures_base_url)) {
            base_url <- config$futures_base_url
        } else {
            base_url <- "https://api-futures.kucoin.com"
        }
        endpoint <- "/api/v1/account-overview"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        # Build authentication headers using the full endpoint (including query string)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)
        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_futures_account_impl:", conditionMessage(e)))
    })
})

#' Get Spot Ledger Implementation
#'
#' This asynchronous function retrieves transaction records (ledgers) for spot/margin accounts from the KuCoin API.
#' It sends a GET request to the `/api/v1/accounts/ledgers` endpoint with optional query parameters.
#'
#' @param config A list containing API configuration parameters.
#' @param query A list of query parameters to filter the ledger records. Supported parameters include:
#'   - **currency** (string, optional): One or more currencies (up to 10) to filter by; if omitted, all currencies are returned.
#'   - **direction** (string, optional): "in" or "out".
#'   - **bizType** (string, optional): e.g., "DEPOSIT", "WITHDRAW", "TRANSFER", "SUB_TRANSFER", "TRADE_EXCHANGE", etc.
#'   - **startAt** (integer, optional): Start time in milliseconds.
#'   - **endAt** (integer, optional): End time in milliseconds.
#'   - **currentPage** (integer, optional): The page number (default is 1).
#'   - **pageSize** (integer, optional): Number of results per page (minimum 10, maximum 500; default is 50).
#'
#' @return A promise that resolves to a data.table containing the ledger information. The returned object includes:
#'         - currentPage, pageSize, totalNum, totalPage, and items (an array of ledger records).
#'
#' @details
#' **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts/ledgers`
#'
#' For further details, refer to the
#' [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-ledgers-spot-margin).
#'
#' @examples
#' \dontrun{
#'     query <- list(currency = "BTC", direction = "in", bizType = "TRANSFER", currentPage = 1, pageSize = 50)
#'     coro::run(function() {
#'         dt <- await(get_spot_ledger_impl(config, query))
#'         print(dt)
#'     })
#' }
#'
#' @export
get_spot_ledger_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/accounts/ledgers"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        # Build authentication headers using the full endpoint (including query string)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)
        response <- GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- as.data.table(data)
        return(dt)
    }, error = function(e) {
        abort(paste("Error in get_spot_ledger_impl:", conditionMessage(e)))
    })
})


# ./accounts_sub_account.R

box::use(
    data.table,
    httr[POST, timeout, content, status_code],
    jsonlite[toJSON, fromJSON],
    rlang[abort],
    coro,
    ./utils[get_base_url],
    ./helpers_api[build_headers]
)

#' Add SubAccount Implementation
#'
#' This asynchronous function creates a new sub‐account on KuCoin by sending a POST request
#' to the `/api/v2/sub/user/created` endpoint.
#'
#' @param config A list containing API configuration parameters.
#' @param password A string representing the sub‐account password (7–24 characters, must contain letters and numbers).
#' @param subName A string representing the sub‐account name (7–32 characters, must contain at least one letter and one number, with no spaces).
#' @param access A string representing the permission type (allowed values: "Spot", "Futures", "Margin").
#' @param remarks An optional string for remarks (1–24 characters).
#'
#' @return A promise that resolves to a list containing the sub‐account creation result.
#'
#' @examples
#' \dontrun{
#'   coro::run(function() {
#'       result <- await(add_subaccount_impl(
#'           config,
#'           password = "1234567",
#'           subName = "Name1234567",
#'           access = "Spot",
#'           remarks = "Test sub-account"
#'       ))
#'       print(result)
#'   })
#' }
#'
#' @export
add_subaccount_impl <- coro::async(function(config, password, subName, access, remarks = NULL) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v2/sub/user/created"
        method <- "POST"
        body_list <- list(
            password = password,
            subName = subName,
            access = access
        )
        if (!is.null(remarks)) {
            body_list$remarks <- remarks
        }
        body <- jsonlite::toJSON(body_list, auto_unbox = TRUE)
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)
        response <- POST(url, headers, body = body, encode = "raw", timeout(3))
        response_text <- httr::content(response, as = "text", encoding = "UTF-8")
        parsed_response <- jsonlite::fromJSON(response_text)
        if (httr::status_code(response) != 200) {
            rlang::abort(paste("HTTP request failed with status code", httr::status_code(response), "for URL:", url))
        }
        if (as.character(parsed_response$code) != "200000") {
            error_msg <- "No error message provided."
            if ("msg" %in% names(parsed_response)) {
                error_msg <- parsed_response$msg
            }
            rlang::abort(paste("KuCoin API returned an error:", parsed_response$code, "-", error_msg))
        }
        # For this endpoint, if a "data" field exists, return it; otherwise, return the full parsed response.
        if ("data" %in% names(parsed_response)) {
            return(data.table::as.data.table(parsed_response$data))
        } else {
            return(parsed_response)
        }
    }, error = function(e) {
        rlang::abort(paste("Error in add_subaccount_impl:", conditionMessage(e)))
    })
})
# ./helpers_api.R

box::use(./utils[get_base_url])

#' Get Server Time from KuCoin Futures API
#'
#' Retrieves the current API server time (Unix timestamp in milliseconds) from the KuCoin Futures API.
#' This function performs an asynchronous GET request and returns a promise that either resolves to the
#' server timestamp or rejects with an error condition. The server time is a critical component when
#' making authenticated requests to KuCoin's API. For these requests (e.g., placing orders or fetching
#' account data), the API requires you to include a timestamp header that is within 5 seconds of the actual
#' server time. This helps ensure that requests are timely and protects against replay attacks.
#'
#' The helper function \code{get_base_url()} is used to retrieve the base URL for the Futures domain.
#'
#' For further details, refer to the official KuCoin API documentation:
#' \url{https://www.kucoin.com/docs-new/rest/futures-trading/market-data/get-server-time}
#'
#' @param base_url The base URL for the KuCoin Futures API. Defaults to the result of \code{get_base_url()}.
#' @return A promise that resolves to a numeric Unix timestamp in milliseconds or rejects with an error condition.
#'
#' @examples
#' \dontrun{
#'     # Asynchronously retrieve the server time.
#'     get_server_time()$
#'         then(function(timestamp) {
#'             cat("KuCoin Server Time:", timestamp, "\n")
#'         })$
#'         catch(function(e) {
#'             message("Error retrieving server time: ", conditionMessage(e))
#'         })
#'
#'     # Run the event loop until all asynchronous tasks are processed.
#'     while (!later::loop_empty()) {
#'         later::run_now(timeoutSecs = Inf, all = TRUE)
#'     }
#' }
#'
#' @importFrom httr GET timeout content status_code
#' @importFrom jsonlite fromJSON
#' @importFrom rlang error_cnd abort
#' @importFrom promises promise
#' @export
get_server_time <- function(base_url = get_base_url()) {
    promises::promise(function(resolve, reject) {
        tryCatch({
            url <- paste0(base_url, "/api/v1/timestamp")
            response <- httr::GET(url, httr::timeout(3))
            if (httr::status_code(response) != 200) {
                reject(rlang::error_cnd("rlang_error", message = "KuCoin API request failed"))
                return()
            }
            response_text <- httr::content(response, as = "text", encoding = "UTF-8")
            parsed_response <- jsonlite::fromJSON(response_text)
            if (!all(c("code", "data") %in% names(parsed_response))) {
                reject(rlang::error_cnd("rlang_error", message = "Invalid API response structure"))
                return()
            }
            if (parsed_response$code != "200000") {
                reject(rlang::error_cnd("rlang_error", message = "KuCoin API returned an error"))
                return()
            }
            resolve(parsed_response$data)
        }, error = function(e) {
            reject(rlang::error_cnd("rlang_error", message = paste("Error retrieving server time:", conditionMessage(e))))
        })
    })
}

#' Build Request Headers for KuCoin API
#'
#' Asynchronously builds the HTTP request headers required for authenticated requests to the KuCoin API.
#' These headers include the API key, a signature, the current timestamp, an encrypted passphrase,
#' the API key version, and the content type.
#'
#' The function performs the following steps:
#'
#' \enumerate{
#'     \item **Retrieve the Server Time:**  
#'         Calls \code{get_server_time()} (using the base URL from \code{get_base_url()}) to obtain the current
#'         server timestamp (in milliseconds). This timestamp is required in every request.
#'
#'     \item **Construct the Prehash String:**  
#'         The prehash is constructed by concatenating the timestamp, the HTTP method (in uppercase),
#'         the API endpoint, and the request body. Note that the \code{body} parameter must be provided even if
#'         it is empty (e.g., for GET requests) to ensure that the signature reflects all parts of the request.
#'
#'     \item **Generate the Signature:**  
#'         Computes an HMAC-SHA256 signature of the prehash string using the API secret. The raw signature is
#'         then encoded in base64.
#'
#'     \item **Encrypt the Passphrase:**  
#'         Similarly, the API passphrase is HMAC-signed (using the API secret) and the result is encoded in base64.
#'
#'     \item **Build the Headers:**  
#'         Returns a list of HTTP headers (via \code{httr::add_headers()}) that includes all the required authentication
#'         fields.
#' }
#'
#' @param method A character string specifying the HTTP method (e.g., "GET", "POST").
#' @param endpoint A character string representing the API endpoint (e.g., "/api/v1/orders").
#' @param body A character string containing the request body in JSON format. If no payload is required,
#'   pass an empty string (`""`). This parameter is included in the signature calculation.
#' @param config A list containing configuration settings for the API. The list must include:
#'   \describe{
#'       \item{api_key}{Your KuCoin API key.}
#'       \item{api_secret}{Your KuCoin API secret used for signing requests.}
#'       \item{api_passphrase}{Your KuCoin API passphrase.}
#'       \item{key_version}{The API key version (e.g., "2").}
#'       \item{base_url}{(Optional) The base URL for the API; if not provided, \code{get_base_url()} is used.}
#'   }
#'
#' @return A list of HTTP headers (created by \code{httr::add_headers()}) that contains the authentication fields
#' required for making a request to the KuCoin API.
#'
#' @note This function is asynchronous. When calling it from synchronous code, use \code{coro::await()}
#' to retrieve the result.
#'
#' @examples
#' \dontrun{
#'     config <- list(
#'         api_key = "your_api_key",
#'         api_secret = "your_api_secret",
#'         api_passphrase = "your_api_passphrase",
#'         key_version = "2",
#'         base_url = "https://api.kucoin.com"
#'     )
#'
#'     # Build headers for a POST request with a JSON body.
#'     headers <- coro::await(build_headers("POST", "/api/v1/orders", '{"size": 1}', config))
#'     print(headers)
#'
#'     # For a GET request with no payload, pass an empty string:
#'     headers <- coro::await(build_headers("GET", "/api/v1/orders", "", config))
#' }
#'
#' @importFrom httr add_headers
#' @importFrom digest hmac
#' @importFrom base64enc base64encode
#' @importFrom rlang abort
#' @export
build_headers <- coro::async(function(method, endpoint, body, config) {
    tryCatch({
        # Retrieve the current server time from the KuCoin API.
        timestamp <- await(get_server_time(get_base_url(config)))

        # Construct the prehash string: timestamp + UPPERCASE(method) + endpoint + body.
        prehash <- paste0(timestamp, toupper(method), endpoint, body)

        # Compute the HMAC-SHA256 signature using the API secret.
        sig_raw <- digest::hmac(
            key = config$api_secret,
            object = prehash,
            algo = "sha256",
            serialize = FALSE,
            raw = TRUE
        )
        # Base64-encode the signature.
        signature <- base64enc::base64encode(sig_raw)

        # Compute the encrypted passphrase by signing the API passphrase.
        passphrase_raw <- digest::hmac(
            key = config$api_secret,
            object = config$api_passphrase,
            algo = "sha256",
            serialize = FALSE,
            raw = TRUE
        )
        encrypted_passphrase <- base64enc::base64encode(passphrase_raw)

        # Return the HTTP headers with authentication information.
        httr::add_headers(
            `KC-API-KEY` = config$api_key,
            `KC-API-SIGN` = signature,
            `KC-API-TIMESTAMP` = timestamp,
            `KC-API-PASSPHRASE` = encrypted_passphrase,
            `KC-API-KEY-VERSION` = config$key_version,
            `Content-Type` = "application/json"
        )
    }, error = function(e) {
        rlang::abort(
            paste("Failed to build request headers:", conditionMessage(e)),
            parent = e
        )
    })
})


# File: helpers_response.R

box::use(
  httr[status_code, content],
  jsonlite[fromJSON],
  rlang[abort]
)

#' Process and Validate KuCoin API Response
#'
#' This function processes an HTTP response from a KuCoin API request, validating its structure and
#' checking for errors. It is designed to catch cases where the HTTP request returns status 200 but the
#' API response indicates an error (for example, if the API “code” is not the expected success value).
#'
#' @param response An HTTP response object (from httr::GET).
#' @param url A character string representing the requested URL (used in error messages).
#'
#' @return The value of the "data" field from the parsed JSON response.
#'
#' @examples
#' \dontrun{
#'   response <- httr::GET("https://api.kucoin.com/api/v2/user-info", headers)
#'   data <- process_kucoin_response(response, "https://api.kucoin.com/api/v2/user-info")
#'   print(data)
#' }
#'
#' @export
process_kucoin_response <- function(response, url = "") {
    status_code <- httr::status_code(response)
    if (status_code != 200) {
        abort(paste("HTTP request failed with status code", status_code, "for URL:", url))
    }

    response_text <- httr::content(response, as = "text", encoding = "UTF-8")
    parsed_response <- jsonlite::fromJSON(response_text)

    if (!"code" %in% names(parsed_response)) {
        rlang::abort("Invalid API response structure: missing 'code' field.")
    }

    if (as.character(parsed_response$code) != "200000") {
        error_msg <- "No error message provided."
        if ("msg" %in% names(parsed_response)) {
            error_msg <- parsed_response$msg
        }
        rlang::abort(paste("KuCoin API returned an error:", parsed_response$code, "-", error_msg))
    }

    if (!"data" %in% names(parsed_response)) {
        rlang::abort("Invalid API response structure: missing 'data' field despite success code.")
    }

    return(parsed_response$data)
}

# ./utils.R

box::use(
    rlang,
    lubridate
)

# File: utils.R

#' Build Query String for KuCoin API Request
#'
#' This function constructs a query string from a named list of parameters.
#' It removes any parameters with \code{NULL} values and concatenates the remaining
#' key-value pairs into a properly formatted query string.
#'
#' **Usage:**
#'
#' 1. Provide a named list of query parameters (e.g., \code{list(currency = "USDT", type = "main")}).
#' 2. The function removes any parameters whose value is \code{NULL}.
#' 3. It then concatenates the names and values into a query string that starts with a question mark
#'    (e.g., \code{"?currency=USDT&type=main"}).
#'
#' **Important:** This function should be called before generating the authentication headers.
#' The complete endpoint (i.e., base endpoint plus the query string) must be passed to the header builder
#' so that the signature is computed over the full path.
#'
#' @param params A named list of query parameters to be appended to the URL.
#'
#' @return A string representing the query part of the URL, beginning with \code{"?"}.
#'
#' @examples
#' \dontrun{
#'     # Example usage:
#'     query <- list(currency = "USDT", type = "main")
#'     qs <- build_query(query)
#'     # qs will be "?currency=USDT&type=main"
#' }
#' @export
build_query <- function(params) {
    params <- params[!sapply(params, is.null)]
    if (length(params) == 0) return("")
    return(paste0("?", paste0(names(params), "=", params, collapse = "&")))
}

#' @export
get_base_url <- function(config = NULL) {
    if (!is.null(config$base_url)) {
        return(config$base_url)
    }
    return("https://api.kucoin.com")
}

#' @export
get_api_keys <- function(
    api_key        = Sys.getenv("KC-API-KEY"),
    api_secret     = Sys.getenv("KC-API-SECRET"),
    api_passphrase = Sys.getenv("KC-API-PASSPHRASE"),
    base_url       = Sys.getenv("KC-API-ENDPOINT"),
    key_version    = "2"
) {
    return(list(
        api_key        = api_key,
        api_secret     = api_secret,
        api_passphrase = api_passphrase,
        base_url       = base_url,
        key_version    = key_version
    ))
}

#' @export
get_subaccount <- function(
    sub_account_name = Sys.getenv("KC-ACCOUNT-SUBACCOUNT-NAME"),
    sub_account_password = Sys.getenv("KC-ACCOUNT-SUBACCOUNT-PASSWORD")
) {
    return(list(
        sub_account_name = sub_account_name,
        sub_account_password = sub_account_password
    ))
}

