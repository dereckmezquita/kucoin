# ./KucoinAccountAndFunding.R

# File: ./R/KucoinAccountAndFunding.R

box::use(
    impl = ./impl_account_and_funding,
    ./utils[ get_api_keys ]
)

#' KucoinAccountAndFunding Class for KuCoin Account & Funding Endpoints
#'
#' The `KucoinAccountAndFunding` class is designed to provide a comprehensive interface for interacting
#' with the Account & Funding endpoints of the KuCoin API. It leverages asynchronous programming (via the
#' `coro` package) to perform non-blocking HTTP requests. This class allows users to:
#'
#' - Retrieve an overall summary of their account, including VIP level and sub-account limits.
#' - Obtain detailed information about the API key being used, including permissions and metadata.
#' - Determine the type of spot account (high-frequency vs. low-frequency).
#' - List all spot accounts or retrieve detailed data for a specific spot account.
#' - Access cross margin account details including asset/liability summaries.
#' - Retrieve isolated margin account data for specific trading pairs.
#' - Get detailed transaction ledger records for spot and margin accounts.
#'
#' The class expects a configuration list containing your KuCoin API credentials and settings. If no configuration
#' is provided, it automatically loads credentials from environment variables using the `get_api_keys()` function.
#'
#' @section Methods:
#' - **initialize(config)**: General initialization; sets up API credentials.
#' - **get_account_summary_info()**: Retrieves account summary details.
#' - **get_apikey_info()**: Retrieves detailed API key information.
#' - **get_spot_account_type()**: Determines if your spot account is high-frequency or low-frequency.
#' - **get_spot_account_dt(query)**: Lists all spot accounts, with optional filtering.
#' - **get_spot_account_detail(accountId)**: Retrieves detailed information for a specific spot account.
#' - **get_cross_margin_account(query)**: Retrieves cross margin account information.
#' - **get_isolated_margin_account(query)**: Retrieves isolated margin account details for trading pairs.
#' - **get_spot_ledger(query)**: Retrieves transaction ledger records for spot and margin accounts.
#'
#' For more detailed information on each endpoint, please refer to the corresponding KuCoin API documentation.
#'
#' @examples
#' \dontrun{
#'     options(error = function() {
#'         rlang::entrace()
#'         rlang::last_trace()
#'         traceback()
#'     })
#'
#'     # Create an instance of the class (credentials are loaded from the environment by default)
#'     account <- KucoinAccountAndFunding$new()
#'
#'     # Define a main asynchronous function that calls all endpoints
#'     async_main <- coro::async(function() {
#'         # Retrieve account summary info
#'         dt_summary <- await(account$get_account_summary_info())
#'         cat("Account Summary Info (data.table):\n")
#'         print(dt_summary)
#'
#'         # Retrieve API key info
#'         dt_apikey <- await(account$get_apikey_info())
#'         cat("API Key Info (data.table):\n")
#'         print(dt_apikey)
#'
#'         # Retrieve spot account type (a boolean)
#'         is_high_freq <- await(account$get_spot_account_type())
#'         cat("Spot Account Type (boolean):\n")
#'         print(is_high_freq)
#'
#'         # Retrieve spot account list (as a data.table)
#'         dt_spot <- await(account$get_spot_account_dt())
#'         cat("Spot Account DT (data.table):\n")
#'         print(dt_spot)
#'
#'         # Optionally, retrieve spot account detail for a specific account
#'         if (nrow(dt_spot) > 0) {
#'             account_id <- dt_spot$id[1]
#'             cat("Retrieving spot account detail for account", account_id, "...\n")
#'             dt_detail <- await(account$get_spot_account_detail(account_id))
#'             cat("Spot Account Detail (data.table) for account", account_id, ":\n")
#'             print(dt_detail)
#'         } else {
#'             cat("No spot accounts available for detail retrieval.\n")
#'         }
#'
#'         # Retrieve cross margin account info using the new method.
#'         query_cm <- list(quoteCurrency = "USDT", queryType = "MARGIN")
#'         dt_cross_margin <- await(account$get_cross_margin_account(query_cm))
#'         cat("Cross Margin Account Info (data.table):\n")
#'         print(dt_cross_margin)
#'
#'         # Retrieve isolated margin account info with optional query parameters.
#'         query_im <- list(quoteCurrency = "USDT", queryType = "ISOLATED")
#'         dt_isolated <- await(account$get_isolated_margin_account(query_im))
#'         cat("Isolated Margin Account Info (data.table):\n")
#'         print(dt_isolated)
#'
#'         # Retrieve futures account info using the new method.
#'         query_futures <- list(currency = "USDT")
#'         dt_futures <- await(account$get_futures_account(query_futures))
#'         cat("Futures Account Info (data.table):\n")
#'         print(dt_futures)
#'
#'         # Retrieve spot ledger info (account ledgers for spot/margin)
#'         query_ledgers <- list(currency = "BTC", direction = "in", bizType = "TRANSFER", currentPage = 1, pageSize = 50)
#'         dt_ledgers <- await(account$get_spot_ledger(query_ledgers))
#'         cat("Spot Ledger Info (data.table):\n")
#'         print(dt_ledgers)
#'     })
#'
#'     async_main()
#'
#'     # Keep the event loop running until all asynchronous tasks have completed.
#'     while (!later::loop_empty()) {
#'         later::run_now(timeoutSecs = Inf, all = TRUE)
#'     }
#' }
#'
#' @export
#' @md
KucoinAccountAndFunding <- R6::R6Class(
    "KucoinAccountAndFunding",
    public = list(
        #' @field config A list containing API configuration parameters such as
        #' `api_key`, `api_secret`, `api_passphrase`, `base_url`, and `key_version`.
        config = NULL,

        #' Initialize a new KucoinAccountAndFunding object.
        #'
        #' @description
        #' Initializes the class with the configuration needed for authenticated requests.
        #' If no configuration is provided, it calls `get_api_keys()` to load API credentials from the environment.
        #'
        #' @param config A list of API configuration parameters. Expected keys include:
        #' - `api_key`: Your KuCoin API key.
        #' - `api_secret`: Your KuCoin API secret.
        #' - `api_passphrase`: Your KuCoin API passphrase.
        #' - `base_url`: The base URL of the KuCoin API (e.g., "https://api.kucoin.com").
        #' - `key_version`: The version of your API key (typically "2").
        #'
        #' @return A new instance of the `KucoinAccountAndFunding` class.
        initialize = function(config = get_api_keys()) {
            self$config <- config
        },

        #' Retrieve Account Summary Information.
        #'
        #' @description
        #' This method sends an asynchronous GET request to the KuCoin API endpoint for account summary information.
        #' The summary includes key details such as VIP level, sub-account counts, and various limits that govern your
        #' trading capacity.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v2/user-info`
        #'
        #' **How It Works:**  
        #' - Constructs the full URL using the provided base URL.
        #' - Prepares authentication headers using the API credentials.
        #' - Sends the GET request and waits for the response.
        #' - Processes the JSON response into a `data.table`.
        #'
        #' **Response Schema:**  
        #' The response contains:
        #' - `code`: A string, with `"200000"` indicating success.
        #' - `data`: An object containing:
        #'   - `level`: User's VIP level.
        #'   - `subQuantity`: Total number of sub-accounts.
        #'   - `spotSubQuantity`: Number of spot trading sub-accounts.
        #'   - `marginSubQuantity`: Number of margin trading sub-accounts.
        #'   - `futuresSubQuantity`: Number of futures trading sub-accounts.
        #'   - `optionSubQuantity`: Number of option trading sub-accounts.
        #'   - `maxSubQuantity`: Maximum allowed sub-accounts.
        #'   - `maxDefaultSubQuantity`, `maxSpotSubQuantity`, `maxMarginSubQuantity`, `maxFuturesSubQuantity`, `maxOptionSubQuantity`: Detailed limits.
        #'
        #' For more details, see the [Account Summary API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-summary-info).
        #'
        #' @return A promise that resolves to a `data.table` with the account summary.
        get_account_summary_info = function() {
            return(impl$get_account_summary_info_impl(self$config))
        },

        #' Retrieve API Key Information.
        #'
        #' @description
        #' This method fetches detailed information about the API key used for authentication. It returns data that
        #' includes the key itself, its permissions, the API version, and additional metadata (such as creation time).
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v1/user/api-key`
        #'
        #' **How It Works:**  
        #' - Constructs the request URL and builds authentication headers.
        #' - Sends an asynchronous GET request to the API.
        #' - Processes the returned JSON data into a `data.table`.
        #'
        #' **Response Schema:**  
        #' The response contains:
        #' - `code`: `"200000"` on success.
        #' - `data`: An object containing:
        #'   - `uid`: Account UID.
        #'   - `subName`: (Optional) Sub account name.
        #'   - `remark`: Remarks for the API key.
        #'   - `apiKey`: The API key string.
        #'   - `apiVersion`: The version of the API key.
        #'   - `permission`: A comma-separated list of permissions.
        #'   - `ipWhitelist`: (Optional) IP whitelist.
        #'   - `isMaster`: Boolean indicating if this is the master account key.
        #'   - `createdAt`: Creation timestamp in milliseconds.
        #'
        #' For more information, refer to the [API Key Info Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-apikey-info).
        #'
        #' @return A promise that resolves to a `data.table` with API key information.
        get_apikey_info = function() {
            return(impl$get_apikey_info_impl(self$config))
        },

        #' Retrieve Spot Account Type.
        #'
        #' @description
        #' This method determines the type of your spot account (high-frequency vs. low-frequency). The account type
        #' influences which endpoints you use for transferring assets and querying balances.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v1/hf/accounts/opened`
        #'
        #' **How It Works:**  
        #' - Builds the request URL and authentication headers.
        #' - Sends a GET request asynchronously.
        #' - The response is processed to return a boolean value:
        #'   - `TRUE`: Indicates a high-frequency spot account.
        #'   - `FALSE`: Indicates a low-frequency spot account.
        #'
        #' For more details, see the [Spot Account Type Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-type-spot).
        #'
        #' @return A promise that resolves to a boolean (TRUE for high-frequency, FALSE for low-frequency).
        get_spot_account_type = function() {
            return(impl$get_spot_account_type_impl(self$config))
        },

        #' Retrieve Spot Account List.
        #'
        #' @description
        #' This method obtains a list of all spot accounts linked to your KuCoin account. You can filter the list
        #' by currency and account type (such as "main" or "trade"). This is especially useful if you manage multiple
        #' accounts and need to query specific subsets.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v1/accounts`
        #'
        #' **How It Works:**  
        #' - Constructs the endpoint URL with an optional query string.
        #' - Sends an asynchronous GET request with proper authentication.
        #' - Converts the returned JSON array into a `data.table`.
        #'
        #' **Response Schema:**  
        #' The response includes:
        #' - `code`: `"200000"` if the request is successful.
        #' - `data`: An array of objects, each containing:
        #'   - `id`: Unique account identifier.
        #'   - `currency`: Currency code (e.g., "USDT").
        #'   - `type`: Type of account (e.g., "main", "trade", "balance").
        #'   - `balance`: Total funds.
        #'   - `available`: Funds available for trading/withdrawal.
        #'   - `holds`: Funds on hold.
        #'
        #' For more details, refer to the [Spot Account List Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-list-spot).
        #'
        #' @param query A named list of query parameters (e.g., `list(currency = "USDT", type = "main")`).
        #' @return A promise that resolves to a `data.table` with the list of spot accounts.
        get_spot_account_dt = function(query = list()) {
            return(impl$get_spot_account_dt_impl(self$config, query))
        },

        #' Retrieve Spot Account Detail.
        #'
        #' @description
        #' This method retrieves detailed information for a specific spot account identified by its account ID.
        #' The detailed information includes currency, total balance, available balance, and funds on hold.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v1/accounts/{accountId}`
        #'
        #' **How It Works:**  
        #' - Interpolates the provided account ID into the endpoint URL.
        #' - Sends an asynchronous GET request with authentication headers.
        #' - Processes the response to return a `data.table` with the account details.
        #'
        #' **Response Schema:**  
        #' - `code`: `"200000"` signifies success.
        #' - `data`: An object containing:
        #'   - `currency`: The currency of the account.
        #'   - `balance`: The total funds held.
        #'   - `available`: Funds available for trading or withdrawal.
        #'   - `holds`: Funds that are locked or on hold.
        #'
        #' For further details, refer to the [Spot Account Detail Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-detail-spot).
        #'
        #' @param accountId A string representing the unique account ID.
        #' @return A promise that resolves to a `data.table` with detailed spot account information.
        get_spot_account_detail = function(accountId) {
            return(impl$get_spot_account_detail_impl(self$config, accountId))
        },

        #' Retrieve Cross Margin Account Information.
        #'
        #' @description
        #' This method retrieves detailed information about your cross margin account, which allows you to use collateral
        #' from multiple trading pairs. The returned data includes total assets, liabilities, debt ratios, and individual
        #' margin account details.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v3/margin/accounts`
        #'
        #' **How It Works:**  
        #' - Constructs a query string from the provided parameters.
        #' - Sends an authenticated asynchronous GET request.
        #' - Processes the response to produce a `data.table` with both summary and detailed margin account information.
        #'
        #' **Query Parameters:**  
        #' - `quoteCurrency`: (Optional) Filter by quote currency (e.g., "USDT"); defaults to "USDT".
        #' - `queryType`: (Optional) Filter by account type: "MARGIN", "MARGIN_V2", or "ALL"; defaults to "MARGIN".
        #'
        #' **Response Schema:**  
        #' The response includes:
        #' - `code`: "200000" indicates success.
        #' - `data`: An object containing overall metrics (e.g., total assets, liabilities, debt ratio, status) and an array `accounts` 
        #'   with detailed information for each margin account.
        #'
        #' For more details, see the [Cross Margin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-cross-margin).
        #'
        #' @param query A named list of query parameters (e.g., `list(quoteCurrency = "USDT", queryType = "MARGIN")`).
        #' @return A promise that resolves to a `data.table` containing cross margin account information.
        get_cross_margin_account = function(query = list()) {
            return(impl$get_cross_margin_account_impl(self$config, query))
        },

        #' Retrieve Isolated Margin Account Information.
        #'
        #' @description
        #' This method retrieves isolated margin account details for specific trading pairs. Isolated margin allows you
        #' to limit risk exposure to an individual pair by separating collateral. The response includes detailed asset 
        #' and liability information per trading pair.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v3/isolated/accounts`
        #'
        #' **How It Works:**  
        #' - Builds the endpoint URL with an optional query string based on parameters.
        #' - Sends an authenticated GET request asynchronously.
        #' - Processes the JSON response into a `data.table` containing isolated margin data.
        #'
        #' **Query Parameters:**  
        #' - `symbol`: (Optional) Specify a trading pair (e.g., "BTC-USDT"). If omitted, data for all pairs is returned.
        #' - `quoteCurrency`: (Optional) Filter by quote currency; defaults to "USDT".
        #' - `queryType`: (Optional) Allowed values: "ISOLATED", "ISOLATED_V2", "ALL"; defaults to "ISOLATED".
        #'
        #' **Response Schema:**  
        #' The response returns:
        #' - `code`: "200000" on success.
        #' - `data`: An object that includes overall metrics and an `assets` array with details for each pair.
        #'
        #' For more details, refer to the [Isolated Margin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-isolated-margin).
        #'
        #' @param query A named list of query parameters (e.g., `list(quoteCurrency = "USDT", queryType = "ISOLATED")`).
        #' @return A promise that resolves to a `data.table` with isolated margin account information.
        get_isolated_margin_account = function(query = list()) {
            return(impl$get_isolated_margin_account_impl(self$config, query))
        },

        #' Retrieve Spot Ledger Records.
        #'
        #' @description
        #' This method retrieves detailed ledger records for your spot and margin accounts. Ledger records include
        #' transaction histories such as deposits, withdrawals, transfers, and trades. The method supports filtering
        #' by multiple criteria, including currency, transaction direction, business type, and time range.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v1/accounts/ledgers`
        #'
        #' **How It Works:**  
        #' - Constructs the endpoint URL with a query string based on provided parameters.
        #' - Sends an asynchronous GET request with authentication headers.
        #' - Processes the paginated JSON response into a `data.table` that includes both the ledger items and pagination details.
        #'
        #' **Query Parameters:**  
        #' - `currency`: (Optional) One or more currencies to filter by (up to 10).
        #' - `direction`: (Optional) "in" for incoming or "out" for outgoing transactions.
        #' - `bizType`: (Optional) The business type (e.g., "DEPOSIT", "WITHDRAW", "TRANSFER").
        #' - `startAt` / `endAt`: (Optional) Millisecond timestamps to specify a time range.
        #' - `currentPage`: (Optional) Page number (default is 1).
        #' - `pageSize`: (Optional) Number of records per page (default is 50; minimum 10, maximum 500).
        #'
        #' **Response Schema:**  
        #' The response includes:
        #' - `code`: "200000" if successful.
        #' - `data`: An object containing:
        #'   - Pagination metadata: `currentPage`, `pageSize`, `totalNum`, `totalPage`.
        #'   - `items`: An array of ledger record objects detailing individual transactions.
        #'
        #' For further information, see the [Spot Ledger API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-ledgers-spot-margin).
        #'
        #' @param query A named list of query parameters (e.g., `list(currency = "BTC", direction = "in", bizType = "TRANSFER", currentPage = 1, pageSize = 50)`).
        #' @return A promise that resolves to a `data.table` containing ledger records and pagination info.
        get_spot_ledger = function(query = list()) {
            return(impl$get_spot_ledger_impl(self$config, query))
        }
    )
)

# ./KucoinSpotMarketData.R

# File: ./R/KucoinSpotMarketData.R

box::use(
    impl = ./impl_market_data,
    ./utils[ get_api_keys ]
)

#' @export
KucoinSpotMarketData <- R6::R6Class(
    "KucoinSpotMarketData",
    public = list()
)

# ./KucoinSubAccount.R

# File: ./R/KucoinSubAccount.R

box::use(
    impl = ./accounts_sub_account,
    ./utils[ get_api_keys, get_subaccount ]
)

#' KuCoin SubAccount Class
#'
#' The `KuCoinSubAccount` class provides a comprehensive, user-facing interface for interacting with KuCoin's 
#' sub-account endpoints. This class leverages asynchronous programming (using the `coro` package) to perform 
#' non-blocking HTTP requests and process responses efficiently. It is designed for users who need to manage 
#' sub-accounts—such as creating new sub-accounts, retrieving a paginated summary of all sub-accounts, and 
#' fetching detailed balance information for a specific sub-account.
#'
#' The class automatically loads API configuration parameters from the environment (via `get_api_keys()`) and 
#' sub-account–specific parameters via `get_subaccount()`, but these can also be provided explicitly.
#'
#' ## Available Methods
#'
#' - **initialize(config):**  
#'   Creates a new instance of the `KuCoinSubAccount` class with the given API configuration.
#'
#' - **add_subaccount(password, subName, access, remarks):**  
#'   Creates a new sub-account on KuCoin by sending a POST request to the endpoint `/api/v2/sub/user/created`.
#'   This method handles request body construction, header generation, error checking, and returns a `data.table` with the new sub-account's details.
#'   **Official API Docs:** [Add SubAccount](https://www.kucoin.com/docs-new/rest/account-info/sub-account/add-subaccount)
#'
#' - **get_subaccount_list_summary(page_size, max_pages):**  
#'   Retrieves a paginated summary list of sub-accounts by sending GET requests to `/api/v2/sub/user`. 
#'   The method automatically paginates and aggregates results into a single `data.table`, converting timestamp fields to POSIXct datetimes.
#'   **Official API Docs:** [Get Sub-Account List - Summary Info](https://www.kucoin.com/docs-new/rest/account-info/sub-account/get-subaccount-list-summary-info)
#'
#' - **get_subaccount_detail_balance(subUserId, includeBaseAmount):**  
#'   Retrieves detailed balance information for a specified sub-account by sending a GET request to 
#'   `/api/v1/sub-accounts/{subUserId}`. It processes multiple arrays (mainAccounts, tradeAccounts, marginAccounts, and tradeHFAccounts),
#'   converts them to `data.table`s with an added "accountType" column, aggregates them, and appends sub-account metadata.
#'   **Official API Docs:** [Get SubAccount Detail - Balance](https://www.kucoin.com/docs-new/rest/account-info/sub-account/get-subaccount-detail-balance)
#'
#' @examples
#' \dontrun{
#'     options(error = function() {
#'         rlang::entrace()
#'         rlang::last_trace()
#'         traceback()
#'     })
#'
#'     subAcc <- KuCoinSubAccount$new()
#'
#'     async_main <- coro::async(function() {
#'         result <- await(subAcc$add_subaccount(
#'             password = "SomeStrongPass12345",
#'             subName  = "Name12345678",
#'             access   = "Spot",
#'             remarks  = "Test sub-account"
#'         ))
#'         cat("SubAccount Creation Result:\n")
#'         print(result)
#'
#'         # Retrieve sub-account list summary.
#'         # Here we fetch 3 pages with a page size of 50.
#'         dt_summary <- await(subAcc$get_subaccount_list_summary(
#'             page_size = 50,
#'             max_pages = 3
#'         ))
#'         cat("SubAccount List Summary:\n")
#'         print(dt_summary)
#'
#'         # Example: Retrieve sub-account detail (balance) for a given subUserId.
#'         dt_balance <- await(subAcc$get_subaccount_detail_balance("some-accout-num", includeBaseAmount = FALSE))
#'         cat("SubAccount Detail - Balance:\n")
#'         print(dt_balance)
#'     })
#'
#'     async_main()
#'
#'     while (!later::loop_empty()) {
#'         later::run_now(timeoutSecs = Inf, all = TRUE)
#'     }
#' }
#'
#' @md
#' @export
KuCoinSubAccount <- R6::R6Class(
    "KuCoinSubAccount",
    public = list(
        config = NULL,
        #' Initialize a new KuCoinSubAccount object.
        #'
        #' @description
        #' Sets up the KuCoinSubAccount object with API credentials and sub-account configuration.
        #' If no configuration is provided, it automatically loads API parameters using `get_api_keys()`
        #' and sub-account parameters via `get_subaccount()`.
        #'
        #' @param config A list containing API configuration parameters (e.g., `api_key`, `api_secret`, `api_passphrase`, `base_url`, `key_version`).
        #'               Defaults to the output of `get_api_keys()`.
        #' @return A new instance of the `KuCoinSubAccount` class.
        initialize = function(config = get_api_keys()) {
            self$config <- config
        },

        #' Add SubAccount
        #'
        #' @description
        #' Creates a new sub-account under the master account by sending a POST request to KuCoin. This method builds the JSON request
        #' body using the provided sub-account details, generates authentication headers, sends the request, and processes the response.
        #' On success, it returns a `data.table` containing key details of the newly created sub-account.
        #'
        #' **API Endpoint:**  
        #' `POST https://api.kucoin.com/api/v2/sub/user/created`
        #'
        #' **Detailed Workflow:**  
        #' 1. Constructs the full URL by appending `/api/v2/sub/user/created` to the base URL from the configuration.
        #' 2. Prepares the request body with required parameters:
        #'    - `password`: (7–24 characters; must include letters and numbers)
        #'    - `subName`: (7–32 characters; must include at least one letter and one number; no spaces)
        #'    - `access`: Permission type (allowed values: "Spot", "Futures", "Margin")
        #'    - `remarks`: (Optional; if provided, must be 1–24 characters)
        #' 3. Converts the request body to JSON.
        #' 4. Asynchronously generates authentication headers.
        #' 5. Sends the POST request with a 3-second timeout.
        #' 6. Processes the JSON response; if the HTTP status is not 200 or the API code is not "200000", an error is raised.
        #' 7. Converts the returned `data` into a `data.table` and returns it.
        #'
        #' **API Documentation:**  
        #' [Add SubAccount](https://www.kucoin.com/docs-new/rest/account-info/sub-account/add-subaccount)
        #'
        #' @param password A string representing the sub-account password.
        #' @param subName A string representing the sub-account name.
        #' @param access A string representing the permission type ("Spot", "Futures", or "Margin").
        #' @param remarks (Optional) A string for additional remarks.
        #'
        #' @return A promise that resolves to a `data.table` with sub-account details (e.g., `uid`, `subName`, `remarks`, `access`).
        add_subaccount = function(password, subName, access, remarks = NULL) {
            return(impl$add_subaccount_impl(self$config, password, subName, access, remarks))
        },

        #' Get SubAccount List Summary (Paginated)
        #'
        #' @description
        #' Retrieves a complete summary of sub-accounts associated with your master account. This method sends GET requests to the 
        #' sub-account summary endpoint, automatically paginates through the results, and aggregates the data into a single `data.table`.
        #' If the response includes a "createdAt" field (in milliseconds), it is converted to a POSIXct datetime and stored in a new
        #' column "createdDatetime".
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v2/sub/user`
        #'
        #' **Detailed Workflow:**  
        #' 1. Initializes pagination with `currentPage = 1` and the specified `page_size`.
        #' 2. Uses an asynchronous helper function to fetch each page.
        #' 3. Aggregates the results from each page using `data.table::rbindlist()`.
        #' 4. Converts the "createdAt" column (if present) from milliseconds to POSIXct datetime.
        #'
        #' **API Documentation:**  
        #' [Get Sub-Account List - Summary Info](https://www.kucoin.com/docs-new/rest/account-info/sub-account/get-subaccount-list-summary-info)
        #'
        #' @param page_size An integer specifying the number of results per page (default is 100; valid range: 1–100).
        #' @param max_pages An integer specifying the maximum number of pages to fetch (default is Inf for all pages).
        #'
        #' @return A promise that resolves to a `data.table` containing aggregated sub-account summary information.
        get_subaccount_list_summary = function(page_size = 100, max_pages = Inf) {
            return(impl$get_subaccount_list_summary_impl(self$config, page_size, max_pages))
        },

        #' Get SubAccount Detail - Balance
        #'
        #' @description
        #' Retrieves detailed balance information for a specific sub-account, identified by its subUserId. This method sends 
        #' a GET request to the KuCoin endpoint for sub-account details and processes the response by handling separate arrays 
        #' for each account type (e.g., mainAccounts, tradeAccounts, marginAccounts, tradeHFAccounts). For each non-empty array,
        #' the method converts it into a `data.table`, adds an "accountType" column (indicating the source, such as "mainAccounts"),
        #' and aggregates all the results into a single `data.table`. It also appends the sub-account's `subUserId` and `subName`
        #' to every row.
        #'
        #' **API Endpoint:**  
        #' `GET https://api.kucoin.com/api/v1/sub-accounts/{subUserId}?includeBaseAmount={includeBaseAmount}`
        #'
        #' **Detailed Workflow:**  
        #' 1. Constructs the endpoint URL by inserting the provided `subUserId` and appending the query parameter 
        #'    `includeBaseAmount` (default is `FALSE`).
        #' 2. Generates authentication headers and sends a GET request with a 3-second timeout.
        #' 3. Processes the JSON response by checking for arrays corresponding to different account types.
        #' 4. Converts each non-empty array into a `data.table`, adds an "accountType" column, and aggregates them.
        #' 5. Appends the sub-account's `subUserId` and `subName` from the response to every row.
        #'
        #' **API Documentation:**  
        #' [Get SubAccount Detail - Balance](https://www.kucoin.com/docs-new/rest/account-info/sub-account/get-subaccount-detail-balance)
        #'
        #' @param subUserId A string representing the sub-account user ID.
        #' @param includeBaseAmount A boolean indicating whether to include currencies with zero balance (default is FALSE).
        #'
        #' @return A promise that resolves to a `data.table` containing detailed balance information for the sub-account. 
        #'         Each row includes currency information, an "accountType" column, and the sub-account's `subUserId` and `subName`.
        get_subaccount_detail_balance = function(subUserId, includeBaseAmount = FALSE) {
            return(impl$get_subaccount_detail_balance_impl(self$config, subUserId, includeBaseAmount))
        }
    )
)

# ./helpers_api.R

# File: ./R/helpers_api.R

box::use(./utils[ get_base_url ])

#' Get Server Time from KuCoin Futures API
#'
#' Retrieves the current server time (Unix timestamp in milliseconds) from the KuCoin Futures API.
#' The server time is critical for authenticated requests to KuCoin, as the API requires that the
#' timestamp header in each request is within 5 seconds of the actual server time. This function sends
#' an asynchronous GET request and returns a promise that resolves to the timestamp. If the request fails,
#' the promise is rejected with an error.
#'
#' **API Endpoint:**  
#' `GET https://api.kucoin.com/api/v1/timestamp`
#'
#' **Usage:**  
#' The server time is used to generate signatures and validate request freshness, helping prevent replay attacks.
#'
#' **Official Documentation:**  
#' [KuCoin Futures Get Server Time](https://www.kucoin.com/docs-new/rest/futures-trading/market-data/get-server-time)
#'
#' @param base_url The base URL for the KuCoin Futures API. Defaults to the result of \code{get_base_url()}.
#' @return A promise that resolves to a numeric Unix timestamp in milliseconds or rejects with an error.
#'
#' @examples
#' \dontrun{
#'     # Asynchronously retrieve the server time.
#'     get_server_time()$
#'         then(function(timestamp) {
#'             cat("KuCoin Server Time:", timestamp, "\n")
#'         })$
#'         catch(function(e) {
#'             message("Error retrieving server time: ", conditionMessage(e))
#'         })
#'
#'     # Run the event loop until all asynchronous tasks are processed.
#'     while (!later::loop_empty()) {
#'         later::run_now(timeoutSecs = Inf, all = TRUE)
#'     }
#' }
#'
#' @md
#'
#' @importFrom httr GET timeout content status_code
#' @importFrom jsonlite fromJSON
#' @importFrom rlang error_cnd abort
#' @importFrom promises promise
#' @export
get_server_time <- function(base_url = get_base_url()) {
    promises::promise(function(resolve, reject) {
        tryCatch({
            url <- paste0(base_url, "/api/v1/timestamp")
            response <- httr::GET(url, httr::timeout(3))
            if (httr::status_code(response) != 200) {
                reject(
                    rlang::error_cnd("rlang_error",
                    reason = paste("KuCoin API request failed with status code", httr::status_code(response)))
                )
                return()
            }
            response_text <- httr::content(response, as = "text", encoding = "UTF-8")
            parsed_response <- jsonlite::fromJSON(response_text)
            if (!all(c("code", "data") %in% names(parsed_response))) {
                reject(
                    rlang::error_cnd("rlang_error",
                    reason = "Invalid API response structure: missing 'code' or 'data' field")
                )
                return()
            }
            if (parsed_response$code != "200000") {
                reject(rlang::error_cnd("rlang_error", message = "KuCoin API returned an error"))
                return()
            }
            resolve(parsed_response$data)
        }, error = function(e) {
            reject(rlang::error_cnd("rlang_error", message = paste("Error retrieving server time:", conditionMessage(e))))
        })
    })
}

#' Build Request Headers for KuCoin API
#'
#' Asynchronously constructs the HTTP request headers required for making authenticated requests to the KuCoin API.
#' These headers include the API key, a signature computed using HMAC-SHA256, a timestamp, an encrypted passphrase,
#' the API key version, and the content type. The generated headers are essential for the security and integrity of API
#' requests.
#'
#' ## Detailed Workflow:
#'
#' 1. **Retrieve the Server Time:**  
#'    Calls \code{get_server_time()} (using the base URL from the configuration) to obtain the current server timestamp in milliseconds.
#'
#' 2. **Construct the Prehash String:**  
#'    Concatenates the timestamp, the uppercase HTTP method, the API endpoint, and the request body to form the prehash string.
#'
#' 3. **Generate the Signature:**  
#'    Computes an HMAC-SHA256 signature using the API secret and the prehash string. The raw signature is then encoded in base64.
#'
#' 4. **Encrypt the Passphrase:**  
#'    Signs the API passphrase with the API secret using HMAC-SHA256 and encodes the result in base64.
#'
#' 5. **Build the Headers:**  
#'    Returns a list of headers (via \code{httr::add_headers()}) that include:
#'    - \code{KC-API-KEY}
#'    - \code{KC-API-SIGN}
#'    - \code{KC-API-TIMESTAMP}
#'    - \code{KC-API-PASSPHRASE}
#'    - \code{KC-API-KEY-VERSION}
#'    - \code{Content-Type}
#'
#' **Parameters:**
#' - **method:** A character string specifying the HTTP method (e.g., "GET", "POST").
#' - **endpoint:** A character string representing the API endpoint (e.g., "/api/v1/orders").
#' - **body:** A character string containing the JSON-formatted request body. Use an empty string (`""`) if no payload is required.
#' - **config:** A list of configuration parameters; must include \code{api_key}, \code{api_secret}, \code{api_passphrase},
#'   \code{key_version}, and optionally \code{base_url}.
#'
#' **Return Value:**  
#' Returns a list of HTTP headers created using \code{httr::add_headers()}.
#'
#' **Usage Example:**
#' ```r
#' \dontrun{
#'   config <- list(
#'       api_key = "your_api_key",
#'       api_secret = "your_api_secret",
#'       api_passphrase = "your_api_passphrase",
#'       key_version = "2",
#'       base_url = "https://api.kucoin.com"
#'   )
#'
#'   # Build headers for a POST request with a JSON body.
#'   headers <- coro::await(build_headers("POST", "/api/v1/orders", '{"size": 1}', config))
#'   print(headers)
#'
#'   # For a GET request with no payload:
#'   headers <- coro::await(build_headers("GET", "/api/v1/orders", "", config))
#'   print(headers)
#' }
#' ```
#' @md
#' 
#' @importFrom httr add_headers
#' @importFrom digest hmac
#' @importFrom base64enc base64encode
#' @importFrom rlang abort
#' @export
build_headers <- coro::async(function(method, endpoint, body, config) {
    tryCatch({
        # Retrieve the current server time.
        timestamp <- await(get_server_time(get_base_url(config)))
        # Construct the prehash string.
        prehash <- paste0(timestamp, toupper(method), endpoint, body)
        # Compute the HMAC-SHA256 signature.
        sig_raw <- digest::hmac(
            key = config$api_secret,
            object = prehash,
            algo = "sha256",
            serialize = FALSE,
            raw = TRUE
        )
        # Base64-encode the signature.
        signature <- base64enc::base64encode(sig_raw)
        # Encrypt the API passphrase.
        passphrase_raw <- digest::hmac(
            key = config$api_secret,
            object = config$api_passphrase,
            algo = "sha256",
            serialize = FALSE,
            raw = TRUE
        )
        encrypted_passphrase <- base64enc::base64encode(passphrase_raw)
        # Build and return the headers.
        httr::add_headers(
            `KC-API-KEY` = config$api_key,
            `KC-API-SIGN` = signature,
            `KC-API-TIMESTAMP` = timestamp,
            `KC-API-PASSPHRASE` = encrypted_passphrase,
            `KC-API-KEY-VERSION` = config$key_version,
            `Content-Type` = "application/json"
        )
    }, error = function(e) {
        rlang::abort(
            paste("Failed to build request headers:", conditionMessage(e)),
            parent = e
        )
    })
})

#' Process and Validate KuCoin API Response
#'
#' This function processes an HTTP response from a KuCoin API request. It validates that the response
#' has a successful HTTP status and that the API-specific response code indicates success. If the response is
#' valid, it returns the "data" field from the parsed JSON. Otherwise, it raises an error.
#'
#' **Response Validation Workflow:**  
#' 1. Checks if the HTTP status code is 200.
#' 2. Parses the JSON response.
#' 3. Validates that the response contains the "code" field.
#' 4. Ensures the "code" is "200000" (success); if not, retrieves the error message from the "msg" field if available.
#' 5. Verifies the presence of the "data" field.
#'
#' **Usage Example:**
#' ```r
#' \dontrun{
#'   response <- httr::GET("https://api.kucoin.com/api/v2/user-info", headers)
#'   data <- process_kucoin_response(response, "https://api.kucoin.com/api/v2/user-info")
#'   print(data)
#' }
#' ```
#'
#' @param response An HTTP response object (e.g., from \code{httr::GET()}).
#' @param url A character string representing the requested URL (used for error messages).
#'
#' @return The "data" field from the parsed JSON response.
#'
#' @md
#' @export
process_kucoin_response <- function(response, url = "") {
    status_code <- httr::status_code(response)
    if (status_code != 200) {
        abort(paste("HTTP request failed with status code", status_code, "for URL:", url))
    }

    response_text <- httr::content(response, as = "text", encoding = "UTF-8")
    parsed_response <- jsonlite::fromJSON(response_text)

    if (!"code" %in% names(parsed_response)) {
        rlang::abort("Invalid API response structure: missing 'code' field.")
    }

    if (as.character(parsed_response$code) != "200000") {
        error_msg <- "No error message provided."
        if ("msg" %in% names(parsed_response)) {
            error_msg <- parsed_response$msg
        }
        rlang::abort(paste("KuCoin API returned an error:", parsed_response$code, "-", error_msg))
    }

    if (!"data" %in% names(parsed_response)) {
        rlang::abort("Invalid API response structure: missing 'data' field despite success code.")
    }

    return(parsed_response$data)
}

#' Generic Pagination Helper for KuCoin API Endpoints
#'
#' This asynchronous helper function facilitates automatic pagination for KuCoin API endpoints that return paginated
#' responses. It repeatedly calls a user-supplied function to fetch each page and aggregates the results using an 
#' aggregation function provided by the user.
#'
#' ## Detailed Workflow:
#' 1. **Fetch a Page:**  
#'    The function calls the user-supplied \code{fetch_page} function with the current query parameters.
#' 2. **Accumulate Results:**  
#'    The items from the current page (extracted via the \code{items_field} parameter) are added to an accumulator.
#' 3. **Determine Continuation:**  
#'    If the current page number is less than the total number of pages (or less than \code{max_pages} if specified),
#'    the function increments the page number and recursively calls itself.
#' 4. **Aggregate and Return:**  
#'    Once all pages have been fetched, the accumulator is passed to the \code{aggregate_fn} to produce the final result.
#'
#' **Parameters:**
#' - **fetch_page:** A function that takes a query list and returns a promise resolving to the page's response.
#' - **query:** A named list of query parameters for the first page (default is \code{list(currentPage = 1, pageSize = 50)}).
#' - **items_field:** The field in the response that contains the items to be aggregated (default is "items").
#' - **accumulator:** An internal accumulator for recursive calls (do not supply this parameter).
#' - **aggregate_fn:** A function to combine the accumulated results into the final output (default returns the accumulator list as is).
#' - **max_pages:** The maximum number of pages to fetch (default is \code{Inf} to fetch all available pages).
#'
#' **Return Value:**  
#' Returns a promise that resolves to the aggregated result as defined by the \code{aggregate_fn}.
#'
#' @md
#'
#' @export
auto_paginate <- coro::async(function(
    fetch_page,
    query = list(currentPage = 1, pageSize = 50),
    items_field = "items",
    accumulator = list(),
    aggregate_fn = function(acc) { acc },
    max_pages = Inf
) {
    tryCatch({
        response <- await(fetch_page(query))
        if (!is.null(response[[items_field]])) {
            page_items <- response[[items_field]]
        } else {
            page_items <- response
        }
        accumulator[[length(accumulator) + 1]] <- page_items
        currentPage <- response$currentPage
        totalPage   <- response$totalPage
        if (is.finite(max_pages) && currentPage >= max_pages) {
            return(aggregate_fn(accumulator))
        } else if (!is.null(currentPage) && !is.null(totalPage) && (currentPage < totalPage)) {
            query$currentPage <- currentPage + 1
            return(await(auto_paginate(fetch_page, query, items_field, accumulator, aggregate_fn, max_pages)))
        } else {
            return(aggregate_fn(accumulator))
        }
    }, error = function(e) {
        rlang::abort(paste("Error in auto_paginate:", conditionMessage(e)))
    })
})

# ./impl_account_and_funding.R

# File: ./R/impl_account_and_funding.R

box::use(
    ./helpers_api[ build_headers, process_kucoin_response ],
    ./utils[ build_query, convert_datetime_range_to_ms, get_base_url ]
)

#' Get Account Summary Information (Implementation)
#'
#' This asynchronous function implements the retrieval of account summary information from the KuCoin API. It is designed for internal use as a method in an R6 class and is **not** intended for direct consumption by end-users. The function performs the following operations:
#'
#' 1. **URL Construction:** Constructs the full API URL using the `base_url` provided in the configuration.
#' 2. **Header Preparation:** Builds the authentication headers based on the HTTP method, endpoint, and request body.
#' 3. **API Request:** Sends a `GET` request to the KuCoin API endpoint for account summary information.
#' 4. **Response Processing:** Processes the API response using a helper function and converts the result to a `data.table`.
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. The list must include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' **Returns**
#'
#' A promise that resolves to a `data.table` containing the account summary data.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v2/user-info`
#'
#' - **Response Schema:**
#'   - `code` (string): Status code, where `"200000"` indicates success.
#'   - `data` (object): Contains the account summary details, including:
#'     - `level` (integer): The user's VIP level.
#'     - `subQuantity` (integer): Total number of sub-accounts.
#'     - `spotSubQuantity` (integer): Number of sub-accounts with spot trading permissions.
#'     - `marginSubQuantity` (integer): Number of sub-accounts with margin trading permissions.
#'     - `futuresSubQuantity` (integer): Number of sub-accounts with futures trading permissions.
#'     - `optionSubQuantity` (integer): Number of sub-accounts with option trading permissions.
#'     - `maxSubQuantity` (integer): Maximum allowed sub-accounts, calculated as the sum of `maxDefaultSubQuantity` and `maxSpotSubQuantity`.
#'     - `maxDefaultSubQuantity` (integer): Maximum default open sub-accounts based on VIP level.
#'     - `maxSpotSubQuantity` (integer): Maximum additional sub-accounts with spot trading permissions.
#'     - `maxMarginSubQuantity` (integer): Maximum additional sub-accounts with margin trading permissions.
#'     - `maxFuturesSubQuantity` (integer): Maximum additional sub-accounts with futures trading permissions.
#'     - `maxOptionSubQuantity` (integer): Maximum additional sub-accounts with option trading permissions.
#'
#' For more detailed information, please see the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-summary-info).
#'
#' **Example**
#'
#' ```r
#' config <- list(
#'   api_key = "your_api_key",
#'   api_secret = "your_api_secret",
#'   api_passphrase = "your_api_passphrase",
#'   base_url = "https://api.kucoin.com",
#'   key_version = "2"
#' )
#'
#' # Execute the asynchronous request using coro::run:
#' coro::run(function() {
#'   dt <- await(get_account_summary_info_impl(config))
#'   print(dt)
#' })
#' ```
#'
#' @md
#' @export
get_account_summary_info_impl <- coro::async(function(config) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v2/user-info"
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- httr::GET(url, headers, timeout(3))

        # Use the helper to check the response and extract the data.
        data <- process_kucoin_response(response, url)

        dt <- data.table::as.data.table(data)
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_account_summary_info_impl:", conditionMessage(e)))
    })
})

#' Get API Key Information (Implementation)
#'
#' This asynchronous function implements the logic for retrieving API key information from the KuCoin API.
#' It is designed for internal use as a method in an R6 class and is **not** intended for direct consumption by end-users.
#' The function constructs the full URL, builds the authentication headers, sends the `GET` request, and processes the response,
#' converting the result into a `data.table`.
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. The list must include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' **Returns**
#'
#' A promise that resolves to a `data.table` containing the API key information.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v1/user/api-key`
#'
#' - **Response Schema:**
#'   - `code` (string): Status code, where `"200000"` indicates success.
#'   - `data` (object): Contains API key details, including:
#'     - `uid` (integer): Account UID.
#'     - `subName` (string, optional): Sub account name (if applicable; not provided for master accounts).
#'     - `remark` (string): Remarks associated with the API key.
#'     - `apiKey` (string): The API key.
#'     - `apiVersion` (integer): API version.
#'     - `permission` (string): A comma-separated list of permissions (e.g., `General, Spot, Margin, Futures, InnerTransfer, Transfer, Earn`).
#'     - `ipWhitelist` (string, optional): IP whitelist, if applicable.
#'     - `isMaster` (boolean): Indicates whether the API key belongs to the master account.
#'     - `createdAt` (integer): API key creation time in milliseconds.
#'
#' For additional details, please refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-apikey-info).
#'
#' **Example**
#'
#' ```r
#' config <- list(
#'   api_key = "your_api_key",
#'   api_secret = "your_api_secret",
#'   api_passphrase = "your_api_passphrase",
#'   base_url = "https://api.kucoin.com",
#'   key_version = "2"
#' )
#'
#' # Execute the asynchronous request using coro::run:
#' coro::run(function() {
#'   dt <- await(get_apikey_info_impl(config))
#'   print(dt)
#' })
#' ```
#'
#' @md
#' @export
get_apikey_info_impl <- coro::async(function(config) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/user/api-key"
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- httr::GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- data.table::as.data.table(data)
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_apikey_info_impl:", conditionMessage(e)))
    })
})

#' Get Spot Account Type Implementation
#'
#' This asynchronous function retrieves spot account type information from the KuCoin API. It is designed for internal use as a method in an R6 class and is **not** intended for direct consumption by end-users.
#'
#' The function performs the following operations:
#'
#' 1. **URL Construction:** Constructs the full API URL using the `base_url` provided in the configuration.
#' 2. **Header Preparation:** Builds the authentication headers based on the HTTP method, endpoint, and request body.
#' 3. **API Request:** Sends a `GET` request to the `/api/v1/hf/accounts/opened` endpoint.
#' 4. **Response Processing:** Processes the API response using a helper function, returning a boolean that indicates whether the current user is a high-frequency spot user (`TRUE`) or a low-frequency spot user (`FALSE`).
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. This list should include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' **Returns**
#'
#' A promise that resolves to a boolean value:
#'
#' - `TRUE` indicates that the current user is a high-frequency spot user.
#' - `FALSE` indicates that the current user is a low-frequency spot user.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v1/hf/accounts/opened`
#'
#' - **Response Schema:**
#'   - `code` (string): Status code, where `"200000"` indicates success.
#'   - `data` (boolean): Indicates the spot account type.
#'
#' For more information, please refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-type-spot).
#'
#' **Example**
#'
#' ```r
#' config <- list(
#'   api_key = "your_api_key",
#'   api_secret = "your_api_secret",
#'   api_passphrase = "your_api_passphrase",
#'   base_url = "https://api.kucoin.com",
#'   key_version = "2"
#' )
#'
#' # Execute the asynchronous request using coro::run:
#' coro::run(function() {
#'   is_high_freq <- await(get_spot_account_type_impl(config))
#'   print(is_high_freq)
#' })
#' ```
#'
#' @md
#' @export
get_spot_account_type_impl <- coro::async(function(config) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/hf/accounts/opened"
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- httr::GET(url, headers, timeout(3))
        # Process the response using a helper function; the returned data is expected to be a boolean.
        data <- process_kucoin_response(response, url)
        # data is expected to be a boolean value.
        return(data)
    }, error = function(e) {
        rlang::abort(paste("Error in get_spot_account_type_impl:", conditionMessage(e)))
    })
})

#' Get Spot Account DT Implementation
#'
#' This asynchronous function retrieves a list of spot accounts from the KuCoin API. It sends a 
#' `GET` request to the `/api/v1/accounts` endpoint with optional query parameters and returns the 
#' account list as a `data.table`. This function is intended for internal use within an R6 class and 
#' is **not** meant for direct end-user consumption.
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. It should include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' - `query`: A list of query parameters to filter the account list. Supported parameters include:
#'   - `currency` (string, optional): e.g., `"USDT"`.
#'   - `type` (string, optional): Allowed values include `"main"` or `"trade"`.
#'
#' **Returns**
#'
#' A promise that resolves to a `data.table` containing the list of spot accounts.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts`
#'
#' - **Response Schema:**
#'   - `code` (string): Status code, where `"200000"` indicates success.
#'   - `data` (array of objects): Each object represents an account and contains:
#'     - `id` (string): Account ID.
#'     - `currency` (string): Currency code.
#'     - `type` (string): Account type (e.g., `"main"`, `"trade"`, or `"balance"`).
#'     - `balance` (string): Total funds in the account.
#'     - `available` (string): Funds available for withdrawal or trading.
#'     - `holds` (string): Funds on hold.
#'
#' The JSON array returned from the API is converted into a `data.table`.
#'
#' For more detailed information, please refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-list-spot).
#'
#' **Example**
#'
#' ```r
#' query <- list(currency = "USDT", type = "main")
#' coro::run(function() {
#'   dt <- await(get_spot_account_dt_impl(config, query))
#'   print(dt)
#' })
#' ```
#'
#' @md
#' @export
get_spot_account_dt_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/accounts"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)

        response <- httr::GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- data.table::as.data.table(data)
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_spot_account_dt_impl:", conditionMessage(e)))
    })
})

#' Get Spot Account Detail Implementation
#'
#' This asynchronous function retrieves detailed information for a single spot account from the KuCoin API.
#' It is designed for internal use as a method in an R6 class and is **not** intended for direct end-user consumption.
#'
#' The function performs the following steps:
#'
#' 1. **URL Construction:**  
#'    Embeds the provided `accountId` into the endpoint to create the full API URL.
#'
#' 2. **Header Preparation:**  
#'    Builds the authentication headers using the HTTP method, endpoint, and an empty request body.
#'
#' 3. **API Request:**  
#'    Sends a `GET` request to the `/api/v1/accounts/{accountId}` endpoint.
#'
#' 4. **Response Processing:**  
#'    Processes the API response using a helper function and converts the parsed JSON into a `data.table`.
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. This list must include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' - `accountId`: A string representing the account ID for which the spot account details are requested.
#'
#' **Returns**
#'
#' A promise that resolves to a `data.table` containing detailed information for the specified spot account.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts/{accountId}`
#'
#' - **Response Schema:**
#'   - `code` (string): Status code, where `"200000"` indicates success.
#'   - `data` (object): Contains the following fields:
#'     - `currency` (string): The currency of the account.
#'     - `balance` (string): Total funds in the account.
#'     - `available` (string): Funds available for withdrawal or trading.
#'     - `holds` (string): Funds on hold (not available for use).
#'
#' For more details, please refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-detail-spot).
#'
#' **Example**
#'
#' ```r
#' config <- list(
#'   api_key = "your_api_key",
#'   api_secret = "your_api_secret",
#'   api_passphrase = "your_api_passphrase",
#'   base_url = "https://api.kucoin.com",
#'   key_version = "2"
#' )
#'
#' # Retrieve details for a specific account, e.g., "548674591753":
#' coro::run(function() {
#'   dt <- await(get_spot_account_detail_impl(config, "548674591753"))
#'   print(dt)
#' })
#' ```
#'
#' @md
#' @export
get_spot_account_detail_impl <- coro::async(function(config, accountId) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- paste0("/api/v1/accounts/", accountId)
        method <- "GET"
        body <- ""
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)

        response <- httr::GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        return(data.table::as.data.table(data))
    }, error = function(e) {
        rlang::abort(paste("Error in get_spot_account_detail_impl:", conditionMessage(e)))
    })
})

#' Get Cross Margin Account Implementation
#'
#' This asynchronous function retrieves information about the cross margin account from the KuCoin API.
#' It sends a `GET` request to the `/api/v3/margin/accounts` endpoint with optional query parameters and
#' returns the parsed response data as a `data.table`. This function is intended for internal use within an R6 class
#' and is **not** meant for direct end-user consumption.
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. This list must include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' - `query`: A list of query parameters to filter the account information. Supported parameters include:
#'   - `quoteCurrency` (string, optional): The quote currency. Allowed values are `"USDT"`, `"KCS"`, or `"BTC"`.
#'     Defaults to `"USDT"` if not provided.
#'   - `queryType` (string, optional): The type of account query. Allowed values are:
#'       - `"MARGIN"`: Only query low-frequency cross margin accounts.
#'       - `"MARGIN_V2"`: Only query high-frequency cross margin accounts.
#'       - `"ALL"`: Aggregate query, as seen on the website.
#'     Defaults to `"MARGIN"`.
#'
#' **Returns**
#'
#' A promise that resolves to a `data.table` containing the cross margin account information. The returned
#' `data.table` includes the following fields:
#'
#' - `totalAssetOfQuoteCurrency` (string): Total assets in the quote currency.
#' - `totalLiabilityOfQuoteCurrency` (string): Total liabilities in the quote currency.
#' - `debtRatio` (string): The debt ratio.
#' - `status` (string): The position status. Possible values include `"EFFECTIVE"`, `"BANKRUPTCY"`, `"LIQUIDATION"`, `"REPAY"`, or `"BORROW"`.
#' - `accounts` (list): A list of margin account details. Each element is an object containing:
#'     - `currency` (string): Currency code.
#'     - `total` (string): Total funds in the account.
#'     - `available` (string): Funds available for withdrawal or trading.
#'     - `hold` (string): Funds on hold.
#'     - `liability` (string): Current liabilities.
#'     - `maxBorrowSize` (string): Maximum borrowable amount.
#'     - `borrowEnabled` (boolean): Whether borrowing is enabled.
#'     - `transferInEnabled` (boolean): Whether transfers into the account are enabled.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v3/margin/accounts`
#'
#' For further details, please refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-cross-margin).
#'
#' **Example**
#'
#' ```r
#' query <- list(quoteCurrency = "USDT", queryType = "MARGIN")
#' coro::run(function() {
#'   dt <- await(get_cross_margin_account_impl(config, query))
#'   print(dt)
#' })
#' ```
#'
#' @md
#' @export
get_cross_margin_account_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v3/margin/accounts"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)

        response <- httr::GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- data.table::as.data.table(data)
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_cross_margin_account_impl:", conditionMessage(e)))
    })
})

#' Get Isolated Margin Account Implementation
#'
#' This asynchronous function retrieves information about the isolated margin account from the KuCoin API.
#' It sends a `GET` request to the `/api/v3/isolated/accounts` endpoint with optional query parameters and
#' returns the parsed response data as a `data.table`. This function is intended for internal use within an R6 class
#' and is **not** intended for direct end-user consumption.
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. This list must include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' - `query`: A list of query parameters to filter the isolated margin account information. Supported parameters include:
#'   - `symbol` (string, optional): For isolated trading pairs; if omitted, queries all pairs.
#'   - `quoteCurrency` (string, optional): The quote currency. Allowed values: `"USDT"`, `"KCS"`, `"BTC"`. Defaults to `"USDT"`.
#'   - `queryType` (string, optional): The type of account query. Allowed values: `"ISOLATED"`, `"ISOLATED_V2"`, `"ALL"`. Defaults to `"ISOLATED"`.
#'
#' **Returns**
#'
#' A promise that resolves to a `data.table` containing the isolated margin account information.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v3/isolated/accounts`
#'
#' - **Response Schema:**
#'   - `code` (string): Status code, where `"200000"` indicates success.
#'   - `data` (object): Contains:
#'     - `totalAssetOfQuoteCurrency` (string): Total assets in the quote currency.
#'     - `totalLiabilityOfQuoteCurrency` (string): Total liabilities in the quote currency.
#'     - `timestamp` (integer): The timestamp.
#'     - `assets` (array of objects): Each object represents a margin account detail with fields such as:
#'         - `symbol` (string): Trading pair symbol (e.g., `"BTC-USDT"`).
#'         - `status` (string): Position status.
#'         - `debtRatio` (string): Debt ratio.
#'         - `baseAsset` (object): Details of the base asset.
#'         - `quoteAsset` (object): Details of the quote asset.
#'
#' For more details, please refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-isolated-margin).
#'
#' **Example**
#'
#' ```r
#' query <- list(quoteCurrency = "USDT", queryType = "ISOLATED")
#' coro::run(function() {
#'   dt <- await(get_isolated_margin_account_impl(config, query))
#'   print(dt)
#' })
#' ```
#'
#' @md
#' @export
get_isolated_margin_account_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v3/isolated/accounts"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)

        response <- httr::GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- data.table::as.data.table(data)
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_isolated_margin_account_impl:", conditionMessage(e)))
    })
})

#' Get Spot Ledger Implementation
#'
#' This asynchronous function retrieves transaction records (ledgers) for spot/margin accounts from the KuCoin API.
#' It sends a `GET` request to the `/api/v1/accounts/ledgers` endpoint with optional query parameters and returns
#' the parsed ledger information as a `data.table`. This function is intended for internal use within an R6 class and is
#' **not** intended for direct end-user consumption.
#'
#' **Parameters**
#'
#' - `config`: A list containing API configuration parameters. This list should include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (e.g., `"2"`).
#'
#' - `query`: A list of query parameters to filter the ledger records. Supported parameters include:
#'   - `currency` (string, optional): One or more currencies (up to 10) to filter by; if omitted, all currencies are returned.
#'   - `direction` (string, optional): The direction of the transaction, either `"in"` or `"out"`.
#'   - `bizType` (string, optional): The business type of the transaction, e.g., `"DEPOSIT"`, `"WITHDRAW"`, `"TRANSFER"`, `"SUB_TRANSFER"`, `"TRADE_EXCHANGE"`, etc.
#'   - `startAt` (integer, optional): Start time in milliseconds.
#'   - `endAt` (integer, optional): End time in milliseconds.
#'   - `currentPage` (integer, optional): The page number (default is 1).
#'   - `pageSize` (integer, optional): Number of results per page (minimum 10, maximum 500; default is 50).
#'
#' **Returns**
#'
#' A promise that resolves to a `data.table` containing the ledger information, which includes:
#' - `currentPage`: The current page number.
#' - `pageSize`: The number of results per page.
#' - `totalNum`: The total number of records.
#' - `totalPage`: The total number of pages.
#' - `items`: An array of ledger records.
#'
#' **Details**
#'
#' - **Endpoint:** `GET https://api.kucoin.com/api/v1/accounts/ledgers`
#'
#' For further details, refer to the [KuCoin API Documentation](https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-ledgers-spot-margin).
#'
#' **Example**
#'
#' ```r
#' query <- list(currency = "BTC", direction = "in", bizType = "TRANSFER", currentPage = 1, pageSize = 50)
#' coro::run(function() {
#'   dt <- await(get_spot_ledger_impl(config, query))
#'   print(dt)
#' })
#' ```
#'
#' @md
#' @export
get_spot_ledger_impl <- coro::async(function(config, query = list()) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v1/accounts/ledgers"
        method <- "GET"
        body <- ""
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        # Build authentication headers using the full endpoint (including query string)
        headers <- await(build_headers(method, full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)
        response <- httr::GET(url, headers, timeout(3))
        data <- process_kucoin_response(response, url)
        dt <- data.table::as.data.table(data)
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_spot_ledger_impl:", conditionMessage(e)))
    })
})

# ./impl_account_sub_account.R

# File: ./R/impl_account_sub_account.R

box::use(
    ./helpers_api[ auto_paginate, build_headers, process_kucoin_response ],
    ./utils[ build_query, get_base_url ]
)

#' Add SubAccount Implementation
#'
#' This asynchronous function creates a new sub‐account on KuCoin by sending a POST request to the 
#' `/api/v2/sub/user/created` endpoint. Sub‐accounts are used to segregate trading activities or to allow 
#' multiple users within the same master account to operate independently. This function handles the entire 
#' process—from constructing the request body and generating the appropriate authentication headers to sending 
#' the request and processing the response. On success, it returns a `data.table` with key details about the 
#' newly created sub‐account.
#'
#' ## Endpoint Overview
#'
#' **Endpoint URL:**  
#' `POST https://api.kucoin.com/api/v2/sub/user/created`
#'
#' **Purpose:**  
#' This endpoint is used to add a new sub-account under a master KuCoin account. Sub-accounts can be used to manage 
#' different trading strategies or for delegating trading activities. They are particularly useful in institutional 
#' or multi-user environments.
#'
#' **Request Requirements:**  
#' - The request must be authenticated using the master account's API credentials.
#' - The POST request body must be in JSON format.
#'
#' **Response Details:**  
#' On success, the API returns a JSON response with a status code of `"200000"`, and the `data` object contains 
#' details about the newly created sub-account, including its unique identifier (uid), name, remarks, and permission type.
#'
#' ## Parameters
#'
#' - **config**:  
#'   A list containing API configuration parameters. This list must include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (typically `"https://api.kucoin.com"`).
#'   - `key_version`: The version of the API key (usually `"2"`).
#'
#' - **password**:  
#'   A string representing the sub‐account password.  
#'   **Requirements:**  
#'   - Must be between 7 and 24 characters in length.
#'   - Must contain both letters and numbers.
#'
#' - **subName**:  
#'   A string representing the desired sub‐account name.  
#'   **Requirements:**  
#'   - Must be between 7 and 32 characters.
#'   - Must contain at least one letter and one number.
#'   - Must not contain any spaces.
#'
#' - **access**:  
#'   A string representing the permission type for the sub‐account.  
#'   **Allowed Values:**  
#'   - `"Spot"`
#'   - `"Futures"`
#'   - `"Margin"`
#'
#' - **remarks**:  
#'   (Optional) A string containing remarks or notes about the sub‐account.  
#'   **Requirements:**  
#'   - If provided, must be between 1 and 24 characters.
#'
#' ## Return Value
#'
#' Returns a promise that resolves to a `data.table` containing the sub‐account details. The returned table 
#' will include at least the following columns:
#' - **uid**: The unique identifier for the sub-account.
#' - **subName**: The name of the sub-account.
#' - **remarks**: Any remarks or notes provided.
#' - **access**: The permission type granted to the sub-account.
#'
#' ## Detailed Workflow
#'
#' 1. **URL Construction:**  
#'    The function retrieves the base URL from the `config` and appends the endpoint `/api/v2/sub/user/created` to construct the full URL.
#'
#' 2. **Request Body Preparation:**  
#'    The function creates a list containing the required parameters (`password`, `subName`, `access`).  
#'    - If the optional parameter `remarks` is provided, it is added to the list.
#'    - The list is then converted to JSON format using `jsonlite::toJSON()` with `auto_unbox = TRUE` to ensure proper formatting.
#'
#' 3. **Header Preparation:**  
#'    Authentication headers are generated by calling `build_headers()` asynchronously. These headers include 
#'    the necessary signature and timestamp required by the KuCoin API.
#'
#' 4. **API Request:**  
#'    The function sends a POST request using `POST()` with the constructed URL, headers, and JSON body. A timeout 
#'    of 3 seconds is applied to the request.
#'
#' 5. **Response Handling:**  
#'    The response is read and parsed from JSON into an R object. The function checks for both HTTP and API-level 
#'    errors:
#'    - If the HTTP status code is not 200, an error is raised.
#'    - If the API returns a code other than `"200000"`, an error is raised with the message provided in the response.
#'
#' 6. **Result Conversion:**  
#'    On success, the `data` field of the response is converted to a `data.table` and returned.
#'
#' ## Example Usage
#'
#' ```r
#' \dontrun{
#'   # Assume `config` is already defined with the necessary API credentials.
#'   coro::run(function() {
#'       result <- await(add_subaccount_impl(
#'           config,
#'           password = "1234567",
#'           subName = "Name1234567",
#'           access = "Spot",
#'           remarks = "Test sub-account"
#'       ))
#'       print(result)
#'   })
#' }
#' ```
#'
#' @md
#' @export
add_subaccount_impl <- coro::async(function(config, password, subName, access, remarks = NULL) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- "/api/v2/sub/user/created"
        method <- "POST"
        body_list <- list(
            password = password,
            subName = subName,
            access = access
        )
        if (!is.null(remarks)) {
            body_list$remarks <- remarks
        }
        body <- jsonlite::toJSON(body_list, auto_unbox = TRUE)
        headers <- await(build_headers(method, endpoint, body, config))
        url <- paste0(base_url, endpoint)
        response <- POST(url, headers, body = body, encode = "raw", timeout(3))
        response_text <- httr::content(response, as = "text", encoding = "UTF-8")
        parsed_response <- jsonlite::fromJSON(response_text)
        if (httr::status_code(response) != 200) {
            rlang::abort(paste("HTTP request failed with status code", httr::status_code(response), "for URL:", url))
        }
        if (as.character(parsed_response$code) != "200000") {
            error_msg <- "No error message provided."
            if ("msg" %in% names(parsed_response)) {
                error_msg <- parsed_response$msg
            }
            rlang::abort(paste("KuCoin API returned an error:", parsed_response$code, "-", error_msg))
        }
        result <- NULL
        if ("data" %in% names(parsed_response)) {
            result <- data.table::as.data.table(parsed_response$data)
        } else {
            result <- parsed_response
        }
        return(result)
    }, error = function(e) {
        abort(paste("Error in add_subaccount_impl:", conditionMessage(e)))
    })
})

#' Get SubAccount Summary Information Implementation
#'
#' This asynchronous function retrieves a paginated summary of sub-accounts from KuCoin and aggregates the
#' results into a single `data.table`. It sends HTTP GET requests to the KuCoin sub-account endpoint and
#' automatically handles pagination. In the final aggregated `data.table`, each row represents the summary
#' information for one sub-account. Additionally, if the response contains a "createdAt" column (with timestamps
#' in milliseconds), those values are converted into human-readable POSIXct datetime objects.
#'
#' ## Endpoint Details
#'
#' **API Endpoint:**  
#' `GET https://api.kucoin.com/api/v2/sub/user`
#'
#' **Purpose:**  
#' This endpoint is used to retrieve a summary of sub-accounts associated with your KuCoin account. The response
#' is paginated and includes metadata such as the current page number, page size, total number of sub-accounts,
#' and total pages.
#'
#' **Response Schema:**  
#' The API returns a JSON object with the following structure:
#' - **code**: A string status code; `"200000"` indicates success.
#' - **data**: An object containing:
#'   - `currentPage` (integer): The current page number.
#'   - `pageSize` (integer): The number of results per page.
#'   - `totalNum` (integer): The total number of sub-accounts.
#'   - `totalPage` (integer): The total number of pages.
#'   - `items`: An array where each element corresponds to a sub-account summary with fields such as:
#'     - `userId`: The unique identifier of the master account.
#'     - `uid`: The unique identifier of the sub-account.
#'     - `subName`: The sub-account name.
#'     - `status`: The current status of the sub-account.
#'     - `type`: The type of sub-account.
#'     - `access`: The permission type granted (e.g., "All", "Spot", "Futures", "Margin").
#'     - `createdAt`: The timestamp (in milliseconds) when the sub-account was created.
#'     - `remarks`: Remarks or notes associated with the sub-account.
#'
#' For more details, please refer to the 
#' [KuCoin Sub-Account Summary Documentation](https://www.kucoin.com/docs-new/rest/account-info/sub-account/get-subaccount-list-summary-info).
#'
#' ## Function Workflow
#'
#' 1. **Pagination Initialization:**  
#'    The function begins by setting an initial query with `currentPage = 1` and the specified `page_size`.
#'
#' 2. **Page Fetching:**  
#'    An asynchronous helper function (`fetch_page`) is defined to send a GET request for a given page. It constructs
#'    the URL with query parameters and sends the request with the required authentication headers.
#'
#' 3. **Automatic Pagination:**  
#'    The function uses an `auto_paginate` utility to repeatedly call the `fetch_page` helper. It aggregates results from
#'    each page until all available pages are fetched or the specified maximum number of pages (`max_pages`) is reached.
#'
#' 4. **Aggregation:**  
#'    The responses from all pages are combined into a single `data.table` using `data.table::rbindlist()`, where each row
#'    represents one sub-account's summary information.
#'
#' 5. **Datetime Conversion:**  
#'    If a `createdAt` column is present, its millisecond timestamps are converted to POSIXct datetime objects and stored in a
#'    new column named `createdDatetime`.
#'
#' ## Parameters
#'
#' - **config**:  
#'   A list of API configuration parameters. This list should include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the KuCoin API (e.g., `"https://api.kucoin.com"`).
#'   - `key_version`: The API key version (commonly `"2"`).
#'
#' - **page_size**:  
#'   An integer specifying the number of results per page. The default is 100 (minimum 1, maximum 100).
#'
#' - **max_pages**:  
#'   An integer specifying the maximum number of pages to fetch. The default is `Inf`, meaning that all available pages will be retrieved.
#'
#' ## Return Value
#'
#' Returns a promise that resolves to a single `data.table` containing the aggregated sub-account summary information.
#' If the data contains a `createdAt` column, a new column `createdDatetime` is included with human-readable datetime values.
#'
#' ## Example Usage
#'
#' ```r
#' \dontrun{
#'   # Fetch all sub-account summaries using the default page size (100):
#'   dt_all <- await(get_subaccount_list_summary_impl(config))
#'   print(dt_all)
#'
#'   # Fetch only 3 pages of results with a page size of 50:
#'   dt_partial <- await(get_subaccount_list_summary_impl(config, page_size = 50, max_pages = 3))
#'   print(dt_partial)
#' }
#' ```
#'
#' @md
#' @export
get_subaccount_list_summary_impl <- coro::async(function(config, page_size = 100, max_pages = Inf) {
    tryCatch({
        fetch_page <- coro::async(function(query) {
            base_url <- get_base_url(config)
            endpoint <- "/api/v2/sub/user"
            method <- "GET"
            body <- ""
            qs <- build_query(query)
            full_endpoint <- paste0(endpoint, qs)
            headers <- await(build_headers(method, full_endpoint, body, config))
            url <- paste0(base_url, full_endpoint)
            response <- httr::GET(url, headers, timeout(3))
            data <- process_kucoin_response(response, url)
            return(data)
        })
        initial_query <- list(currentPage = 1, pageSize = page_size)
        dt <- await(auto_paginate(
            fetch_page = fetch_page,
            query = initial_query,
            items_field = "items",
            aggregate_fn = function(acc) {
                data.table::rbindlist(acc, fill = TRUE)
            },
            max_pages = max_pages
        ))
        # Convert "createdAt" from milliseconds to POSIXct datetime if the column exists.
        if ("createdAt" %in% colnames(dt)) {
            dt[, createdDatetime := lubridate::as_datetime(createdAt / 1000, origin = "1970-01-01", tz = "UTC")]
        }
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_subaccount_list_summary_impl:", conditionMessage(e)))
    })
})

#' Get SubAccount Detail - Balance Implementation
#'
#' This asynchronous function retrieves the balance details for a sub-account specified by its user ID. It sends a 
#' GET request to the KuCoin API endpoint for sub-account details and processes the returned JSON response. The 
#' endpoint provides separate arrays for each account type under the sub-account – typically including mainAccounts, 
#' tradeAccounts, marginAccounts, and tradeHFAccounts. Each non-empty array is converted into a `data.table`, an 
#' "accountType" column is added to indicate the type of account, and all the tables are combined into one aggregated 
#' `data.table`. Additionally, the function appends the sub-account's user ID and name to every row.
#'
#' ## Endpoint Overview
#'
#' **API Endpoint:**  
#' `GET https://api.kucoin.com/api/v1/sub-accounts/{subUserId}?includeBaseAmount={includeBaseAmount}`
#'
#' **Purpose:**  
#' This endpoint is used to obtain detailed balance information for a specific sub-account. The response is structured 
#' to provide separate balance details for various account categories (e.g., funding, spot, margin) within the sub-account.
#'
#' **Query Parameter:**  
#' - `includeBaseAmount` (boolean): Determines whether currencies with a zero balance should be included in the response.  
#'   - **Default:** `FALSE` (only non-zero balances are returned)
#'
#' **Response Schema:**  
#' On a successful request, the API returns a JSON object with a `code` of `"200000"` and a `data` field that contains:
#' - `subUserId`: The sub-account's user ID.
#' - `subName`: The sub-account name.
#' - `mainAccounts`: An array of objects detailing the funding account balances.
#' - `tradeAccounts`: An array of objects detailing the spot account balances.
#' - `marginAccounts`: An array of objects detailing the margin account balances.
#' - `tradeHFAccounts`: An array (often deprecated) for high-frequency trading accounts.
#'
#' Each account object within these arrays contains fields such as:
#' - `currency`: The currency code.
#' - `balance`: The total balance.
#' - `available`: The amount available for trading or withdrawal.
#' - `holds`: The amount currently locked or held.
#' - Additional fields like `baseCurrency`, `baseCurrencyPrice`, `baseAmount`, and `tag`.
#'
#' For more detailed information, refer to the 
#' [KuCoin Sub-Account Detail Balance Documentation](https://www.kucoin.com/docs-new/rest/account-info/sub-account/get-subaccount-detail-balance).
#'
#' ## Function Workflow
#'
#' 1. **URL and Query String Construction:**  
#'    The function constructs the endpoint URL by appending the `subUserId` to `/api/v1/sub-accounts/` and 
#'    adding the query parameter `includeBaseAmount` (defaulting to `FALSE` unless otherwise specified).
#'
#' 2. **Header Generation:**  
#'    It then asynchronously generates the necessary authentication headers by calling the `build_headers()` function.
#'
#' 3. **HTTP Request:**  
#'    A GET request is sent to the constructed URL using the `httr::GET()` function with a timeout of 3 seconds.
#'
#' 4. **Response Processing:**  
#'    The response is parsed from JSON into an R object using `process_kucoin_response()`. The function checks for 
#'    the presence of various account type arrays (e.g., mainAccounts, tradeAccounts). For each non-empty array:
#'    - The array is converted into a `data.table`.
#'    - An "accountType" column is added to identify the type (e.g., "mainAccounts", "tradeAccounts").
#'
#' 5. **Aggregation:**  
#'    All the individual `data.table` objects are combined using `data.table::rbindlist()`.
#'
#' 6. **Metadata Addition:**  
#'    Finally, the function adds the `subUserId` and `subName` (from the parent JSON object) as new columns in the final table.
#'
#' ## Parameters
#'
#' - **config**:  
#'   A list containing the API configuration parameters. This list must include:
#'   - `api_key`: Your KuCoin API key.
#'   - `api_secret`: Your KuCoin API secret.
#'   - `api_passphrase`: Your KuCoin API passphrase.
#'   - `base_url`: The base URL for the API (e.g., "https://api.kucoin.com").
#'   - `key_version`: The API key version (commonly "2").
#'
#' - **subUserId**:  
#'   A string representing the user ID of the sub-account for which the balance details are to be retrieved.
#'
#' - **includeBaseAmount**:  
#'   A boolean flag indicating whether to include currencies with a zero balance in the response.  
#'   **Default:** `FALSE`
#'
#' ## Return Value
#'
#' Returns a promise that resolves to a `data.table` containing the detailed balance information for the specified 
#' sub-account. Each row of the data.table represents a currency in one of the account types, with an additional 
#' column "accountType" indicating the source array, as well as the sub-account's `subUserId` and `subName`.
#'
#' ## Example Usage
#'
#' ```r
#' \dontrun{
#'   # Retrieve sub-account balance details for a specific sub-user ID, excluding zero-balance currencies.
#'   dt <- await(get_subaccount_detail_balance_impl(config, "63743f07e0c5230001761d08", includeBaseAmount = FALSE))
#'   print(dt)
#' }
#' ```
#'
#' @md
#' @export
get_subaccount_detail_balance_impl <- coro::async(function(config, subUserId, includeBaseAmount = FALSE) {
    tryCatch({
        base_url <- get_base_url(config)
        endpoint <- paste0("/api/v1/sub-accounts/", subUserId)
        query <- list(includeBaseAmount = includeBaseAmount)
        qs <- build_query(query)
        full_endpoint <- paste0(endpoint, qs)
        method <- "GET"
        body <- ""
        headers <- coro::await(build_headers("GET", full_endpoint, body, config))
        url <- paste0(base_url, full_endpoint)
        response <- httr::GET(url, headers, httr::timeout(3))
        data <- process_kucoin_response(response, url)

        # Process each account type into a data.table and add an accountType column.
        result_list <- list()
        if (!is.null(data$mainAccounts) && length(data$mainAccounts) > 0) {
            dt_main <- data.table::as.data.table(data$mainAccounts)
            dt_main[, accountType := "mainAccounts"]
            result_list[[length(result_list) + 1]] <- dt_main
        }
        if (!is.null(data$tradeAccounts) && length(data$tradeAccounts) > 0) {
            dt_trade <- data.table::as.data.table(data$tradeAccounts)
            dt_trade[, accountType := "tradeAccounts"]
            result_list[[length(result_list) + 1]] <- dt_trade
        }
        if (!is.null(data$marginAccounts) && length(data$marginAccounts) > 0) {
            dt_margin <- data.table::as.data.table(data$marginAccounts)
            dt_margin[, accountType := "marginAccounts"]
            result_list[[length(result_list) + 1]] <- dt_margin
        }
        if (!is.null(data$tradeHFAccounts) && length(data$tradeHFAccounts) > 0) {
            dt_tradeHF <- data.table::as.data.table(data$tradeHFAccounts)
            dt_tradeHF[, accountType := "tradeHFAccounts"]
            result_list[[length(result_list) + 1]] <- dt_tradeHF
        }
        if (length(result_list) == 0) {
            dt <- data.table::data.table()
        } else {
            dt <- data.table::rbindlist(result_list, fill = TRUE)
        }
        # Add subUserId and subName from the parent object.
        dt[, subUserId := data$subUserId]
        dt[, subName := data$subName]
        return(dt)
    }, error = function(e) {
        rlang::abort(paste("Error in get_subaccount_detail_balance_impl:", conditionMessage(e)))
    })
})

# ./impl_market_data.R


# ./utils.R

# File: utils.R

#' Build Query String for KuCoin API Request
#'
#' This function constructs a URL query string from a named list of parameters. It performs the following steps:
#'
#' 1. **Filter NULL Values:**  
#'    It removes any parameters whose value is \code{NULL} from the input list.
#'
#' 2. **Concatenate Parameters:**  
#'    It concatenates the remaining key-value pairs into a properly formatted query string. The resulting string 
#'    starts with a question mark and uses the format \code{"?key1=value1&key2=value2"}.
#'
#' **Important:**  
#' When building an authenticated request, the complete URL (base endpoint plus query string) must be passed to the 
#' header builder to ensure that the signature is computed over the full path.
#'
#' @param params A named list of query parameters.
#'
#' @return A string representing the query part of the URL. If no parameters are provided, an empty string is returned.
#'
#' @examples
#' \dontrun{
#'   # Example usage:
#'   query <- list(currency = "USDT", type = "main")
#'   qs <- build_query(query)
#'   # qs will be "?currency=USDT&type=main"
#' }
#'
#' @export
build_query <- function(params) {
    params <- params[!sapply(params, is.null)]
    if (length(params) == 0) return("")
    return(paste0("?", paste0(names(params), "=", params, collapse = "&")))
}

#' Get Base URL for KuCoin API
#'
#' This function returns the base URL for the KuCoin API. It checks if a configuration list is provided
#' and contains a \code{base_url} field; if so, it returns that value. Otherwise, it defaults to 
#' \code{"https://api.kucoin.com"}.
#'
#' @param config (Optional) A list containing API configuration parameters.
#'
#' @return A character string representing the base URL.
#'
#' @examples
#' \dontrun{
#'   config <- list(base_url = "https://api.kucoin.com")
#'   url <- get_base_url(config)  # Returns "https://api.kucoin.com"
#'
#'   url <- get_base_url()  # Returns the default "https://api.kucoin.com"
#' }
#'
#' @export
get_base_url <- function(config = NULL) {
    if (!is.null(config$base_url)) {
        return(config$base_url)
    }
    return("https://api.kucoin.com")
}

#' Retrieve KuCoin API Keys from Environment Variables
#'
#' This function retrieves the KuCoin API credentials from environment variables and returns them as a list.
#' It expects the following environment variables to be set:
#' - \code{KC-API-KEY}
#' - \code{KC-API-SECRET}
#' - \code{KC-API-PASSPHRASE}
#' - \code{KC-API-ENDPOINT} (optional)
#'
#' It also sets the API key version (default is "2"). These credentials are essential for making authenticated
#' requests to the KuCoin API.
#'
#' @param api_key        (Optional) The KuCoin API key. Defaults to \code{Sys.getenv("KC-API-KEY")}.
#' @param api_secret     (Optional) The KuCoin API secret. Defaults to \code{Sys.getenv("KC-API-SECRET")}.
#' @param api_passphrase (Optional) The KuCoin API passphrase. Defaults to \code{Sys.getenv("KC-API-PASSPHRASE")}.
#' @param base_url       (Optional) The base URL for the API. Defaults to \code{Sys.getenv("KC-API-ENDPOINT")}.
#' @param key_version    (Optional) The API key version. Defaults to "2".
#'
#' @return A list containing the API credentials and configuration parameters.
#'
#' @examples
#' \dontrun{
#'   config <- get_api_keys()
#'   print(config)
#' }
#'
#' @export
get_api_keys <- function(
    api_key        = Sys.getenv("KC-API-KEY"),
    api_secret     = Sys.getenv("KC-API-SECRET"),
    api_passphrase = Sys.getenv("KC-API-PASSPHRASE"),
    base_url       = Sys.getenv("KC-API-ENDPOINT"),
    key_version    = "2"
) {
    return(list(
        api_key        = api_key,
        api_secret     = api_secret,
        api_passphrase = api_passphrase,
        base_url       = base_url,
        key_version    = key_version
    ))
}

#' Retrieve SubAccount Configuration from Environment Variables
#'
#' This function retrieves sub-account–specific configuration parameters from environment variables.
#' It expects the following environment variables to be set:
#' - \code{KC-ACCOUNT-SUBACCOUNT-NAME}: The sub-account name.
#' - \code{KC-ACCOUNT-SUBACCOUNT-PASSWORD}: The sub-account password.
#'
#' These parameters are used for sub-account related operations.
#'
#' @param sub_account_name (Optional) The sub-account name. Defaults to \code{Sys.getenv("KC-ACCOUNT-SUBACCOUNT-NAME")}.
#' @param sub_account_password (Optional) The sub-account password. Defaults to \code{Sys.getenv("KC-ACCOUNT-SUBACCOUNT-PASSWORD")}.
#'
#' @return A list containing sub-account configuration parameters.
#'
#' @examples
#' \dontrun{
#'   sub_cfg <- get_subaccount()
#'   print(sub_cfg)
#' }
#'
#' @export
get_subaccount <- function(
    sub_account_name     = Sys.getenv("KC-ACCOUNT-SUBACCOUNT-NAME"),
    sub_account_password = Sys.getenv("KC-ACCOUNT-SUBACCOUNT-PASSWORD")
) {
    return(list(
        sub_account_name = sub_account_name,
        sub_account_password = sub_account_password
    ))
}

