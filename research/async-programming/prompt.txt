Wonderful! Now, do you remember the RMD blog post that we were writing? I want you to take everything that we've learned and to write it up as a blog post. I want you to step through feature by feature and write the equivalent between the JavaScript and the R code. I don't want to use any weird operators or weird pipes. I want the code from R to resemble as closely as possible to the structure and syntax of the JavaScript code. The title or purpose of the blog post is to get JavaScript developers writing asynchronous R code without shocking them too much, so the syntax should be as similar as possible. This is meant to be a crash course, but I want you to cover every single feature that might have an equivalency between R and JavaScript's asynchronous. So, for example, one thing that we still have to investigate, but I'm sure you know how to do it, is using things like promises.all. JavaScript has that. I don't know how you would do that in R. I think Coro has a feature like that or something like that, or maybe Promises already has a feature like that. The Promises package in R? I don't know. So just write a blog post in RMD. Give it to me in a separate code block so I can copy and paste it to be sure to escape all of the code blocks that appear within the RMD document. Format everything using four spaces. Make it a relatively verbose blog post. We want to be able to get people, JavaScript developers, writing asynchronous R code as nicely as possible.

// async.js
function getData() {
    return new Promise((resolve, reject) => {
        console.log("Simulating API call, waiting 2 seconds...");
        setTimeout(() => {
            // After 2 seconds, resolve with some data
            resolve("Data received");
        }, 2000);
    });
}

console.log("Before API call");

getData()
  .then(data => {
      console.log("Inside then: " + data);
  })
  .catch(error => {
      console.error("Error fetching data: ", error);
  });

console.log("After API call");

async function main() {
    try {
        const data = await getData();
        console.log("Inside async function: " + data);
    } catch (error) {
        console.error("Error fetching data: ", error);
    }
}

main().then(() => {
    console.log("Main function completed");
});

#!/usr/bin/env Rscript
# Import modules using box::use
box::use(
    promises,
    later,
    rlang[abort],
    coro
)

# Define an asynchronous function that returns a promise.
# This simulates an API call that resolves after 2 seconds.
getDataAsync <- function() {
    return(promises$promise(function(resolve, reject) {
        cat("Simulating API call, waiting 2 seconds...\n")
        later$later(function() {
            resolve("Data received")
        }, delay = 2)
    }))
}

cat("Before API call\n")

# Call getDataAsync() and chain with $then() and $catch(), similar to JavaScript.
getDataAsync()$then(function(data) {
    cat("Inside then: ", data, "\n")
})$catch(function(err) {
    abort("Error fetching data", parent = err)
})

cat("After API call\n")

# Define an async main function using coro::async.
# Inside the function, use await() (without the coro$ prefix) to wait for the promise.
main <- coro$async(function() {
    tryCatch({
        data <- await(getDataAsync()) # Use await() directly!
        cat("Inside async function: ", data, "\n")
    }, error = function(err) {
        cat("Error fetching data: ", err$message, "\n")
    })
})

# Call the main function and attach a then handler.
main()$then(function() {
    cat("Main function completed\n")
})

# In a non-interactive script, run the event loop until all tasks are complete.
while (!later$loop_empty()) {
    later$run_now(timeout = 0.1)
}
