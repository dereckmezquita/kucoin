% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_account_and_funding.R
\name{get_spot_ledger_impl}
\alias{get_spot_ledger_impl}
\title{Retrieve Spot Ledger Records (Implementation)}
\usage{
get_spot_ledger_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  query = list(),
  page_size = 50,
  max_pages = Inf,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List containing API configuration parameters from \code{get_api_keys()}, including:
\itemize{
\item \code{api_key}: Character string; your KuCoin API key.
\item \code{api_secret}: Character string; your KuCoin API secret.
\item \code{api_passphrase}: Character string; your KuCoin API passphrase.
\item \code{key_version}: Character string; API key version (e.g., \code{"2"}).
Defaults to \code{get_api_keys()}.
}}

\item{base_url}{Character string representing the base URL for the API. Defaults to \code{get_base_url()}.}

\item{query}{Named list of query parameters (excluding pagination):
\itemize{
\item \code{currency} (character, optional): Filter by currency (up to 10).
\item \code{direction} (character, optional): \code{"in"} or \code{"out"}.
\item \code{bizType} (character, optional): Business type (e.g., \code{"DEPOSIT"}, \code{"TRANSFER"}).
\item \code{startAt} (integer, optional): Start time in milliseconds.
\item \code{endAt} (integer, optional): End time in milliseconds.
}}

\item{page_size}{Integer; number of results per page (10â€“500, default 50).}

\item{max_pages}{Numeric; maximum number of pages to fetch (default \code{Inf} for all pages).}
}
\value{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{id} (character): Ledger record ID.
\item \code{currency} (character): Currency.
\item \code{amount} (character): Transaction amount.
\item \code{fee} (character): Transaction fee.
\item \code{balance} (character): Post-transaction balance.
\item \code{accountType} (character): Account type.
\item \code{bizType} (character): Business type.
\item \code{direction} (character): Transaction direction.
\item \code{createdAt} (integer): Timestamp in milliseconds.
\item \code{createdAtDatetime} (POSIXct): Converted datetime.
\item \code{context} (character): Transaction context.
\item \code{currentPage} (integer): Current page number.
\item \code{pageSize} (integer): Page size.
\item \code{totalNum} (integer): Total records.
\item \code{totalPage} (integer): Total pages.
}
}
\description{
Fetches detailed ledger records for spot and margin accounts from the KuCoin API asynchronously with pagination. This internal function is designed for use within an R6 class and is not intended for direct end-user consumption, aggregating transaction histories into a \code{data.table}.
}
\details{
\subsection{Workflow Overview}{
\enumerate{
\item \strong{URL Construction}: Combines the base URL (from \code{get_base_url()} or provided \code{base_url}) with \verb{/api/v1/accounts/ledgers}, merging query parameters with pagination settings.
\item \strong{Header Preparation}: Constructs authentication headers using \code{build_headers()} within an inner async function.
\item \strong{API Request}: Utilises \code{auto_paginate} to fetch all pages asynchronously via an inner \code{fetch_page} function.
\item \strong{Response Processing}: Aggregates \code{"items"} from each page into a \code{data.table} with \code{data.table::rbindlist()}, adding a \code{createdAtDatetime} column via \code{time_convert_from_kucoin()}.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/accounts/ledgers}
}

\subsection{Usage}{

Utilised internally by \code{KucoinAccountAndFunding} to retrieve ledger records for spot and margin accounts.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-ledgers-spot-margin}{KuCoin Get Account Ledgers Spot Margin}
}
}
\examples{
\dontrun{
keys <- get_api_keys()
base_url <- "https://api.kucoin.com"
query <- list(
  currency = "BTC",
  direction = "in",
  bizType = "TRANSFER",
  startAt = 1728663338000L,
  endAt = 1728692138000L
)
main_async <- coro::async(function() {
  dt <- await(get_spot_ledger_impl(
    keys = keys,
    base_url = base_url,
    query = query,
    page_size = 50L,
    max_pages = 10
  ))
  print(dt)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
