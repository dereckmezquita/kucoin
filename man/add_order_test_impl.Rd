% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_add_order.R
\name{add_order_test_impl}
\alias{add_order_test_impl}
\title{Add Order Test (Implementation)}
\usage{
add_order_test_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  type,
  symbol,
  side,
  clientOid = NULL,
  price = NULL,
  size = NULL,
  funds = NULL,
  stp = NULL,
  tags = NULL,
  remark = NULL,
  timeInForce = NULL,
  cancelAfter = NULL,
  postOnly = NULL,
  hidden = NULL,
  iceberg = NULL,
  visibleSize = NULL,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{type}{Character string; order type: "limit" or "market". Required.}

\item{symbol}{Character string; trading pair (e.g., "BTC-USDT"). Required.}

\item{side}{Character string; order side: "buy" or "sell". Required.}

\item{clientOid}{Character string; unique client order ID (recommended UUID, max 40 chars). Optional.}

\item{price}{Character string; price for limit orders (must align with priceIncrement). Required for limit orders.}

\item{size}{Character string; quantity for limit or market orders (must align with baseIncrement). Required for limit, optional for market.}

\item{funds}{Character string; funds for market orders (must align with quoteIncrement). Optional for market, mutually exclusive with size.}

\item{stp}{Character string; self-trade prevention strategy: "CN", "CO", "CB", or "DC". Optional.}

\item{tags}{Character string; order tag (max 20 ASCII chars). Optional.}

\item{remark}{Character string; order remarks (max 20 ASCII chars). Optional.}

\item{timeInForce}{Character string; time-in-force strategy: "GTC", "GTT", "IOC", or "FOK". Optional, defaults to "GTC".}

\item{cancelAfter}{Integer; cancel after n seconds (for GTT). Optional.}

\item{postOnly}{Logical; passive order flag (disabled for IOC/FOK). Optional, defaults to FALSE.}

\item{hidden}{Logical; hide order from order book. Optional, defaults to FALSE.}

\item{iceberg}{Logical; show only visible portion in iceberg orders. Optional, defaults to FALSE.}

\item{visibleSize}{Character string; max visible quantity for iceberg orders. Optional.}
}
\value{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{orderId} (character): Simulated unique order ID.
\item \code{clientOid} (character): Client-specified order ID.
}
}
\description{
Simulates placing a new order (limit or market) to the KuCoin Spot trading system asynchronously for testing purposes.
This function validates parameters and checks the signature without actually placing an order.
It returns the same response structure as the actual order placement endpoint.
}
\details{
\subsection{Workflow Overview}{
\enumerate{
\item \strong{Parameter Validation}: Validates required and optional parameters based on order type (limit/market) using \code{rlang::arg_match0} for enumerated values.
\item \strong{Request Body Construction}: Builds a JSON body with mandatory and optional parameters.
\item \strong{Authentication}: Generates headers with API credentials using \code{build_headers()}.
\item \strong{API Request}: Sends a POST request to the KuCoin API test endpoint with a 3-second timeout.
\item \strong{Response Processing}: Parses the response, validates success, and returns simulated order details as a \code{data.table}.
}
}

\subsection{API Endpoint}{

\verb{POST https://api.kucoin.com/api/v1/hf/orders/test}
}

\subsection{Usage}{

Utilised to test order placement logic and signature validity without affecting the actual trading system.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/add-order-test}{KuCoin Add Order Test}
}
}
\examples{
\dontrun{
main_async <- coro::async(function() {
  # Test a limit buy order
  test_order <- await(add_order_test_impl(
    type = "limit",
    symbol = "BTC-USDT",
    side = "buy",
    price = "50000",
    size = "0.0001",
    clientOid = uuid::UUIDgenerate(),
    remark = "Test limit order"
  ))
  print(test_order)

  # Test a market buy order with funds
  test_market_order <- await(add_order_test_impl(
    type = "market",
    symbol = "BTC-USDT",
    side = "buy",
    funds = "10",
    clientOid = uuid::UUIDgenerate()
  ))
  print(test_market_order)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
