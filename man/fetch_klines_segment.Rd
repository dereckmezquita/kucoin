% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_market_data_get_klines.R
\name{fetch_klines_segment}
\alias{fetch_klines_segment}
\title{Fetch a Segment of Klines Data}
\usage{
fetch_klines_segment(
  base_url = get_base_url(),
  symbol,
  freq = "15min",
  from = lubridate::now() - 1 * 3600,
  to = lubridate::now(),
  retries = 3,
  delay_ms = 0,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{symbol}{Character string; trading pair in KuCoin format (e.g., \code{"BTC-USDT"}).}

\item{freq}{Character string; candlestick interval (e.g., \code{"15min"}). Allowed values: \code{"1min"}, \code{"3min"}, \code{"5min"}, \code{"15min"}, \code{"30min"}, \code{"1hour"}, \code{"2hour"}, \code{"4hour"}, \code{"6hour"}, \code{"8hour"}, \code{"12hour"}, \code{"1day"}, \code{"1week"}, \code{"1month"}. Defaults to \code{"15min"}.}

\item{from}{POSIXct object; start time of the segment. Defaults to one hour before the current time.}

\item{to}{POSIXct object; end time of the segment. Defaults to the current time.}

\item{retries}{Integer; number of retry attempts for the HTTP request (default 3).}

\item{delay_ms}{Numeric; delay in milliseconds before sending the request (default 0).}
}
\value{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{datetime} (POSIXct): Converted timestamp.
\item \code{timestamp} (numeric): Raw timestamp in seconds.
\item \code{open} (numeric): Opening price.
\item \code{close} (numeric): Closing price.
\item \code{high} (numeric): Highest price in the interval.
\item \code{low} (numeric): Lowest price in the interval.
\item \code{volume} (numeric): Trading volume.
\item \code{turnover} (numeric): Trading turnover.
}
}
\description{
Retrieves a segment of candlestick (klines) data for a specified trading pair from the KuCoin API asynchronously, handling up to 1500 candles per request.
}
\details{
\subsection{Workflow Overview}{
\enumerate{
\item \strong{Delay Application}: Pauses for \code{delay_ms} milliseconds if specified, to throttle requests.
\item \strong{Query Construction}: Builds the query string with \code{symbol}, \code{type} (frequency), \code{startAt}, and \code{endAt} using \code{build_query()}.
\item \strong{URL Assembly}: Combines \code{base_url} with the endpoint \verb{/api/v1/market/candles} and query string.
\item \strong{API Request}: Sends a GET request with retries using \code{httr::RETRY()} and a 10-second timeout.
\item \strong{Response Processing}: Processes the response with \code{process_kucoin_response()}, converts data to a \code{data.table}, standardises column names, coerces numerics, adds a \code{datetime} column, and orders by \code{datetime}.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/candles}
}

\subsection{Usage}{

Utilised as a helper to fetch individual segments of klines data, typically within a broader segmented retrieval strategy.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-klines}{KuCoin Get Klines}
}
}
\examples{
\dontrun{
main_async <- coro::async(function() {
  dt_segment <- await(fetch_klines_segment(
    symbol = "BTC-USDT",
    freq = "15min",
    from = lubridate::now() - 3600,
    to = lubridate::now(),
    retries = 3,
    delay_ms = 100
  ))
  print(dt_segment)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
