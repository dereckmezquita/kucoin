% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_market_data_get_klines.R
\name{fetch_klines_segment}
\alias{fetch_klines_segment}
\title{Fetch a Segment of Klines Data}
\usage{
fetch_klines_segment(
  base_url = get_base_url(),
  symbol,
  freq = "15min",
  from = lubridate::now() - 1 * 3600,
  to = lubridate::now(),
  retries = 3,
  delay_ms = 0,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{base_url}{A character string representing the base URL for the KuCoin API. Defaults to `get_base_url()`.}

\item{symbol}{A character string representing the trading pair in KuCoin format (e.g., "BTC-USDT").}

\item{freq}{A character string specifying the candlestick interval. Allowed values include "1min", "3min", "5min", "15min",
"30min", "1hour", "2hour", "4hour", "6hour", "8hour", "12hour", "1day", "1week", "1month". Default is "15min".}

\item{from}{A POSIXct object representing the start time of the segment. Defaults to one hour before the current time.}

\item{to}{A POSIXct object representing the end time of the segment. Defaults to the current time.}

\item{retries}{An integer specifying the number of retry attempts for the HTTP request in case of failure. Default is 3.}

\item{delay_ms}{A numeric value representing the delay in milliseconds before sending the request. Default is 0.}
}
\value{
A promise that resolves to a `data.table` containing the klines data for the specified segment.
        The resulting data.table includes:
        \describe{
          \item{timestamp}{Numeric, the raw timestamp in seconds.}
          \item{open}{Numeric, the opening price.}
          \item{close}{Numeric, the closing price.}
          \item{high}{Numeric, the highest price in the interval.}
          \item{low}{Numeric, the lowest price in the interval.}
          \item{volume}{Numeric, the trading volume.}
          \item{turnover}{Numeric, the trading turnover.}
          \item{datetime}{POSIXct, the converted datetime from the timestamp.}
        }
}
\description{
This asynchronous helper function retrieves a segment of candlestick (klines) data for a specified trading pair
from the KuCoin API. Because the API returns a maximum of 1500 candles per request, this function is intended to be
used to fetch data for a smaller segment of the total requested time range.
}
\details{
**Workflow Overview:**

1. **Optional Delay:**  
   If a delay (in milliseconds) is specified via `delay_ms`, the function pauses for that duration before issuing
   the HTTP request. This delay can help in throttling concurrent requests to avoid rate limiting.

2. **Endpoint & Query Construction:**  
   Constructs the full API URL by appending the appropriate query parameters to the base URL. The query parameters include:
   - `symbol`: The trading pair (e.g., "BTC-USDT").
   - `type`: The candlestick interval (e.g., "15min").
   - `startAt`: The segment's start time converted to a UNIX timestamp in seconds.
   - `endAt`: The segment's end time converted to a UNIX timestamp in seconds.

3. **HTTP Request:**  
   Sends a GET request using `httr::RETRY()` with the specified number of retries and a timeout.

4. **Response Processing:**  
   Processes the API response using `process_kucoin_response()` to ensure it is valid, converts the raw data into a
   `data.table`, standardizes the column names, coerces numeric values, and adds a `datetime` column by converting the
   `timestamp`.

**API Documentation:**  
[KuCoin Get Klines](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-klines)


This function is a low-level helper intended to be used as part of a segmented approach for retrieving historical market data.
It does not perform authentication since the endpoint is public. Users should note that concurrent requests using this function
may lead to rate limiting; consider using the `delay_ms` parameter or sequential execution if necessary.
}
\examples{
\dontrun{
  # Retrieve a 15min segment of klines data for BTC-USDT over the past hour with a 100ms delay
  dt_segment <- await(fetch_klines_segment(
      symbol = "BTC-USDT",
      freq = "15min",
      from = lubridate::now() - 3600,
      to = lubridate::now(),
      retries = 3,
      delay_ms = 100
  ))
  print(dt_segment)
}

}
