% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_account_and_funding.R
\name{get_spot_account_detail_impl}
\alias{get_spot_account_detail_impl}
\title{Get Spot Account Detail Implementation}
\usage{
get_spot_account_detail_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  accountId,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{A list containing API configuration parameters, as returned by \code{get_api_keys()}. The list must include:
\itemize{
\item \code{api_key}: Your KuCoin API key.
\item \code{api_secret}: Your KuCoin API secret.
\item \code{api_passphrase}: Your KuCoin API passphrase.
\item \code{key_version}: The version of the API key (e.g., "2").
}}

\item{base_url}{A character string representing the base URL for the API. If not provided, the function uses \code{get_base_url()}.}

\item{accountId}{A string representing the account ID for which the spot account details are requested.}
}
\value{
A promise that resolves to a \code{data.table} containing detailed information for the specified spot account.
The resulting data table is constructed from the \code{"data"} field of the raw API response, and includes the following columns:
\itemize{
\item \strong{currency} (string): The currency of the account.
\item \strong{balance} (string): Total funds in the account.
\item \strong{available} (string): Funds available for withdrawal or trading.
\item \strong{holds} (string): Funds on hold (not available for use).
}
}
\description{
This asynchronous function retrieves detailed information for a single spot account from the KuCoin API.
It is designed for internal use as a method in an R6 class and is \strong{not} intended for direct end-user consumption.
The function performs the following steps:
}
\details{
\enumerate{
\item \strong{URL Construction:} Constructs the full API URL by calling \code{get_base_url()} (or using the user-supplied \code{base_url})
and embedding the provided \code{accountId} into the endpoint.
\item \strong{Header Preparation:} Builds the authentication headers based on the HTTP method, endpoint, and an empty request body.
\item \strong{API Request:} Sends a \code{GET} request to the \code{/api/v1/accounts/{accountId}} endpoint.
\item \strong{Response Processing:} Processes the API response using a helper function and converts the \code{"data"} field to a \code{data.table}.
}

\strong{Endpoint:} \code{GET https://api.kucoin.com/api/v1/accounts/{accountId}}

\strong{Raw Response Schema:}
\itemize{
\item \code{code} (string): Status code, where "200000" indicates success.
\item \code{data} (object): Contains the account details, including:
\itemize{
\item \code{currency} (string): The currency of the account.
\item \code{balance} (string): Total funds in the account.
\item \code{available} (string): Funds available for withdrawal or trading.
\item \code{holds} (string): Funds on hold.
}
}

The response JSON data looks like this:
\preformatted{{
{
    "code": "200000",
    "data": {
        "currency": "USDT",
        "balance": "26.66759503",
        "available": "26.66759503",
        "holds": "0"
    }
}
}}

For more detailed information, please see the \href{https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-detail-spot}{KuCoin API Documentation}.
}
\examples{
\dontrun{
  # Retrieve API keys from the environment using get_api_keys()
  keys <- get_api_keys()

  # Optionally, specify a base URL; if not provided, defaults to the value from get_base_url()
  base_url <- "https://api.kucoin.com"

  # Specify the account ID for which details are requested, e.g., "123456789"
  accountId <- "123456789"

  # Execute the asynchronous request using coro::run:
  main_async <- coro::async(function() {
    dt <- await(get_spot_account_detail_impl(keys, base_url, accountId))
    print(dt)
  })

  main_async()
  while (!later::loop_empty()) {
    later::run_now()
  }
}

}
