% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_market_data_get_klines.R
\name{get_klines_impl}
\alias{get_klines_impl}
\title{Retrieve Historical Klines Data (Implementation)}
\usage{
get_klines_impl(
  base_url = get_base_url(),
  symbol = "BTC-USDT",
  freq = "15min",
  from = lubridate::now() - 24 * 3600,
  to = lubridate::now(),
  concurrent = TRUE,
  delay_ms = 0,
  retries = 3,
  verbose = FALSE,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{symbol}{Character string; trading pair (e.g., \code{"BTC-USDT"}). Defaults to \code{"BTC-USDT"}.}

\item{freq}{Character string; candlestick interval (e.g., \code{"15min"}). Allowed values: \code{"1min"}, \code{"3min"}, \code{"5min"}, \code{"15min"}, \code{"30min"}, \code{"1hour"}, \code{"2hour"}, \code{"4hour"}, \code{"6hour"}, \code{"8hour"}, \code{"12hour"}, \code{"1day"}, \code{"1week"}, \code{"1month"}. Defaults to \code{"15min"}.}

\item{from}{POSIXct object; start time for data retrieval. Defaults to 24 hours before now.}

\item{to}{POSIXct object; end time for data retrieval. Defaults to now.}

\item{concurrent}{Logical; whether to fetch segments concurrently (default \code{TRUE}). Caution: May trigger rate limits.}

\item{delay_ms}{Numeric; delay in milliseconds before each request (default 0).}

\item{retries}{Integer; number of retry attempts per segment request (default 3).}

\item{verbose}{Logical; whether to print progress messages (default \code{FALSE}).}
}
\value{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{datetime} (POSIXct): Converted timestamp.
\item \code{timestamp} (numeric): Raw timestamp in seconds.
\item \code{open} (numeric): Opening price.
\item \code{close} (numeric): Closing price.
\item \code{high} (numeric): Highest price in the interval.
\item \code{low} (numeric): Lowest price in the interval.
\item \code{volume} (numeric): Trading volume.
\item \code{turnover} (numeric): Trading turnover.
}
}
\description{
Retrieves historical candlestick (klines) data for a single trading pair from the KuCoin API asynchronously, segmenting requests to handle the 1500-candle limit per request.
}
\details{
\subsection{Workflow Overview}{
\enumerate{
\item \strong{Input Validation}: Converts \code{from} and \code{to} to POSIXct and ensures \code{from} is earlier than \code{to}.
\item \strong{Frequency Conversion}: Translates \code{freq} to seconds using \code{frequency_to_seconds()}.
\item \strong{Segmentation}: Splits the time range into segments with \code{split_time_range_by_candles()}, each up to 1500 candles.
\item \strong{Segment Fetching}: Creates promises for each segment via \code{fetch_klines_segment()}.
\item \strong{Execution Mode}: Fetches segments concurrently with \code{promises::promise_all()} if \code{concurrent = TRUE}, or sequentially otherwise.
\item \strong{Aggregation}: Combines segment results with \code{data.table::rbindlist()}, removes duplicates by \code{timestamp}, and orders by \code{datetime}.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/candles} (via \code{fetch_klines_segment()})
}

\subsection{Usage}{

Utilised to fetch and aggregate historical klines data for analysis, supporting both concurrent and sequential retrieval.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-klines}{KuCoin Get Klines}
}
}
\examples{
\dontrun{
main_async <- coro::async(function() {
  dt <- await(get_klines_impl(symbol = "BTC-USDT", freq = "15min"))
  print(dt)
  dt_seq <- await(get_klines_impl(
    symbol = "BTC-USDT",
    freq = "15min",
    concurrent = FALSE,
    delay_ms = 200
  ))
  print(dt_seq)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
