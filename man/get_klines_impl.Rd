% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_market_data_get_klines.R
\name{get_klines_impl}
\alias{get_klines_impl}
\title{Retrieve Historical Klines Data}
\usage{
get_klines_impl(
  base_url = get_base_url(),
  symbol = "BTC-USDT",
  freq = "15min",
  from = lubridate::now() - 24 * 3600,
  to = lubridate::now(),
  concurrent = TRUE,
  delay_ms = 0,
  retries = 3,
  verbose = FALSE,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{base_url}{A character string representing the base URL for the KuCoin API. Defaults to the value returned by `get_base_url()`.}

\item{symbol}{A single character string representing the trading pair (e.g., "BTC-USDT").}

\item{freq}{A character string specifying the candlestick interval. Allowed values include "1min", "3min", "5min", "15min",
"30min", "1hour", "2hour", "4hour", "6hour", "8hour", "12hour", "1day", "1week", "1month". Default is "15min".}

\item{from}{A POSIXct object specifying the start time for data retrieval. Defaults to 24 hours before the current time.}

\item{to}{A POSIXct object specifying the end time for data retrieval. Defaults to the current time.}

\item{concurrent}{A logical value indicating whether to execute segment requests concurrently. Default is TRUE.
**Caution:** Concurrent requests may trigger rate limiting.}

\item{delay_ms}{A numeric value representing the delay (in milliseconds) to insert before each request. This helps to control the request rate.}

\item{retries}{An integer specifying the number of retry attempts for each segment request. Default is 3.}
}
\value{
A promise that resolves to a `data.table` containing the aggregated historical klines data. The table includes:
        \describe{
          \item{timestamp}{Numeric, the raw timestamp in seconds.}
          \item{open}{Numeric, the opening price.}
          \item{close}{Numeric, the closing price.}
          \item{high}{Numeric, the highest price in the interval.}
          \item{low}{Numeric, the lowest price in the interval.}
          \item{volume}{Numeric, the trading volume.}
          \item{turnover}{Numeric, the trading turnover.}
          \item{datetime}{POSIXct, the timestamp converted to a datetime object.}
        }
}
\description{
This asynchronous function retrieves historical candlestick (klines) data for a single trading pair from the KuCoin API.
To overcome the API limitation of returning a maximum of 1500 candles per request, the function automatically splits the
requested time range into segments (each covering at most 1500 candles), fetches each segment (either concurrently or sequentially),
and aggregates the results.
}
\details{
**Workflow Overview:**

1. **Input Validation and Time Conversion:**  
   Converts the input `from` and `to` parameters to POSIXct objects and checks that `from` is earlier than `to`.

2. **Frequency Conversion:**  
   Converts the frequency string (e.g., "15min") to its corresponding duration in seconds using `frequency_to_seconds()`.

3. **Time Range Segmentation:**  
   Splits the overall time range into segments via `split_time_range_by_candles()`, ensuring that each segment covers no more than 1500 candles.

4. **Segment Data Retrieval:**  
   For each segment, creates a promise by calling `fetch_klines_segment()` to retrieve the corresponding data.

5. **Concurrent vs. Sequential Execution:**  
   - When `concurrent = TRUE` (default), all segment requests are executed concurrently using `promises::promise_all()`.
   - When `concurrent = FALSE`, the segment requests are executed sequentially.

6. **Aggregation:**  
   Once all segment requests complete, the resulting data.tables are combined using `data.table::rbindlist()` and sorted by `datetime`.

**API Documentation:**  
[KuCoin Get Klines](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-klines)


This function is designed to fetch large ranges of historical market data by segmenting the request to comply with the KuCoin API limit of 1500 candles per request.
The user has the option to execute the segmented requests concurrently for speed or sequentially for increased safety against rate limiting.
Adjust the `delay_ms` parameter to insert a pause between requests if necessary.

**Caution:**  
Using concurrent requests can lead to hitting API rate limits. Users should consider setting `concurrent = FALSE` or increasing `delay_ms` if they encounter rate limit errors.
}
\examples{
\dontrun{
  # Retrieve 15min candles for BTC-USDT for the last 24 hours concurrently:
  dt <- await(get_klines_impl(symbol = "BTC-USDT", freq = "15min"))
  print(dt)

  # Retrieve the same data sequentially with a 200ms delay between requests:
  dt_seq <- await(get_klines_impl(symbol = "BTC-USDT", freq = "15min", concurrent = FALSE, delay_ms = 200))
  print(dt_seq)
}

}
