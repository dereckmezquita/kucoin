% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_account_and_funding.R
\name{get_spot_account_dt_impl}
\alias{get_spot_account_dt_impl}
\title{Get Spot Account List Implementation}
\usage{
get_spot_account_dt_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  query = list(),
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{A list containing API configuration parameters, as returned by \code{get_api_keys()}. The list must include:
\itemize{
\item \code{api_key}: Your KuCoin API key.
\item \code{api_secret}: Your KuCoin API secret.
\item \code{api_passphrase}: Your KuCoin API passphrase.
\item \code{key_version}: The version of the API key (e.g., "2").
}}

\item{base_url}{A character string representing the base URL for the API. If not provided, the function uses \code{get_base_url()} to determine the base URL.}

\item{query}{A named list of query parameters to filter the account list. Supported parameters include:
\itemize{
\item \code{currency} (string, optional): e.g., "USDT".
\item \code{type} (string, optional): Allowed values include "main" or "trade".
}}
}
\value{
A promise that resolves to a \code{data.table} containing the list of spot accounts.
The resulting data table is constructed from the \code{"data"} field of the raw API response, where each row represents an account with the following columns:
\itemize{
\item \strong{id} (string): Account ID.
\item \strong{currency} (string): Currency code.
\item \strong{type} (string): Account type (e.g., "main", "trade", or "balance").
\item \strong{balance} (numeric): Total funds in the account.
\item \strong{available} (numeric): Funds available for withdrawal or trading.
\item \strong{holds} (numeric): Funds on hold.
}
}
\description{
This asynchronous function retrieves a list of spot accounts from the KuCoin API.
It sends a \code{GET} request to the \verb{/api/v1/accounts} endpoint with optional query parameters and returns the
account list as a \code{data.table}. This function is intended for internal use within an R6 class and is \strong{not}
meant for direct end-user consumption.
}
\details{
\enumerate{
\item \strong{URL Construction:} Constructs the full API URL by calling \code{get_base_url()} (or using the user-supplied \code{base_url})
and appending the endpoint and query string.
\item \strong{Header Preparation:} Builds the authentication headers based on the HTTP method, full endpoint, and request body.
\item \strong{API Request:} Sends a \code{GET} request to the endpoint.
\item \strong{Response Processing:} Processes the API response using a helper function and converts the \code{"data"} field to a \code{data.table}.
}

\strong{Endpoint:} \code{GET https://api.kucoin.com/api/v1/accounts}

\strong{Raw Response Schema:}
\itemize{
\item \code{code} (string): Status code, where "200000" indicates success.
\item \code{data} (array): An array of account objects as described above.
}

The response JSON data looks like this:
\preformatted{{
{
    "code": "200000",
    "data": [
        {
            "id": "548674591753",
            "currency": "USDT",
            "type": "trade",
            "balance": "26.66759503",
            "available": "26.66759503",
            "holds": "0"
        },
        {
            "id": "63355cd156298d0001b66e61",
            "currency": "USDT",
            "type": "main",
            "balance": "0.01",
            "available": "0.01",
            "holds": "0"
        }
    ]
}
}}

For more detailed information, please refer to the \href{https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-list-spot}{KuCoin API Documentation}.
}
\examples{
\dontrun{
  # Retrieve API keys from the environment using get_api_keys()
  keys <- get_api_keys()

  # Optionally, specify a base URL; if not provided, defaults to the value from get_base_url()
  base_url <- "https://api.kucoin.com"

  # Define query parameters to filter the account list (e.g., for USDT and main account)
  query <- list(currency = "USDT", type = "main")

  # Execute the asynchronous request using coro::run:
  main_async <- coro::async(function() {
    dt <- await(get_spot_account_dt_impl(keys, base_url, query))
    print(dt)
  })

  main_async()
  while (!later::loop_empty()) {
    later::run_now()
  }
}

}
