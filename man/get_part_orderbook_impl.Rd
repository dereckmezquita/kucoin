% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_market_data.R
\name{get_part_orderbook_impl}
\alias{get_part_orderbook_impl}
\title{Get Part OrderBook (Implementation)}
\usage{
get_part_orderbook_impl(
  base_url = get_base_url(),
  symbol,
  size,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{base_url}{A character string representing the base URL for the KuCoin API.
Defaults to the value returned by \code{get_base_url()}.}

\item{symbol}{A character string representing the trading symbol (e.g., "BTC-USDT").}

\item{size}{An integer specifying the orderbook depth to retrieve. Allowed values are 20 or 100.}
}
\value{
A promise that resolves to a \code{data.table} containing the partial orderbook details. Each row contains:
\describe{
\item{timestamp}{(POSIXct) The global snapshot timestamp converted to a datetime (UTC).}
\item{time_ms}{(integer) The global snapshot timestamp in milliseconds.}
\item{sequence}{(string) The sequence number for the orderbook update.}
\item{side}{(string) The order side ("bid" or "ask").}
\item{price}{(string) The aggregated price at that level.}
\item{size}{(string) The aggregated size at that price level.}
}
}
\description{
This asynchronous function retrieves partial orderbook depth data for a specified trading symbol from the KuCoin API.
The endpoint returns aggregated orderbook data at a specified depth (either 20 or 100 levels) along with a global
snapshot timestamp and sequence number. The function processes the response and returns a single flattened
\code{data.table} where each row represents a price level (from either the bids or the asks), with the global snapshot
fields appended.
}
\details{
\strong{Workflow Overview:}
\enumerate{
\item \strong{Input Validation:}
Converts the \code{size} parameter to an integer and validates that it is either 20 or 100.
\item \strong{URL Construction:}
Uses \code{build_query()} to construct a query string with the required \code{symbol} parameter. The full URL is
built by concatenating the base URL, the endpoint path (which includes the depth parameter), and the query string.
\item \strong{HTTP Request:}
Sends a GET request to the constructed URL using \code{httr::GET()} with a 10â€‘second timeout.
\item \strong{Response Processing:}
Processes the response with \code{process_kucoin_response()} to validate the HTTP status and extract the \code{data} field.
\item \strong{Data Conversion:}
\itemize{
\item Extracts global snapshot fields (\code{time} and \code{sequence}) from the response.
\item Converts the bids and asks matrices into separate \code{data.table} objects, each with an added \code{side} column
("bid" for bids, "ask" for asks).
}
\item \strong{Data Assembly:}
Combines the bids and asks tables into a single \code{data.table}, appends the global snapshot fields, and reorders
the columns so that the global fields appear first.
}

\strong{API Documentation:}
\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-part-orderbook}{KuCoin Get Part OrderBook}

\strong{Endpoint:} \code{GET https://api.kucoin.com/api/v1/market/orderbook/level2_{size}?symbol=<symbol>}

This function uses a public endpoint and does not require authentication.
}
\examples{
\dontrun{
  # Retrieve the top 20 levels of the orderbook for BTC-USDT:
  dt_orderbook <- await(get_part_orderbook_impl(symbol = "BTC-USDT", size = 20))
  print(dt_orderbook)

  # Retrieve the top 100 levels of the orderbook for BTC-USDT:
  dt_orderbook_100 <- await(get_part_orderbook_impl(symbol = "BTC-USDT", size = 100))
  print(dt_orderbook_100)
}

}
