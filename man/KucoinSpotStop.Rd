% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KucoinSpotStop.R
\name{KucoinSpotStop}
\alias{KucoinSpotStop}
\title{KucoinSpotStop Class for KuCoin Spot Trading Stop Orders}
\value{
Not applicable (class definition; see individual methods for return values).
}
\description{
The \code{KucoinSpotStop} class provides an asynchronous interface for managing stop orders on KuCoin's Spot trading platform.
It leverages the \code{coro} package for non-blocking HTTP requests, returning promises that resolve to \code{data.table} objects.
This class supports placing stop orders (limit or market), canceling them by various identifiers, retrieving individual order details,
listing untriggered stop orders, and batch canceling orders.
}
\details{
\subsection{What is a Stop Order?}{

A stop order is a conditional order that triggers a market or limit order when the market price reaches a specified \code{stopPrice}. Key uses include:
\itemize{
\item \strong{Loss Limiting}: Sell an asset if its price drops to a threshold (e.g., sell BTC at $48,000 if it falls from $50,000).
\item \strong{Breakout Trading}: Buy an asset if its price rises past a resistance level (e.g., buy BTC at $52,000 if it breaks $51,000).
\item \strong{Risk Management}: Automate exits or entries without constant monitoring.
KuCoin supports two types: \strong{limit stop orders} (specifying a price and size) and \strong{market stop orders} (executing at market price with size or funds).
}
}

\subsection{Workflow Overview}{

Not applicable (class definition overview).
}

\subsection{API Endpoint}{

Not applicable (class-level documentation; see individual methods for specific endpoints).
}

\subsection{Usage}{

Utilised by traders to programmatically manage stop orders on KuCoin Spot markets. The class is initialized with API credentials,
automatically loaded via \code{get_api_keys()} if not provided, and a base URL from \code{get_base_url()}. For detailed endpoint
information, parameters, and response schemas, refer to the official \href{https://www.kucoin.com/docs-new}{KuCoin API Documentation}.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/introduction}{KuCoin API Documentation - Spot Trading Orders}
}
}
\section{Methods}{

\itemize{
\item \strong{initialize(keys, base_url):} Initialises the object with API credentials and the base URL.
\item \strong{add_stop_order(type, symbol, side, stopPrice, ...):} Places a new stop order (limit or market).
\item \strong{cancel_stop_order_by_order_id(orderId):} Cancels a stop order by its system-generated \code{orderId}.
\item \strong{cancel_stop_order_by_client_oid(clientOid, symbol):} Cancels a stop order by its client-assigned \code{clientOid}.
\item \strong{cancel_stop_order_batch(query):} Batch cancels stop orders with optional filters.
\item \strong{get_stop_order_by_order_id(orderId):} Retrieves detailed stop order info by \code{orderId}.
\item \strong{get_stop_order_by_client_oid(clientOid, symbol):} Retrieves detailed stop order info by \code{clientOid}.
\item \strong{get_stop_order_list(query):} Retrieves a paginated list of untriggered stop orders.
}
}

\examples{
\dontrun{
# Comprehensive example demonstrating key methods
main_async <- coro::async(function() {
  # Initialise the class
  stop <- KucoinSpotStop$new()

  # Place a limit stop order
  order <- await(stop$add_stop_order(
    type = "limit",
    symbol = "BTC-USDT",
    side = "buy",
    stopPrice = "49000",
    price = "50000",
    size = "0.00001",
    clientOid = "stop_test_001",
    remark = "Test Stop"
  ))
  print("New Stop Order:")
  print(order)

  # Retrieve order details by orderId
  details <- await(stop$get_stop_order_by_order_id(order$orderId))
  print("Stop Order Details:")
  print(details)

  # Cancel the order by orderId
  canceled <- await(stop$cancel_stop_order_by_order_id(order$orderId))
  print("Canceled Order IDs:")
  print(canceled)

  # List all stop orders
  order_list <- await(stop$get_stop_order_list(
    query = list(symbol = "BTC-USDT", pageSize = 10)
  ))
  print("Stop Order List:")
  print(order_list)
})
main_async()
while (!later::loop_empty()) later::run_now()
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{keys}}{List containing KuCoin API keys (\code{api_key}, \code{api_secret}, \code{api_passphrase}, \code{key_version}).}

\item{\code{base_url}}{Character string representing the base URL for KuCoin API endpoints.
Initialise a New KucoinSpotStop Object
\subsection{Description}{

Initialises a \code{KucoinSpotStop} object with API credentials and a base URL for managing stop orders on KuCoin Spot markets asynchronously.
If not provided, credentials are sourced from \code{get_api_keys()} and the base URL from \code{get_base_url()}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Credential Assignment}: Sets \code{self$keys} to the provided or default API keys.
\item \strong{URL Assignment}: Sets \code{self$base_url} to the provided or default base URL.
}
}

\subsection{API Endpoint}{

Not applicable (initialisation method).
}

\subsection{Usage}{

Utilised to create an instance of the class with authentication details for stop order management.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/introduction#authentication}{KuCoin API Authentication}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Setup}: Use this method to initialise a dedicated instance for stop order management within your trading bot. Store the instance in a global environment or session to reuse across trading cycles.
\item \strong{Credentials}: Rely on \code{get_api_keys()} to load credentials securely from an environment file or vault, ensuring your bot remains portable and secure across different deployment environments.
}
}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-KucoinSpotStop-new}{\code{KucoinSpotStop$new()}}
\item \href{#method-KucoinSpotStop-add_stop_order}{\code{KucoinSpotStop$add_stop_order()}}
\item \href{#method-KucoinSpotStop-cancel_stop_order_by_order_id}{\code{KucoinSpotStop$cancel_stop_order_by_order_id()}}
\item \href{#method-KucoinSpotStop-cancel_stop_order_by_client_oid}{\code{KucoinSpotStop$cancel_stop_order_by_client_oid()}}
\item \href{#method-KucoinSpotStop-cancel_stop_order_batch}{\code{KucoinSpotStop$cancel_stop_order_batch()}}
\item \href{#method-KucoinSpotStop-get_stop_order_by_order_id}{\code{KucoinSpotStop$get_stop_order_by_order_id()}}
\item \href{#method-KucoinSpotStop-get_stop_order_by_client_oid}{\code{KucoinSpotStop$get_stop_order_by_client_oid()}}
\item \href{#method-KucoinSpotStop-get_stop_order_list}{\code{KucoinSpotStop$get_stop_order_list()}}
\item \href{#method-KucoinSpotStop-clone}{\code{KucoinSpotStop$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-new"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$new(keys = get_api_keys(), base_url = get_base_url())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{List containing API configuration parameters from \code{get_api_keys()}, including:
\itemize{
\item \code{api_key}: Character string; your KuCoin API key.
\item \code{api_secret}: Character string; your KuCoin API secret.
\item \code{api_passphrase}: Character string; your KuCoin API passphrase.
\item \code{key_version}: Character string; API key version (e.g., \code{"2"}).
Defaults to \code{get_api_keys()}.
}}

\item{\code{base_url}}{Character string representing the base URL for the API. Defaults to \code{get_base_url()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the \code{KucoinSpotStop} class.
Add Stop Order
\subsection{Description}{

Places a new stop order (limit or market) on KuCoin Spot trading asynchronously via a POST request to \verb{/api/v1/stop-order}.
Triggers when the market price hits \code{stopPrice}. Calls \code{add_stop_order_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures required parameters and type-specific fields (e.g., \code{price} for limit).
\item \strong{Request Body}: Constructs JSON with order details.
\item \strong{Authentication}: Generates headers asynchronously.
\item \strong{API Call}: Sends POST request with 3-second timeout.
\item \strong{Response}: Returns a \code{data.table} with \code{orderId} and \code{clientOid}.
}
}

\subsection{API Endpoint}{

\verb{POST https://api.kucoin.com/api/v1/stop-order}
}

\subsection{Usage}{

Utilised to set conditional orders for risk management or breakout trading.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/add-stop-order}{KuCoin Add Stop Order}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Risk Control}: Use limit stop orders to exit positions at predefined loss levels (e.g., sell BTC at $48,000 if it drops below $49,000). Pair with market data feeds to set \code{stopPrice} dynamically based on volatility or support levels.
\item \strong{Breakout Strategy}: Place market stop orders to enter positions on price breakouts (e.g., buy ETH at $3,000 if it exceeds $2,950). Combine with technical indicators like moving averages or Bollinger Bands to determine \code{stopPrice}.
\item \strong{Position Sizing}: For market orders, use \code{funds} to control exact capital allocation dynamically (e.g., allocate $100 to buy BTC when triggered), adjusting based on account balance or risk percentage.
\item \strong{Tracking}: Assign unique \code{clientOid} values (e.g., UUIDs with strategy tags) to trace orders back to specific trading rules or sessions in your system logs.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-add_stop_order"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-add_stop_order}{}}}
\subsection{Method \code{add_stop_order()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$add_stop_order(
  type,
  symbol,
  side,
  stopPrice,
  clientOid = NULL,
  price = NULL,
  size = NULL,
  funds = NULL,
  stp = NULL,
  remark = NULL,
  timeInForce = NULL,
  cancelAfter = NULL,
  postOnly = NULL,
  hidden = NULL,
  iceberg = NULL,
  visibleSize = NULL,
  tradeType = "TRADE"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Character string; "limit" or "market". Required.}

\item{\code{symbol}}{Character string; trading pair (e.g., "BTC-USDT"). Required.}

\item{\code{side}}{Character string; "buy" or "sell". Required.}

\item{\code{stopPrice}}{Character string; trigger price (e.g., "49000"). Required.}

\item{\code{clientOid}}{Character string; unique client ID (max 40 chars). Optional.}

\item{\code{price}}{Character string; limit order price (e.g., "50000"). Required for limit orders.}

\item{\code{size}}{Character string; order quantity (e.g., "0.00001"). Required for limit, optional for market.}

\item{\code{funds}}{Character string; funds for market orders (e.g., "1"). Optional for market.}

\item{\code{stp}}{Character string; self-trade prevention: "DC", "CO", "CN", "CB". Optional.}

\item{\code{remark}}{Character string; remarks (max 20 chars). Optional.}

\item{\code{timeInForce}}{Character string; "GTC", "GTT", "IOC", "FOK". Optional.}

\item{\code{cancelAfter}}{Integer; seconds until cancellation for GTT. Optional.}

\item{\code{postOnly}}{Logical; post-only flag. Optional.}

\item{\code{hidden}}{Logical; hidden order flag. Optional.}

\item{\code{iceberg}}{Logical; iceberg order flag. Optional.}

\item{\code{visibleSize}}{Character string; visible size for iceberg orders. Optional.}

\item{\code{tradeType}}{Character string; "TRADE" (default). Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{orderId} (character): System-generated order ID.
\item \code{clientOid} (character): Client-assigned order ID.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "orderId": "670fd33bf9406e0007ab3945",
    "clientOid": "5c52e11203aa677f33e493fb"
  \}
\}
}\if{html}{\out{</div>}}

Cancel Stop Order By OrderId
}

\subsection{Description}{

Cancels a stop order by its system-generated \code{orderId} asynchronously via a DELETE request to \verb{/api/v1/stop-order/\{orderId\}}.
Calls \code{cancel_stop_order_by_order_id_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures \code{orderId} is valid.
\item \strong{URL}: Constructs endpoint with \code{orderId}.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends DELETE request.
\item \strong{Response}: Returns canceled order IDs.
}
}

\subsection{API Endpoint}{

\verb{DELETE https://api.kucoin.com/api/v1/stop-order/\{orderId\}}
}

\subsection{Usage}{

Utilised to remove a stop order by its system ID, e.g., when adjusting strategies.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/cancel-stop-order-by-orderld}{KuCoin Cancel Stop Order By OrderId}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Dynamic Adjustment}: Cancel stop orders when market conditions invalidate your initial setup (e.g., cancel a $48,000 BTC sell stop if a bullish signal emerges). Use with real-time price feeds to trigger cancellation.
\item \strong{Order Cleanup}: Periodically cancel stale stop orders (e.g., older than 24 hours) by tracking \code{orderId} and \code{createdAt} from \code{get_stop_order_by_order_id}, maintaining the 20-order limit per pair.
\item \strong{Confirmation}: After cancellation, verify status via \code{get_stop_order_by_order_id} or WebSocket to ensure the order is removed before placing new ones.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-cancel_stop_order_by_order_id"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-cancel_stop_order_by_order_id}{}}}
\subsection{Method \code{cancel_stop_order_by_order_id()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$cancel_stop_order_by_order_id(orderId)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{orderId}}{Character string; system-generated order ID (e.g., "671124f9365ccb00073debd4"). Required.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{cancelledOrderIds} (character): ID of the canceled order.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "cancelledOrderIds": ["671124f9365ccb00073debd4"]
  \}
\}
}\if{html}{\out{</div>}}

Cancel Stop Order By ClientOid
}

\subsection{Description}{

Cancels a stop order by its client-assigned \code{clientOid} asynchronously via a DELETE request to \verb{/api/v1/stop-order/cancelOrderByClientOid}.
Calls \code{cancel_stop_order_by_client_oid_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures \code{clientOid} is valid, \code{symbol} optional.
\item \strong{URL}: Constructs endpoint with query parameters.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends DELETE request.
\item \strong{Response}: Returns canceled order details.
}
}

\subsection{API Endpoint}{

\verb{DELETE https://api.kucoin.com/api/v1/stop-order/cancelOrderByClientOid}
}

\subsection{Usage}{

Utilised to cancel a stop order using a custom client ID, ideal for local tracking.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/cancel-stop-order-by-clientoid}{KuCoin Cancel Stop Order By ClientOid}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Custom Management}: Use \code{clientOid} to cancel specific orders tracked in your system (e.g., tagged by strategy ID). This avoids needing to map system \code{orderId} values.
\item \strong{Symbol Filtering}: Include \code{symbol} to ensure cancellation targets the correct trading pair in multi-pair strategies, reducing errors in high-frequency bots.
\item \strong{Event-Driven}: Trigger cancellation based on external signals (e.g., news events or volatility spikes) by referencing \code{clientOid} stored in your order database.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-cancel_stop_order_by_client_oid"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-cancel_stop_order_by_client_oid}{}}}
\subsection{Method \code{cancel_stop_order_by_client_oid()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$cancel_stop_order_by_client_oid(clientOid, symbol = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{clientOid}}{Character string; client-assigned order ID (e.g., "689ff597f4414061aa819cc414836abd"). Required.}

\item{\code{symbol}}{Character string; trading pair (e.g., "BTC-USDT"). Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{cancelledOrderId} (character): System-assigned ID of the canceled order.
\item \code{clientOid} (character): Client-assigned order ID.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "cancelledOrderId": "vs8hoo8ksc8mario0035a74n",
    "clientOid": "689ff597f4414061aa819cc414836abd"
  \}
\}
}\if{html}{\out{</div>}}

Batch Cancel Stop Orders
}

\subsection{Description}{

Cancels multiple stop orders asynchronously via a DELETE request to \verb{/api/v1/stop-order/cancel}.
Calls \code{cancel_stop_order_batch_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Checks \code{query} parameters.
\item \strong{URL}: Builds endpoint with query string.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends DELETE request.
\item \strong{Response}: Returns all canceled order IDs.
}
}

\subsection{API Endpoint}{

\verb{DELETE https://api.kucoin.com/api/v1/stop-order/cancel}
}

\subsection{Usage}{

Utilised to remove multiple stop orders, optionally filtered by \code{symbol}, \code{tradeType}, or \code{orderIds}.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/batch-cancel-stop-orders}{KuCoin Batch Cancel Stop Orders}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Portfolio Reset}: Cancel all stop orders for a \code{symbol} (e.g., "BTC-USDT") when exiting a market or during a strategy overhaul. Use with \code{symbol} filter to target specific pairs.
\item \strong{Bulk Cleanup}: Periodically clear outdated orders by supplying a list of \code{orderIds} from your tracking system, ensuring compliance with the 20-order limit per pair.
\item \strong{Volatility Response}: Batch cancel during sudden market moves (e.g., flash crashes) to prevent unwanted triggers, using real-time volatility indicators to initiate the call.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-cancel_stop_order_batch"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-cancel_stop_order_batch}{}}}
\subsection{Method \code{cancel_stop_order_batch()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$cancel_stop_order_batch(query = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{Named list; optional filters (e.g., \code{list(symbol = "ETH-BTC", orderIds = "id1,id2")}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{cancelledOrderIds} (list): List of canceled order IDs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "cancelledOrderIds": ["671124f9365ccb00073debd4"]
  \}
\}
}\if{html}{\out{</div>}}

Get Stop Order By OrderId
}

\subsection{Description}{

Retrieves detailed stop order info by \code{orderId} asynchronously via a GET request to \verb{/api/v1/stop-order/\{orderId\}}.
Calls \code{get_stop_order_by_order_id_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures \code{orderId} is valid.
\item \strong{URL}: Constructs endpoint with \code{orderId}.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends GET request.
\item \strong{Response}: Returns detailed order info with datetime columns.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/stop-order/\{orderId\}}
}

\subsection{Usage}{

Utilised to inspect a stop order’s full details, including status and parameters.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/get-stop-order-by-orderld}{KuCoin Get Stop Order By OrderId}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Status Monitoring}: Check \code{status} (e.g., "NEW" or "TRIGGERED") to confirm order state before acting (e.g., placing replacements). Use in a polling loop or post-event check.
\item \strong{Audit Trail}: Log detailed order info (\code{price}, \code{stopPrice}, \code{createdAtDatetime}) to analyze strategy performance or debug execution issues.
\item \strong{Conditional Logic}: Adjust strategies if \code{stopTriggerTime} indicates recent activation, triggering follow-up orders or alerts in your system.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-get_stop_order_by_order_id"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-get_stop_order_by_order_id}{}}}
\subsection{Method \code{get_stop_order_by_order_id()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$get_stop_order_by_order_id(orderId)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{orderId}}{Character string; system-generated order ID (e.g., "vs8hoo8q2ceshiue003b67c0"). Required.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with columns including:
\itemize{
\item \code{id} (character)
\item \code{symbol} (character)
\item \code{status} (character)
\item \code{type} (character)
\item \code{side} (character)
\item \code{price} (character)
\item \code{size} (character)
\item \code{stopPrice} (character)
\item \code{createdAtDatetime} (POSIXct)
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "id": "vs8hoo8q2ceshiue003b67c0",
    "symbol": "KCS-USDT",
    "status": "NEW",
    "type": "limit",
    "side": "buy",
    "price": "0.01",
    "size": "0.01",
    "stopPrice": "10",
    "createdAt": 1629098781128
  \}
\}
}\if{html}{\out{</div>}}

Get Stop Order By ClientOid
}

\subsection{Description}{

Retrieves detailed stop order info by \code{clientOid} asynchronously via a GET request to \verb{/api/v1/stop-order/queryOrderByClientOid}.
Calls \code{get_stop_order_by_client_oid_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures \code{clientOid} is valid, \code{symbol} optional.
\item \strong{URL}: Constructs endpoint with query parameters.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends GET request.
\item \strong{Response}: Returns detailed order info with datetime columns.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/stop-order/queryOrderByClientOid}
}

\subsection{Usage}{

Utilised to fetch order details using a custom client ID, ideal for tracking.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/get-stop-order-by-clientoid}{KuCoin Get Stop Order By ClientOid}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Order Sync}: Verify order details against your system’s records using \code{clientOid}, ensuring alignment post-placement or after network disruptions.
\item \strong{Multi-Pair}: Use \code{symbol} to disambiguate orders in multi-pair strategies, fetching precise details for targeted actions (e.g., canceling or adjusting).
\item \strong{Event Handling}: Check \code{status} and \code{stopTriggerTime} to react to order triggers, updating position trackers or risk calculators in real time.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-get_stop_order_by_client_oid"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-get_stop_order_by_client_oid}{}}}
\subsection{Method \code{get_stop_order_by_client_oid()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$get_stop_order_by_client_oid(clientOid, symbol = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{clientOid}}{Character string; client-assigned order ID (e.g., "2b700942b5db41cebe578cff48960e09"). Required.}

\item{\code{symbol}}{Character string; trading pair (e.g., "KCS-USDT"). Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with columns including:
\itemize{
\item \code{id} (character)
\item \code{symbol} (character)
\item \code{status} (character)
\item \code{type} (character)
\item \code{side} (character)
\item \code{price} (character)
\item \code{size} (character)
\item \code{stopPrice} (character)
\item \code{createdAtDatetime} (POSIXct)
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": [\{
    "id": "vs8hoo8os561f5np0032vngj",
    "symbol": "KCS-USDT",
    "status": "NEW",
    "type": "limit",
    "side": "buy",
    "price": "0.01",
    "size": "0.01",
    "stopPrice": "1",
    "clientOid": "2b700942b5db41cebe578cff48960e09",
    "createdAt": 1629020492837
  \}]
\}
}\if{html}{\out{</div>}}

Get Stop Order List
}

\subsection{Description}{

Retrieves a paginated list of untriggered stop orders asynchronously via a GET request to \verb{/api/v1/stop-order}.
Calls \code{get_stop_order_list_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Checks \code{query} parameters.
\item \strong{URL}: Builds endpoint with query string.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends GET request.
\item \strong{Response}: Returns a list of stop orders with datetime columns.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/stop-order}
}

\subsection{Usage}{

Utilised to review all untriggered stop orders, with optional filtering.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/get-stop-orders-list}{KuCoin Get Stop Orders List}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Portfolio Oversight}: Regularly fetch the list (e.g., hourly) to monitor active stop orders, ensuring they align with current market conditions and strategy goals.
\item \strong{Limit Management}: Use \code{pageSize} and filter by \code{symbol} to track order counts per pair, canceling excess orders via \code{cancel_stop_order_batch} to stay under the 20-order cap.
\item \strong{Time-Based Actions}: Filter by \code{startAt} and \code{endAt} to identify orders nearing trigger points or overdue for review, automating adjustments or cancellations.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-get_stop_order_list"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-get_stop_order_list}{}}}
\subsection{Method \code{get_stop_order_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$get_stop_order_list(query = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{Named list; optional filters (e.g., \code{list(symbol = "BTC-USDT", pageSize = 10)}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with columns including:
\itemize{
\item \code{id} (character)
\item \code{symbol} (character)
\item \code{status} (character)
\item \code{type} (character)
\item \code{side} (character)
\item \code{price} (character)
\item \code{size} (character)
\item \code{stopPrice} (character)
\item \code{createdAtDatetime} (POSIXct)
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "currentPage": 1,
    "pageSize": 50,
    "totalNum": 1,
    "totalPage": 1,
    "items": [\{
      "id": "vs8hoo8kqjnklv4m0038lrfq",
      "symbol": "KCS-USDT",
      "status": "NEW",
      "type": "limit",
      "side": "buy",
      "price": "0.01",
      "size": "0.01",
      "stopPrice": "10",
      "createdAt": 1628755183704
    \}]
  \}
\}
}\if{html}{\out{</div>}}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotStop-clone"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotStop-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotStop$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
