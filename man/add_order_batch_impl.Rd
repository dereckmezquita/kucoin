% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_add_order.R
\name{add_order_batch_impl}
\alias{add_order_batch_impl}
\title{Add Orders Batch (Implementation)}
\usage{
add_order_batch_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  order_list,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}, including:
\itemize{
\item \code{api_key} (character): KuCoin API key.
\item \code{api_secret} (character): KuCoin API secret.
\item \code{api_passphrase} (character): KuCoin API passphrase.
\item \code{key_version} (character): API key version (e.g., "2"). Defaults to \code{get_api_keys()}.
}}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{order_list}{List; a list of orders, where each order is a list with parameters:
\itemize{
\item \code{symbol} (character): Trading pair (e.g., "BTC-USDT"). Required.
\item \code{type} (character): Order type: "limit" or "market". Required.
\item \code{side} (character): Order side: "buy" or "sell". Required.
\item \code{clientOid} (character): Unique client order ID (max 40 chars). Optional.
\item \code{price} (character): Price for limit orders. Required for limit.
\item \code{size} (character): Quantity for limit or market orders. Required for limit, optional for market.
\item \code{funds} (character): Funds for market orders. Optional for market, mutually exclusive with \code{size}.
\item \code{stp} (character): Self-trade prevention: "CN", "CO", "CB", or "DC". Optional.
\item \code{tags} (character): Order tag (max 20 ASCII chars). Optional.
\item \code{remark} (character): Order remarks (max 20 ASCII chars). Optional.
\item \code{timeInForce} (character): Time-in-force: "GTC", "GTT", "IOC", or "FOK". Optional, defaults to "GTC".
\item \code{cancelAfter} (integer): Cancel after n seconds (for GTT). Optional.
\item \code{postOnly} (logical): Passive order flag. Optional, defaults to FALSE.
\item \code{hidden} (logical): Hide order from order book. Optional, defaults to FALSE.
\item \code{iceberg} (logical): Iceberg order flag. Optional, defaults to FALSE.
\item \code{visibleSize} (character): Visible quantity for iceberg orders. Optional.
}}
}
\value{
Promise resolving to a \code{data.table} containing results for each order, with columns:
\itemize{
\item \code{success} (logical): Whether the order placement was successful.
\item \code{orderId} (character): Unique order ID (if successful).
\item \code{clientOid} (character): Client-specified order ID (if provided).
\item \code{failMsg} (character): Error message (if failed).
}
}
\description{
Places multiple new orders (up to 20) to the KuCoin Spot trading system asynchronously.
This function validates a list of orders, constructs a batch request, and returns the placement results for each order.
}
\details{
\subsection{Workflow Overview}{
\enumerate{
\item \strong{Parameter Validation}: Ensures the \code{order_list} contains 1â€“20 valid orders, each validated via \code{validate_order()}.
\item \strong{Request Body Construction}: Builds a JSON body with the \code{orderList} key containing validated orders.
\item \strong{Authentication}: Generates headers with API credentials using \code{build_headers()}.
\item \strong{API Request}: Sends a POST request to the KuCoin API with a 3-second timeout.
\item \strong{Response Processing}: Parses the response and returns results as a \code{data.table}.
}
}

\subsection{API Endpoint}{

\verb{POST https://api.kucoin.com/api/v1/hf/orders/multi}
}

\subsection{Usage}{

Used to place multiple spot trading orders on KuCoin in a single request. Each order can be a limit or market order,
with appropriate parameters. Requires sufficient funds and adheres to KuCoin's limits (e.g., max 20 orders per request,
2000 active orders per account).
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/batch-add-orders}{KuCoin Batch Add Orders}
}
}
\examples{
\dontrun{
main_async <- coro::async(function() {
  # Define two orders
  order1 <- list(
    clientOid = uuid::UUIDgenerate(),
    symbol = "BTC-USDT",
    type = "limit",
    side = "buy",
    price = "30000",
    size = "0.00001",
    remark = "Batch buy"
  )
  order2 <- list(
    clientOid = uuid::UUIDgenerate(),
    symbol = "ETH-USDT",
    type = "market",
    side = "sell",
    size = "0.01"
  )
  # Place batch orders
  result <- await(add_order_batch_impl(order_list = list(order1, order2)))
  print(result)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
