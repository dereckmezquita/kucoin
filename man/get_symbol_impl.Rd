% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_market_data.R
\name{get_symbol_impl}
\alias{get_symbol_impl}
\title{Get Symbol (Implementation)}
\usage{
get_symbol_impl(
  base_url = get_base_url(),
  symbol,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{symbol}{Character string; trading symbol (e.g., \code{"BTC-USDT"}).}
}
\value{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{symbol} (character): Unique trading symbol code.
\item \code{name} (character): Name of the trading pair.
\item \code{baseCurrency} (character): Base currency.
\item \code{quoteCurrency} (character): Quote currency.
\item \code{feeCurrency} (character): Currency for fees.
\item \code{market} (character): Trading market (e.g., \code{"USDS"}).
\item \code{baseMinSize} (character): Minimum order quantity.
\item \code{quoteMinSize} (character): Minimum order funds.
\item \code{baseMaxSize} (character): Maximum order size.
\item \code{quoteMaxSize} (character): Maximum order funds.
\item \code{baseIncrement} (character): Quantity increment.
\item \code{quoteIncrement} (character): Quote increment.
\item \code{priceIncrement} (character): Price increment.
\item \code{priceLimitRate} (character): Price protection threshold.
\item \code{minFunds} (character): Minimum trading amount.
\item \code{isMarginEnabled} (logical): Margin trading status.
\item \code{enableTrading} (logical): Trading enabled status.
\item \code{feeCategory} (integer): Fee category.
\item \code{makerFeeCoefficient} (character): Maker fee coefficient.
\item \code{takerFeeCoefficient} (character): Taker fee coefficient.
\item \code{st} (logical): Special treatment flag.
\item \code{callauctionIsEnabled} (logical): Call auction enabled status.
\item \code{callauctionPriceFloor} (character): Call auction price floor.
\item \code{callauctionPriceCeiling} (character): Call auction price ceiling.
\item \code{callauctionFirstStageStartTime} (integer): First stage start time.
\item \code{callauctionSecondStageStartTime} (integer): Second stage start time.
\item \code{callauctionThirdStageStartTime} (integer): Third stage start time.
\item \code{tradingStartTime} (integer): Trading start time.
}
}
\description{
Retrieves detailed information about a specified trading symbol from the KuCoin API asynchronously.
}
\details{
\subsection{Workflow Overview}{
\enumerate{
\item \strong{URL Assembly}: Combines \code{base_url}, \verb{/api/v2/symbols/}, and the \code{symbol}.
\item \strong{HTTP Request}: Sends a GET request with a 10-second timeout via \code{httr::GET()}.
\item \strong{Response Processing}: Validates the response with \code{process_kucoin_response()} and extracts the \code{"data"} field.
\item \strong{Data Conversion}: Converts \code{"data"} into a \code{data.table} without filtering.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v2/symbols/\{symbol\}}
}

\subsection{Usage}{

Utilised to fetch metadata for a specific trading symbol, such as price increments and trading limits.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-symbols}{KuCoin Get Symbol}
}
}
\examples{
\dontrun{
main_async <- coro::async(function() {
  symbol_data <- await(get_symbol_impl(symbol = "BTC-USDT"))
  print(symbol_data)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
