% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_oco.R
\name{cancel_oco_orders_batch_impl}
\alias{cancel_oco_orders_batch_impl}
\title{Batch Cancel OCO Orders (Implementation)}
\usage{
cancel_oco_orders_batch_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  query = list(),
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{query}{Named list; optional query parameters for filtering (e.g., \code{list(orderIds = "674c388172cf2800072ee746,674c38bdfd8300000795167e", symbol = "BTC-USDT")}).}
}
\value{
Promise resolving to a \code{data.table} with one row containing:
\itemize{
\item \code{cancelledOrderIds} (list): A list of character strings representing the IDs of the canceled limit and stop-limit orders associated with the OCO orders.
}
}
\description{
Cancels a batch of OCO (One-Cancels-the-Other) orders on the KuCoin Spot trading system asynchronously by sending a DELETE request to the \verb{/api/v3/oco/orders} endpoint.
Returns a \code{data.table} with the IDs of the canceled limit and stop-limit orders associated with the OCO orders.
}
\details{
\subsection{What is an OCO Order and Batch Cancellation?}{

An OCO (One-Cancels-the-Other) order pairs a limit order (e.g., to secure profits) with a stop-limit order (e.g., to cap losses), canceling one when the other executes. Batch cancellation of OCO orders is useful for:
\itemize{
\item \strong{Portfolio Cleanup}: Remove all OCO orders for a symbol (e.g., "BTC-USDT") or specific IDs if market conditions no longer favor your strategy.
\item \strong{Risk Adjustment}: Cancel multiple OCOs during unexpected volatility to avoid unintended triggers (e.g., canceling BTC-USDT OCOs during a flash crash).
\item \strong{Strategy Overhaul}: Reset all OCO orders across trading pairs to implement a new trading plan without manual intervention.
For example, if you have OCO orders on BTC-USDT to sell at $55,000 (profit) or $48,000 (stop-loss) but anticipate a breakout, batch canceling them prevents premature execution.
}
}

\subsection{Description}{

This function cancels multiple OCO orders using optional filters (\code{orderIds}, \code{symbol}) via a DELETE request. If no parameters are provided, all OCO orders are canceled by default. The response includes the IDs of the canceled limit and stop-limit orders.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures \code{query} is a named list and validates \code{symbol} and \code{orderIds} if provided.
\item \strong{Request Construction}: Builds the endpoint URL with query parameters (\code{orderIds}, \code{symbol}) using \code{build_query}.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the DELETE method and endpoint.
\item \strong{API Request}: Sends a DELETE request to the KuCoin API with a 3-second timeout via \code{httr::DELETE}.
\item \strong{Response Processing}: Parses the response with \code{process_kucoin_response}, confirms success ("200000"), and converts the \code{cancelledOrderIds} array to a \code{data.table} column as a list.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{DELETE https://api.kucoin.com/api/v3/oco/orders}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: Spot
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 3
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: batchCancelOcoOrders
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/batch-cancel-oco-order}{KuCoin Batch Cancel OCO Order}
}
}

\subsection{Request}{
\subsection{Query Parameters}{
\itemize{
\item \code{orderIds}: String (optional) - Comma-separated list of OCO order IDs (e.g., "674c388172cf2800072ee746,674c38bdfd8300000795167e"). If omitted, all OCO orders are canceled.
\item \code{symbol}: String (optional) - Trading pair symbol (e.g., "BTC-USDT"). If omitted, OCO orders for all symbols are canceled.
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request DELETE 'https://api.kucoin.com/api/v3/oco/orders?orderIds=674c388172cf2800072ee746,674c38bdfd8300000795167e&symbol=BTC-USDT'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Object (required) - Contains:
\itemize{
\item \code{cancelledOrderIds}: Array\link{String} (required) - List of canceled order IDs (typically two per OCO order: limit and stop-limit components).
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "cancelledOrderIds": [
      "vs93gpqc750mkk57003gok6i",
      "vs93gpqc750mkk57003gok6j",
      "vs93gpqc75c39p83003tnriu",
      "vs93gpqc75c39p83003tnriv"
    ]
  \}
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Batch cancel specific OCO orders for BTC-USDT
  canceled_orders <- await(cancel_oco_orders_batch_impl(
    query = list(
      orderIds = "674c388172cf2800072ee746,674c38bdfd8300000795167e",
      symbol = "BTC-USDT"
    )
  ))
  print(canceled_orders)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
