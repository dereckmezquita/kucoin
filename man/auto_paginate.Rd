% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers_api.R
\name{auto_paginate}
\alias{auto_paginate}
\title{Generic Pagination Helper for KuCoin API Endpoints}
\usage{
auto_paginate(
  fetch_page,
  query = list(currentPage = 1, pageSize = 50),
  items_field = "items",
  paginate_fields = list(currentPage = "currentPage", totalPage = "totalPage"),
  aggregate_fn = function(acc) {
     acc
 },
  max_pages = Inf,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{fetch_page}{A function that fetches a page of results and returns a promise resolving to the response.}

\item{query}{A named list of query parameters for the first page (default is \code{list(currentPage = 1, pageSize = 50)}).}

\item{items_field}{The field in the response that contains the items to be aggregated (default is "items").}

\item{paginate_fields}{A named list of fields in the response that contain the current and total page numbers.
\itemize{
\item \code{currentPage}: The field containing the current page number.
\item \code{totalPage}: The field containing the total number of pages.
}}

\item{aggregate_fn}{A function to combine the accumulated results into the final output (default returns the accumulator list as is).}

\item{max_pages}{The maximum number of pages to fetch (default is \code{Inf} to fetch all available pages).}
}
\value{
A promise that resolves to the aggregated result as defined by the \code{aggregate_fn}.
}
\description{
This asynchronous helper function facilitates automatic pagination for KuCoin API endpoints that return paginated
responses. It repeatedly calls a user-supplied function to fetch each page and aggregates the results using an
aggregation function provided by the user.
}
\details{
\subsection{Detailed Workflow:}{
\enumerate{
\item \strong{Fetch a Page:}
The function calls the user-supplied \code{fetch_page} function with the current query parameters.
\item \strong{Accumulate Results:}
The items from the current page (extracted via the \code{items_field} parameter) are added to an accumulator.
\item \strong{Determine Continuation:}
If the current page number is less than the total number of pages (or less than \code{max_pages} if specified),
the function increments the page number and recursively calls itself.
\item \strong{Aggregate and Return:}
Once all pages have been fetched, the accumulator is passed to the \code{aggregate_fn} to produce the final result.
}
}
}
