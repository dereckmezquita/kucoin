% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_account_and_funding.R
\name{get_account_summary_info_impl}
\alias{get_account_summary_info_impl}
\title{Get Account Summary Information (Implementation)}
\usage{
get_account_summary_info_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{A list containing API configuration parameters, as returned by \code{get_api_keys()}. The list must include:
\itemize{
\item \code{api_key}: Your KuCoin API key.
\item \code{api_secret}: Your KuCoin API secret.
\item \code{api_passphrase}: Your KuCoin API passphrase.
\item \code{key_version}: The version of the API key (e.g., "2").
}}

\item{base_url}{A character string representing the base URL for the API. If not provided, the function uses \code{get_base_url()} to determine the base URL.}
}
\value{
A promise that resolves to a \code{data.table} containing the account summary data. The resulting data table is constructed from the raw API response and includes the following columns:
\itemize{
\item \strong{level} (integer): The user's VIP level.
\item \strong{subQuantity} (integer): Total number of sub-accounts.
\item \strong{spotSubQuantity} (integer): Number of sub-accounts with spot trading permissions.
\item \strong{marginSubQuantity} (integer): Number of sub-accounts with margin trading permissions.
\item \strong{futuresSubQuantity} (integer): Number of sub-accounts with futures trading permissions.
\item \strong{optionSubQuantity} (integer): Number of sub-accounts with option trading permissions.
\item \strong{maxSubQuantity} (integer): Maximum allowed sub-accounts (calculated as the sum of
\code{maxDefaultSubQuantity} and \code{maxSpotSubQuantity}).
\item \strong{maxDefaultSubQuantity} (integer): Maximum default open sub-accounts based on VIP level.
\item \strong{maxSpotSubQuantity} (integer): Maximum additional sub-accounts with spot trading permissions.
\item \strong{maxMarginSubQuantity} (integer): Maximum additional sub-accounts with margin trading permissions.
\item \strong{maxFuturesSubQuantity} (integer): Maximum additional sub-accounts with futures trading permissions.
\item \strong{maxOptionSubQuantity} (integer): Maximum additional sub-accounts with option trading permissions.
}
}
\description{
This asynchronous function implements the retrieval of account summary information from the KuCoin API.
It is designed for internal use as a method in an R6 class and is \strong{not} intended for direct consumption by end-users.
The function performs the following operations:
}
\details{
\enumerate{
\item \strong{URL Construction:} Constructs the full API URL by calling \code{get_base_url()} (or using the user-supplied \code{base_url})
and appending the endpoint.
\item \strong{Header Preparation:} Builds the authentication headers based on the HTTP method, endpoint, and request body.
\item \strong{API Request:} Sends a \code{GET} request to the KuCoin API endpoint for account summary information.
\item \strong{Response Processing:} Processes the API response using a helper function and converts the \code{"data"} field to a \code{data.table}.
}

\strong{Endpoint:} \code{GET https://api.kucoin.com/api/v2/user-info}

\strong{Raw Response Schema:}
\itemize{
\item \code{code} (string): Status code, where "200000" indicates success.
\item \code{data} (object): Contains the account summary details as described above.
}

For more detailed information, please see the \href{https://www.kucoin.com/docs-new/rest/account-info/account-funding/get-account-summary-info}{KuCoin API Documentation}.
}
\examples{
\dontrun{
  # Retrieve API keys from the environment using get_api_keys()
  keys <- get_api_keys()

  # Optionally, specify a base URL; if not provided, defaults to the value from get_base_url()
  base_url <- "https://api.kucoin.com"

  # Execute the asynchronous request using coro::run:
  main_async <- coro::async(function() {
    dt <- await(get_account_summary_info_impl(keys, base_url))
    print(dt)
  })

  while(!later::loop_empty()) {
    later::run_now()
  }
}

}
