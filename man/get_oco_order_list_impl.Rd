% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_oco.R
\name{get_oco_order_list_impl}
\alias{get_oco_order_list_impl}
\title{Get OCO Order List (Implementation)}
\usage{
get_oco_order_list_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  query = list(),
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{query}{Named list; optional query parameters for filtering and pagination (e.g., \code{list(symbol = "BTC-USDT", pageSize = 10)}).}
}
\value{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{orderId} (character): Unique order ID generated by the KuCoin system.
\item \code{symbol} (character): Trading pair symbol (e.g., "BTC-USDT").
\item \code{clientOid} (character): Client-assigned order ID.
\item \code{orderTime} (integer): Order placement time in milliseconds.
\item \code{status} (character): Order status ("NEW", "DONE", "TRIGGERED", "CANCELED").
}
}
\description{
Retrieves a paginated list of current OCO orders from the KuCoin Spot trading system asynchronously by sending a GET request to the \verb{/api/v3/oco/orders} endpoint.
}
\details{
\subsection{What is an OCO Order?}{

An OCO order combines a limit order (profit target) with a stop-limit order (loss limit), canceling one when the other executes. Listing all OCO orders is useful for:
\itemize{
\item \strong{Portfolio Oversight}: Review all active OCO strategies across trading pairs to ensure alignment with market conditions.
\item \strong{Bulk Management}: Identify orders to adjust or cancel based on status (e.g., canceling "NEW" orders if a trend reverses).
\item \strong{Historical Insight}: Filter by time to analyze past OCO performance for strategy refinement.
For example, listing OCO orders might show multiple BTC-USDT pairs with varying profit/loss levels, helping you optimize risk across your portfolio.
}
}

\subsection{Description}{

This function fetches a list of OCO orders with optional filters (\code{symbol}, \code{startAt}, etc.), sorted by latest first, and returns them in a \code{data.table}.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures \code{query} is a named list and validates \code{symbol} if provided.
\item \strong{Request Construction}: Constructs the endpoint URL with query parameters from \code{build_query}.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the GET method and endpoint.
\item \strong{API Request}: Sends a GET request to the KuCoin API with a 3-second timeout via \code{httr::GET}.
\item \strong{Response Processing}: Parses the response, confirms success ("200000"), and converts the \code{items} array to a \code{data.table}, returning an empty structured table if no items exist.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{GET https://api.kucoin.com/api/v3/oco/orders}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: General
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 2
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: getOcoOrderList
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/get-oco-order-list}{KuCoin Get OCO Order List}
}
}

\subsection{Request}{
\subsection{Query Parameters}{
\itemize{
\item \code{symbol}: String (optional) - Filter by trading pair symbol (e.g., "BTC-USDT").
\item \code{startAt}: Integer\if{html}{\out{<int64>}} (optional) - Start time in milliseconds.
\item \code{endAt}: Integer\if{html}{\out{<int64>}} (optional) - End time in milliseconds.
\item \code{orderIds}: String (optional) - Comma-separated list of order IDs (up to 500).
\item \code{pageSize}: Integer (optional) - Results per page (10â€“500, default 50).
\item \code{currentPage}: Integer (optional) - Page number (minimum 1, default 1).
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request GET 'https://api.kucoin.com/api/v3/oco/orders?symbol=BTC-USDT&pageSize=10&currentPage=1'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Object (required) - Contains:
\itemize{
\item \code{currentPage}: Integer (required) - Current page number.
\item \code{pageSize}: Integer (required) - Number of items per page.
\item \code{totalNum}: Integer (required) - Total number of OCO orders.
\item \code{totalPage}: Integer (required) - Total number of pages.
\item \code{items}: Array\link{Object} (required) - List of OCO orders, each with:
\itemize{
\item \code{orderId}: String (required) - System-generated order ID.
\item \code{symbol}: String (required) - Trading pair symbol.
\item \code{clientOid}: String (required) - Client-assigned order ID.
\item \code{orderTime}: Integer\if{html}{\out{<int64>}} (required) - Order placement time in milliseconds.
\item \code{status}: Enum\if{html}{\out{<String>}} (required) - Order status: "NEW", "DONE", "TRIGGERED", "CANCELED".
}
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "currentPage": 1,
    "pageSize": 50,
    "totalNum": 1,
    "totalPage": 1,
    "items": [
      \{
        "orderId": "674c3cfa72cf2800072ee7ce",
        "symbol": "BTC-USDT",
        "clientOid": "5c52e1203aa6f3g7f1e493fb",
        "orderTime": 1733049594803,
        "status": "NEW"
      \}
    ]
  \}
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Retrieve OCO order list with filter
  oco_list <- await(get_oco_order_list_impl(
    query = list(symbol = "BTC-USDT", pageSize = 10, currentPage = 1)
  ))
  print(oco_list)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
