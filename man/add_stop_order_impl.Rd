% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_stop.R
\name{add_stop_order_impl}
\alias{add_stop_order_impl}
\title{Add Stop Order (Implementation)}
\usage{
add_stop_order_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  type,
  symbol,
  side,
  stopPrice,
  clientOid = NULL,
  price = NULL,
  size = NULL,
  funds = NULL,
  stp = NULL,
  remark = NULL,
  timeInForce = NULL,
  cancelAfter = NULL,
  postOnly = NULL,
  hidden = NULL,
  iceberg = NULL,
  visibleSize = NULL,
  tradeType = "TRADE",
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{type}{Character string; order type: "limit" or "market". Required.}

\item{symbol}{Character string; trading pair symbol (e.g., "BTC-USDT"). Required.}

\item{side}{Character string; order side: "buy" or "sell". Required.}

\item{stopPrice}{Character string; trigger price for the stop order. Required.}

\item{clientOid}{Character string; unique client order ID (max 40 characters). Optional.}

\item{price}{Character string; price for limit orders. Required for limit orders.}

\item{size}{Character string; quantity for the order. Required for limit orders, optional for market orders.}

\item{funds}{Character string; funds for market orders. Optional for market orders.}

\item{stp}{Character string; self-trade prevention: "DC", "CO", "CN", "CB". Optional.}

\item{remark}{Character string; order remarks (max 20 characters). Optional.}

\item{timeInForce}{Character string; time in force: "GTC", "GTT", "IOC", "FOK". Optional, defaults to "GTC".}

\item{cancelAfter}{Integer; cancel after n seconds for GTT. Optional.}

\item{postOnly}{Logical; post-only flag. Optional, defaults to \code{FALSE}.}

\item{hidden}{Logical; hidden order flag. Optional, defaults to \code{FALSE}.}

\item{iceberg}{Logical; iceberg order flag. Optional, defaults to \code{FALSE}.}

\item{visibleSize}{Character string; visible size for iceberg orders. Optional.}

\item{tradeType}{Character string; trade type (e.g., "TRADE"). Optional, defaults to "TRADE".}
}
\value{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{orderId} (character): Unique order ID generated by the system.
\item \code{clientOid} (character): Client-assigned order ID.
}
}
\description{
Places a stop order (limit or market) on the KuCoin Spot trading system asynchronously.
This function constructs a JSON request body, sends it to the KuCoin API, and returns a \code{data.table}
containing the resulting order ID and client order ID.
}
\details{
\subsection{Description}{

This endpoint allows users to place a stop order on the KuCoin Spot trading system, which triggers when the market price reaches the specified \code{stopPrice}. Two types of stop orders are supported:
\itemize{
\item \strong{Limit Stop Order}: Executes at a specified \code{price} once triggered, requiring both \code{price} and \code{size}.
\item \strong{Market Stop Order}: Executes as a market order once triggered, requiring either \code{size} or \code{funds}.
}

The maximum number of untriggered stop orders per trading pair in one account is 20. The function validates parameters based on the order type and ensures compliance with KuCoin API constraints.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures required fields (\code{type}, \code{symbol}, \code{side}, \code{stopPrice}) are valid, and type-specific fields (\code{price}, \code{size}, \code{funds}) meet requirements.
\item \strong{Request Construction}: Builds a JSON body with required and optional parameters.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the POST method, endpoint, and request body.
\item \strong{API Request}: Sends a POST request to the KuCoin API with a 3-second timeout.
\item \strong{Response Processing}: Parses the response, validates success, and returns a \code{data.table} with \code{orderId} and \code{clientOid}.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{POST https://api.kucoin.com/api/v1/stop-order}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: Spot
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 1
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: addStopOrder
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/add-stop-order}{KuCoin Add Stop Order}
}
}

\subsection{Request}{
\subsection{Body Parameters (application/json)}{
\itemize{
\item \code{type}: Enum\if{html}{\out{<String>}} (required) - Order type: "limit" or "market".
\item \code{symbol}: String (required) - Trading pair symbol (e.g., "BTC-USDT").
\item \code{side}: Enum\if{html}{\out{<String>}} (required) - Order side: "buy" or "sell".
\item \code{clientOid}: String (optional) - Unique client order ID (max 40 characters, alphanumeric, underscores, or hyphens).
\item \code{price}: String (optional) - Order price (required for limit orders).
\item \code{size}: String (optional) - Order quantity (required for limit orders, optional for market orders if \code{funds} not provided).
\item \code{funds}: String (optional) - Funds for market orders (optional if \code{size} provided).
\item \code{stp}: Enum\if{html}{\out{<String>}} (optional) - Self Trade Prevention: "DC", "CO", "CN", "CB".
\item \code{stopPrice}: String (required) - Trigger price for the stop order.
\item \code{remark}: String (optional) - Order remarks (max 20 characters).
\item \code{timeInForce}: Enum\if{html}{\out{<String>}} (optional) - Time in force: "GTC", "GTT", "IOC", "FOK" (required for limit orders).
\item \code{cancelAfter}: Integer\if{html}{\out{<int64>}} (optional) - Cancel after n seconds (for GTT).
\item \code{postOnly}: Boolean (optional) - Post-only flag.
\item \code{hidden}: Boolean (optional) - Hidden order flag.
\item \code{iceberg}: Boolean (optional) - Iceberg order flag.
\item \code{visibleSize}: String (optional) - Visible size for iceberg orders.
\item \code{tradeType}: String (optional) - Trade type (default "TRADE").
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request POST 'https://api.kucoin.com/api/v1/stop-order' \\
--header 'Content-Type: application/json' \\
--data-raw '\{
    "type": "limit",
    "symbol": "BTC-USDT",
    "side": "buy",
    "price": "50000",
    "size": "0.00001",
    "stopPrice": "49000",
    "clientOid": "5c52e11203aa677f33e493fb",
    "remark": "order remarks"
\}'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Object (required) - Contains:
\itemize{
\item \code{orderId}: String (required) - Unique order ID generated by the system.
\item \code{clientOid}: String (required) - Client-assigned order ID from the request.
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "orderId": "670fd33bf9406e0007ab3945",
    "clientOid": "5c52e11203aa677f33e493fb"
  \}
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Place a limit stop order
  result <- await(add_stop_order_impl(
    type = "limit",
    symbol = "BTC-USDT",
    side = "buy",
    stopPrice = "49000",
    price = "50000",
    size = "0.00001",
    clientOid = "5c52e11203aa677f33e493fb",
    remark = "order remarks"
  ))
  print(result)

  # Place a market stop order with size
  result <- await(add_stop_order_impl(
    type = "market",
    symbol = "BTC-USDT",
    side = "buy",
    stopPrice = "49000",
    size = "0.00001",
    clientOid = "5c52e11203aa677f33e493fc"
  ))
  print(result)

  # Place a market stop order with funds
  result <- await(add_stop_order_impl(
    type = "market",
    symbol = "BTC-USDT",
    side = "buy",
    stopPrice = "49000",
    funds = "1",
    clientOid = "5c52e11203aa677f33e493fd"
  ))
  print(result)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
