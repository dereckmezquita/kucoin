% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_market_data.R,
%   R/impl_spottrading_orders_get_trade_history.R
\name{get_trade_history_impl}
\alias{get_trade_history_impl}
\title{Get Trade History (Implementation)}
\usage{
get_trade_history_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  symbol = NULL,
  orderId = NULL,
  side = NULL,
  type = NULL,
  lastId = NULL,
  limit = 20,
  startAt = NULL,
  endAt = NULL,
  .__coro_env_parent__ = <environment>
)

get_trade_history_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  symbol = NULL,
  orderId = NULL,
  side = NULL,
  type = NULL,
  lastId = NULL,
  limit = 20,
  startAt = NULL,
  endAt = NULL,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{symbol}{Character string; the trading pair symbol (e.g., "BTC-USDT"). Required if \code{orderId} is not provided.}

\item{orderId}{Character string; the unique order ID. If provided, other parameters are ignored except for pagination and time filters.}

\item{side}{Character string; optional filter for order side: "buy" or "sell".}

\item{type}{Character string; optional filter for order type: "limit" or "market".}

\item{lastId}{Integer; optional ID of the last fill for pagination.}

\item{limit}{Integer; number of fills to return per request (1â€“100, default 20).}

\item{startAt}{Integer; optional start time in milliseconds.}

\item{endAt}{Integer; optional end time in milliseconds.}
}
\value{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{sequence} (character): Trade sequence number.
\item \code{price} (character): Filled price.
\item \code{size} (character): Filled amount.
\item \code{side} (character): Trade side (\code{"buy"} or \code{"sell"}).
\item \code{time} (integer): Trade timestamp in nanoseconds.
\item \code{timestamp} (POSIXct): Converted trade timestamp in UTC.
}

Promise resolving to a \code{data.table} with columns corresponding to the fill fields, including:
\itemize{
\item \code{id} (integer): Fill ID.
\item \code{orderId} (character): Order ID.
\item \code{counterOrderId} (character): Counterparty order ID.
\item \code{tradeId} (integer): Trade ID.
\item \code{symbol} (character): Trading pair.
\item \code{side} (character): "buy" or "sell".
\item \code{liquidity} (character): "taker" or "maker".
\item \code{type} (character): "limit" or "market".
\item \code{forceTaker} (logical): Whether forced to take liquidity.
\item \code{price} (character): Fill price.
\item \code{size} (character): Fill size.
\item \code{funds} (character): Funds involved.
\item \code{fee} (character): Handling fees.
\item \code{feeRate} (character): Fee rate.
\item \code{feeCurrency} (character): Fee currency.
\item \code{stop} (character): Stop type.
\item \code{tradeType} (character): Trade type.
\item \code{taxRate} (character): Tax rate.
\item \code{tax} (character): Tax amount.
\item \code{createdAt} (integer): Fill timestamp (milliseconds).
\item \code{createdAtDatetime} (POSIXct): Fill time in UTC.
}
}
\description{
Retrieves the most recent 100 trade records for a specified trading symbol from the KuCoin API asynchronously.

Retrieves a list of the latest spot transaction details (fills) for a specified symbol or orderId from the KuCoin Spot trading system asynchronously.
This function returns a \code{data.table} with detailed information about each fill, sorted by the latest update time in descending order.
}
\details{
\subsection{Workflow Overview}{
\enumerate{
\item \strong{Query Construction}: Builds a query string with the \code{symbol} parameter using \code{build_query()}.
\item \strong{URL Assembly}: Combines \code{base_url}, \verb{/api/v1/market/histories}, and the query string.
\item \strong{HTTP Request}: Sends a GET request with a 10-second timeout via \code{httr::GET()}.
\item \strong{Response Processing}: Validates the response with \code{process_kucoin_response()} and extracts the \code{"data"} field.
\item \strong{Data Conversion}: Converts \code{"data"} to a \code{data.table}, adding a \code{timestamp} column via \code{time_convert_from_kucoin()}.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/histories}
}

\subsection{Usage}{

Utilised to fetch recent trade history for a trading symbol, useful for tracking market activity.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-trade-history}{KuCoin Get Trade History}
}

\subsection{Description}{

This endpoint fetches the latest transaction details (fills) for a given trading pair or specific order. The data is sorted in descending order based on the update time of the order.
If \code{orderId} is provided, it overrides other query parameters except for \code{lastId}, \code{limit}, \code{startAt}, and \code{endAt}.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures \code{symbol} is a valid trading pair if \code{orderId} is not provided. Validates optional parameters.
\item \strong{Request Construction}: Builds the endpoint URL with query parameters.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the GET method and endpoint.
\item \strong{API Request}: Sends a GET request to the KuCoin API with a 3-second timeout.
\item \strong{Response Processing}: Parses the response, converts the \code{items} array to a \code{data.table}, and adds a \code{createdAtDatetime} column.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{GET https://api.kucoin.com/api/v1/hf/fills}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: General
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 2
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: getTradeHistory
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/get-trade-history}{KuCoin Get Trade History}
}
}

\subsection{Request}{
\subsection{Query Parameters}{
\itemize{
\item \code{symbol}: String (required if \code{orderId} is not provided) - The trading pair symbol (e.g., "BTC-USDT").
\item \code{orderId}: String (optional) - The unique order ID. If provided, other parameters (except \code{lastId}, \code{limit}, \code{startAt}, \code{endAt}) are ignored.
\item \code{side}: Enum\if{html}{\out{<String>}} (optional) - Order side: "buy" or "sell".
\item \code{type}: Enum\if{html}{\out{<String>}} (optional) - Order type: "limit" or "market".
\item \code{lastId}: Integer\if{html}{\out{<int64>}} (optional) - The ID of the last fill from the previous batch for pagination.
\item \code{limit}: Integer (optional) - Number of fills per page (1 to 100, default 20).
\item \code{startAt}: Integer\if{html}{\out{<int64>}} (optional) - Start time in milliseconds.
\item \code{endAt}: Integer\if{html}{\out{<int64>}} (optional) - End time in milliseconds.
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request GET 'https://api.kucoin.com/api/v1/hf/fills?symbol=BTC-USDT&limit=100&startAt=1728663338000&endAt=1728692138000'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Object (required) - Contains:
\itemize{
\item \code{lastId}: Integer\if{html}{\out{<int64>}} (required) - The ID of the last fill in the current batch.
\item \code{items}: Array of objects (required) - List of fill details, each with:
\itemize{
\item \code{id}: Integer\if{html}{\out{<int64>}} - Fill ID.
\item \code{orderId}: String - Order ID.
\item \code{counterOrderId}: String - Counterparty order ID.
\item \code{tradeId}: Integer\if{html}{\out{<int64>}} - Trade ID.
\item \code{symbol}: String - Trading pair.
\item \code{side}: Enum\if{html}{\out{<String>}} - "buy" or "sell".
\item \code{liquidity}: Enum\if{html}{\out{<String>}} - "taker" or "maker".
\item \code{type}: Enum\if{html}{\out{<String>}} - "limit" or "market".
\item \code{forceTaker}: Boolean - Whether the order was forced to take liquidity.
\item \code{price}: String - Fill price.
\item \code{size}: String - Fill size.
\item \code{funds}: String - Funds involved in the fill.
\item \code{fee}: String - Handling fees.
\item \code{feeRate}: String - Fee rate.
\item \code{feeCurrency}: String - Fee currency.
\item \code{stop}: String - Stop type (currently empty for HFT).
\item \code{tradeType}: String - Trade type.
\item \code{taxRate}: String - Tax rate.
\item \code{tax}: String - Tax amount.
\item \code{createdAt}: Integer\if{html}{\out{<int64>}} - Fill timestamp in milliseconds.
}
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "items": [
      \{
        "id": 19814995255305,
        "orderId": "6717422bd51c29000775ea03",
        "counterOrderId": "67174228135f9e000709da8c",
        "tradeId": 11029373945659392,
        "symbol": "BTC-USDT",
        "side": "buy",
        "liquidity": "taker",
        "type": "limit",
        "forceTaker": false,
        "price": "67717.6",
        "size": "0.00001",
        "funds": "0.677176",
        "fee": "0.000677176",
        "feeRate": "0.001",
        "feeCurrency": "USDT",
        "stop": "",
        "tradeType": "TRADE",
        "taxRate": "0",
        "tax": "0",
        "createdAt": 1729577515473
      \}
    ],
    "lastId": 19814995255305
  \}
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
main_async <- coro::async(function() {
  trades <- await(get_trade_history_impl(symbol = "BTC-USDT"))
  print(trades)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Retrieve trade history for BTC-USDT
  trade_history <- await(get_trade_history_impl(
    symbol = "BTC-USDT",
    limit = 50
  ))
  print(trade_history)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
