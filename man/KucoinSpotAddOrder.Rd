% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KucoinSpotAddOrder.R
\name{KucoinSpotAddOrder}
\alias{KucoinSpotAddOrder}
\title{KucoinSpotAddOrder Class for KuCoin Spot Trading Order Placement}
\value{
Not applicable (class definition; see individual methods for return values).
}
\description{
The \code{KucoinSpotAddOrder} class provides an asynchronous interface for placing spot trading orders on KuCoin.
It leverages the \code{coro} package for non-blocking HTTP requests, returning promises that resolve to \code{data.table} objects.
This class supports placing single orders (limit or market), testing order placement, and batch order placement (up to 20 orders).
}
\details{
\subsection{Purpose and Scope}{

This class focuses exclusively on order creation operations in the KuCoin Spot trading system, including:
\itemize{
\item \strong{Single Order Placement}: Place limit or market orders with detailed parameters.
\item \strong{Order Testing}: Simulate order placement for validation without execution.
\item \strong{Batch Order Placement}: Place multiple orders in a single request for efficiency.
}
}

\subsection{Workflow Overview}{

Not applicable (class definition overview).
}

\subsection{API Endpoint}{

Not applicable (class-level documentation; see individual methods for specific endpoints).
}

\subsection{Usage}{

Utilised by traders and developers to programmatically place Spot trading orders on KuCoin. The class is initialized with API credentials,
automatically loaded via \code{get_api_keys()} if not provided, and a base URL from \code{get_base_url()}. For detailed endpoint information,
parameters, and response schemas, refer to the official \href{https://www.kucoin.com/docs-new}{KuCoin API Documentation}.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/introduction}{KuCoin API Documentation - Spot Trading Orders}
}
}
\section{Methods}{

\itemize{
\item \strong{initialize(keys, base_url):} Initialises the object with API credentials and base URL.
\item \strong{add_order(type, symbol, side, ...):} Places a single limit or market order.
\item \strong{add_order_test(type, symbol, side, ...):} Simulates placing a single order for testing.
\item \strong{add_order_batch(order_list):} Places multiple orders (up to 20) in a batch.
}
}

\examples{
\dontrun{
# Comprehensive example demonstrating key methods
main_async <- coro::async(function() {
  # Initialise the class
  additions <- KucoinSpotAddOrder$new()

  # Place a limit buy order
  order <- await(additions$add_order(
    type = "limit",
    symbol = "BTC-USDT",
    side = "buy",
    price = "50000",
    size = "0.0001",
    clientOid = uuid::UUIDgenerate(),
    remark = "Test limit order"
  ))
  print("New Order:"); print(order)

  # Test a market buy order
  test_order <- await(additions$add_order_test(
    type = "market",
    symbol = "BTC-USDT",
    side = "buy",
    funds = "10",
    clientOid = uuid::UUIDgenerate()
  ))
  print("Test Order:"); print(test_order)

  # Place batch orders
  order_list <- list(
    list(
      clientOid = uuid::UUIDgenerate(),
      symbol = "BTC-USDT",
      type = "limit",
      side = "buy",
      price = "30000",
      size = "0.00001",
      remark = "Batch buy"
    ),
    list(
      clientOid = uuid::UUIDgenerate(),
      symbol = "ETH-USDT",
      type = "market",
      side = "sell",
      size = "0.01"
    )
  )
  batch_result <- await(additions$add_order_batch(order_list))
  print("Batch Orders:"); print(batch_result)
})
main_async()
while (!later::loop_empty()) later::run_now()
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{keys}}{List containing KuCoin API keys (\code{api_key}, \code{api_secret}, \code{api_passphrase}, \code{key_version}).}

\item{\code{base_url}}{Character string representing the base URL for KuCoin API endpoints.
Initialise a New KucoinSpotAddOrder Object
\subsection{Description}{

Initialises a \code{KucoinSpotAddOrder} object with API credentials and a base URL for placing Spot trading orders asynchronously.
If not provided, credentials are sourced from \code{get_api_keys()} and the base URL from \code{get_base_url()}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Credential Assignment}: Sets \code{self$keys} to the provided or default API keys.
\item \strong{URL Assignment}: Sets \code{self$base_url} to the provided or default base URL.
}
}

\subsection{API Endpoint}{

Not applicable (initialisation method).
}

\subsection{Usage}{

Utilised to create an instance for managing order placements in Spot trading.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/introduction#authentication}{KuCoin API Authentication}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Order Placement Hub}: Use this as the central object for all order creation in your trading bot, streamlining trade execution logic.
\item \strong{Secure Setup}: Load credentials via \code{get_api_keys()} from a secure source (e.g., environment variables or a vault), ensuring safe deployment.
\item \strong{Integration}: Pair with querying (\code{KucoinSpotOrderQueries}) and cancellation (\code{KucoinSpotOrderCancellations}) classes for full trade lifecycle management.
}
}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-KucoinSpotAddOrder-new}{\code{KucoinSpotAddOrder$new()}}
\item \href{#method-KucoinSpotAddOrder-add_order}{\code{KucoinSpotAddOrder$add_order()}}
\item \href{#method-KucoinSpotAddOrder-add_order_test}{\code{KucoinSpotAddOrder$add_order_test()}}
\item \href{#method-KucoinSpotAddOrder-add_order_batch}{\code{KucoinSpotAddOrder$add_order_batch()}}
\item \href{#method-KucoinSpotAddOrder-clone}{\code{KucoinSpotAddOrder$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotAddOrder-new"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotAddOrder-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotAddOrder$new(keys = get_api_keys(), base_url = get_base_url())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{List containing API configuration parameters from \code{get_api_keys()}, including:
\itemize{
\item \code{api_key}: Character string; your KuCoin API key.
\item \code{api_secret}: Character string; your KuCoin API secret.
\item \code{api_passphrase}: Character string; your KuCoin API passphrase.
\item \code{key_version}: Character string; API key version (e.g., \code{"2"}).
Defaults to \code{get_api_keys()}.
}}

\item{\code{base_url}}{Character string representing the base URL for the API. Defaults to \code{get_base_url()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the \code{KucoinSpotAddOrder} class.
Add Order
\subsection{Description}{

Places a new limit or market order on KuCoin Spot trading asynchronously via a POST request to \verb{/api/v1/hf/orders}.
Calls \code{add_order_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures parameters match order type (limit/market).
\item \strong{Request Body}: Constructs JSON with order details.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends POST request.
\item \strong{Response}: Returns \code{orderId} and \code{clientOid}.
}
}

\subsection{API Endpoint}{

\verb{POST https://api.kucoin.com/api/v1/hf/orders}
}

\subsection{Usage}{

Utilised to place individual spot trading orders with detailed customization.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/add-order}{KuCoin Add Order}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Dynamic Trading}: Place limit orders with \code{price} based on technical indicators (e.g., moving averages) or market orders with \code{funds} for precise capital allocation.
\item \strong{Order Tagging}: Use \code{clientOid} (e.g., UUID with strategy prefix) to track orders back to specific trading rules or sessions in your logs.
\item \strong{Risk Control}: Set \code{timeInForce} to "IOC" or "FOK" for immediate execution checks, canceling via a paired class if unfilled.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotAddOrder-add_order"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotAddOrder-add_order}{}}}
\subsection{Method \code{add_order()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotAddOrder$add_order(
  type,
  symbol,
  side,
  clientOid = NULL,
  price = NULL,
  size = NULL,
  funds = NULL,
  stp = NULL,
  tags = NULL,
  remark = NULL,
  timeInForce = NULL,
  cancelAfter = NULL,
  postOnly = NULL,
  hidden = NULL,
  iceberg = NULL,
  visibleSize = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Character string; "limit" or "market". Required.}

\item{\code{symbol}}{Character string; trading pair (e.g., "BTC-USDT"). Required.}

\item{\code{side}}{Character string; "buy" or "sell". Required.}

\item{\code{clientOid}}{Character string; unique client ID (max 40 chars). Optional.}

\item{\code{price}}{Character string; price for limit orders (e.g., "50000"). Required for limit.}

\item{\code{size}}{Character string; quantity (e.g., "0.0001"). Required for limit, optional for market.}

\item{\code{funds}}{Character string; funds for market orders (e.g., "10"). Optional for market.}

\item{\code{stp}}{Character string; self-trade prevention: "CN", "CO", "CB", "DC". Optional.}

\item{\code{tags}}{Character string; tag (max 20 chars). Optional.}

\item{\code{remark}}{Character string; remarks (max 20 chars). Optional.}

\item{\code{timeInForce}}{Character string; "GTC", "GTT", "IOC", "FOK". Optional.}

\item{\code{cancelAfter}}{Integer; seconds until cancellation for GTT. Optional.}

\item{\code{postOnly}}{Logical; post-only flag. Optional.}

\item{\code{hidden}}{Logical; hidden order flag. Optional.}

\item{\code{iceberg}}{Logical; iceberg order flag. Optional.}

\item{\code{visibleSize}}{Character string; visible size for iceberg orders. Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{orderId} (character): KuCoin-generated order ID.
\item \code{clientOid} (character): Client-assigned order ID.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"orderId": "6717422bd51c29000775ea03", "clientOid": "5c52e11203aa677f33e493fb"\}\}
}\if{html}{\out{</div>}}

Add Order Test
}

\subsection{Description}{

Simulates placing a new limit or market order via a POST request to \verb{/api/v1/hf/orders/test}.
Calls \code{add_order_test_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures parameters match order type.
\item \strong{Request Body}: Constructs JSON with order details.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends POST request to test endpoint.
\item \strong{Response}: Returns simulated \code{orderId} and \code{clientOid}.
}
}

\subsection{API Endpoint}{

\verb{POST https://api.kucoin.com/api/v1/hf/orders/test}
}

\subsection{Usage}{

Utilised to test order placement logic without executing trades.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/add-order-test}{KuCoin Add Order Test}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Strategy Validation}: Test order parameters (e.g., \code{price}, \code{size}) against KuCoin’s rules before live execution, ensuring compliance.
\item \strong{Signature Testing}: Verify authentication setup by simulating requests, catching errors in a sandbox environment.
\item \strong{Dry Run}: Use in development to simulate trading strategies, logging results for analysis without financial impact.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotAddOrder-add_order_test"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotAddOrder-add_order_test}{}}}
\subsection{Method \code{add_order_test()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotAddOrder$add_order_test(
  type,
  symbol,
  side,
  clientOid = NULL,
  price = NULL,
  size = NULL,
  funds = NULL,
  stp = NULL,
  tags = NULL,
  remark = NULL,
  timeInForce = NULL,
  cancelAfter = NULL,
  postOnly = NULL,
  hidden = NULL,
  iceberg = NULL,
  visibleSize = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Character string; "limit" or "market". Required.}

\item{\code{symbol}}{Character string; trading pair (e.g., "BTC-USDT"). Required.}

\item{\code{side}}{Character string; "buy" or "sell". Required.}

\item{\code{clientOid}}{Character string; unique client ID (max 40 chars). Optional.}

\item{\code{price}}{Character string; price for limit orders (e.g., "50000"). Required for limit.}

\item{\code{size}}{Character string; quantity (e.g., "0.0001"). Required for limit, optional for market.}

\item{\code{funds}}{Character string; funds for market orders (e.g., "10"). Optional for market.}

\item{\code{stp}}{Character string; self-trade prevention: "CN", "CO", "CB", "DC". Optional.}

\item{\code{tags}}{Character string; tag (max 20 chars). Optional.}

\item{\code{remark}}{Character string; remarks (max 20 chars). Optional.}

\item{\code{timeInForce}}{Character string; "GTC", "GTT", "IOC", "FOK". Optional.}

\item{\code{cancelAfter}}{Integer; seconds until cancellation for GTT. Optional.}

\item{\code{postOnly}}{Logical; post-only flag. Optional.}

\item{\code{hidden}}{Logical; hidden order flag. Optional.}

\item{\code{iceberg}}{Logical; iceberg order flag. Optional.}

\item{\code{visibleSize}}{Character string; visible size for iceberg orders. Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{orderId} (character): Simulated KuCoin-generated order ID.
\item \code{clientOid} (character): Client-assigned order ID.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"orderId": "simulated-6717422bd51c29000775ea03", "clientOid": "5c52e11203aa677f33e493fb"\}\}
}\if{html}{\out{</div>}}

Add Order Batch
}

\subsection{Description}{

Places multiple orders (up to 20) in a batch via a POST request to \verb{/api/v1/hf/orders/multi}.
Calls \code{add_order_batch_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Validation}: Ensures \code{order_list} has 1–20 valid orders.
\item \strong{Request Body}: Constructs JSON with order list.
\item \strong{Authentication}: Generates headers.
\item \strong{API Call}: Sends POST request.
\item \strong{Response}: Returns results for each order.
}
}

\subsection{API Endpoint}{

\verb{POST https://api.kucoin.com/api/v1/hf/orders/multi}
}

\subsection{Usage}{

Utilised to efficiently place multiple spot trading orders in a single request.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/batch-add-orders}{KuCoin Batch Add Orders}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Multi-Market Execution}: Place orders across symbols (e.g., BTC-USDT, ETH-USDT) simultaneously based on portfolio signals, reducing latency.
\item \strong{Error Handling}: Check \code{success} and \code{failMsg} per order to retry failed placements or adjust strategy dynamically.
\item \strong{Batch Optimization}: Use with market data to set \code{price} or \code{funds} for each order, ensuring alignment with current conditions.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotAddOrder-add_order_batch"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotAddOrder-add_order_batch}{}}}
\subsection{Method \code{add_order_batch()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotAddOrder$add_order_batch(order_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{order_list}}{List; list of orders, each a list with:
\itemize{
\item \code{symbol} (character): Trading pair (e.g., "BTC-USDT"). Required.
\item \code{type} (character): "limit" or "market". Required.
\item \code{side} (character): "buy" or "sell". Required.
\item \code{clientOid} (character): Unique client ID (max 40 chars). Optional.
\item \code{price} (character): Price for limit orders. Required for limit.
\item \code{size} (character): Quantity. Required for limit, optional for market.
\item \code{funds} (character): Funds for market orders. Optional for market.
\item \code{stp} (character): Self-trade prevention: "CN", "CO", "CB", "DC". Optional.
\item \code{tags} (character): Tag (max 20 chars). Optional.
\item \code{remark} (character): Remarks (max 20 chars). Optional.
\item \code{timeInForce} (character): "GTC", "GTT", "IOC", "FOK". Optional.
\item \code{cancelAfter} (integer): Seconds until cancellation for GTT. Optional.
\item \code{postOnly} (logical): Post-only flag. Optional.
\item \code{hidden} (logical): Hidden order flag. Optional.
\item \code{iceberg} (logical): Iceberg order flag. Optional.
\item \code{visibleSize} (character): Visible size for iceberg orders. Optional.
}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with columns:
\itemize{
\item \code{success} (logical): Whether placement succeededAIza
\item \code{orderId} (character): KuCoin-generated order ID (if successful).
\item \code{clientOid} (character): Client-assigned order ID (if provided).
\item \code{failMsg} (character): Error message (if failed).
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": [\{"success": true, "orderId": "6717422bd51c29000775ea03", "clientOid": "batch1", "failMsg": null\}, \{"success": true, "orderId": "6717422bd51c29000775ea04", "clientOid": "batch2", "failMsg": null\}]\}
}\if{html}{\out{</div>}}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotAddOrder-clone"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotAddOrder-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotAddOrder$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
