% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_oco.R
\name{add_oco_order_impl}
\alias{add_oco_order_impl}
\title{Add OCO Order (Implementation)}
\usage{
add_oco_order_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  symbol,
  side,
  price,
  size,
  clientOid,
  stopPrice,
  limitPrice,
  remark = NULL,
  tradeType = "TRADE",
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{symbol}{Character string; trading pair symbol (e.g., "BTC-USDT"). Required.}

\item{side}{Character string; order side: "buy" or "sell". Required.}

\item{price}{Character string; limit order price (e.g., "94000"). Required.}

\item{size}{Character string; order quantity (e.g., "0.1"). Required.}

\item{clientOid}{Character string; unique client order ID (max 40 characters, e.g., "5c52e11203aa67f1e493fb"). Required.}

\item{stopPrice}{Character string; stop-limit trigger price (e.g., "98000"). Required.}

\item{limitPrice}{Character string; stop-limit order price (e.g., "96000"). Required.}

\item{remark}{Character string; optional remarks (max 20 characters, e.g., "this is remark").}

\item{tradeType}{Character string; transaction type: "TRADE" (default).}
}
\value{
Promise resolving to a \code{data.table} with one row containing:
\itemize{
\item \code{orderId} (character): Unique order ID generated by the KuCoin system for the OCO order.
}
}
\description{
Places an OCO (One-Cancels-the-Other) order on the KuCoin Spot trading system asynchronously by sending a POST request to the \verb{/api/v3/oco/order} endpoint.
An OCO order combines a limit order and a stop-limit order, where executing one cancels the other, returning a \code{data.table} with the order ID.
}
\details{
\subsection{What is an OCO Order?}{

An OCO (One-Cancels-the-Other) order is a sophisticated trading tool that pairs a limit order (to secure profits) with a stop-limit order (to cap losses).
When one order executes—either hitting a profit target or a stop-loss threshold—the other is automatically canceled. This is particularly useful for:
\itemize{
\item \strong{Risk Management}: Set a stop-loss to limit potential losses if the market moves against your position, e.g., buying BTC at $50,000 with a stop at $48,000.
\item \strong{Profit Taking}: Lock in gains at a target price without constant monitoring, e.g., selling at $55,000 after buying at $50,000.
\item \strong{Volatile Markets}: Automate trading decisions in fast-moving conditions, reducing emotional bias and ensuring discipline.
For example, a trader might place an OCO order to buy BTC at $50,000, setting a limit sell at $55,000 (profit) and a stop-limit sell at $48,000 (loss protection).
If BTC reaches $55,000, the profit is secured, and the stop cancels; if it drops to $48,000, losses are limited, and the limit cancels.
}
}

\subsection{Description}{

This function constructs a JSON request body with required parameters (\code{symbol}, \code{side}, \code{price}, \code{size}, \code{clientOid}, \code{stopPrice}, \code{limitPrice})
and optional fields (\code{remark}, \code{tradeType}), authenticates the request, and processes the response into a \code{data.table}.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures required fields are non-empty strings and validates \code{side} and \code{tradeType} enums.
\item \strong{Request Construction}: Builds a named list of parameters, excluding NULL values, and converts it to JSON using \code{toJSON}.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the POST method, endpoint, and JSON body.
\item \strong{API Request}: Sends a POST request to the KuCoin API with a 3-second timeout via \code{httr::POST}.
\item \strong{Response Processing}: Parses the response with \code{process_kucoin_response}, checks for success ("200000"), and converts the \code{data} field to a \code{data.table}.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{POST https://api.kucoin.com/api/v3/oco/order}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: Spot
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 2
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: addOcoOrder
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/add-oco-order}{KuCoin Add OCO Order}
}
}

\subsection{Request}{
\subsection{Body Parameters (application/json)}{
\itemize{
\item \code{symbol}: String (required) - Trading pair symbol (e.g., "BTC-USDT").
\item \code{side}: Enum\if{html}{\out{<String>}} (required) - Order side: "buy" or "sell".
\item \code{price}: String (required) - Limit order price.
\item \code{size}: String (required) - Order quantity.
\item \code{clientOid}: String (required) - Unique client order ID (max 40 characters, alphanumeric, underscores, or hyphens).
\item \code{stopPrice}: String (required) - Trigger price for the stop-limit order.
\item \code{limitPrice}: String (required) - Limit order price after triggering take-profit or stop-loss.
\item \code{remark}: String (optional) - Order remarks (max 20 characters).
\item \code{tradeType}: Enum\if{html}{\out{<String>}} (optional) - Transaction type: "TRADE" (default).
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request POST 'https://api.kucoin.com/api/v3/oco/order' \\
--header 'Content-Type: application/json' \\
--data-raw '\{
    "symbol": "BTC-USDT",
    "side": "buy",
    "price": "94000",
    "size": "0.1",
    "clientOid": "5c52e11203aa67f1e493fb",
    "stopPrice": "98000",
    "limitPrice": "96000",
    "remark": "this is remark",
    "tradeType": "TRADE"
\}'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Object (required) - Contains:
\itemize{
\item \code{orderId}: String (required) - Unique order ID generated by the system.
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "orderId": "674c316e688dea0007c7b986"
  \}
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Place an OCO order for BTC-USDT
  oco_order <- await(add_oco_order_impl(
    symbol = "BTC-USDT",
    side = "buy",
    price = "94000",
    size = "0.1",
    clientOid = "5c52e11203aa67f1e493fb",
    stopPrice = "98000",
    limitPrice = "96000",
    remark = "Profit and Stop"
  ))
  print(oco_order)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
