% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_get_x.R
\name{get_open_orders_impl}
\alias{get_open_orders_impl}
\title{Get Open Orders (Implementation)}
\usage{
get_open_orders_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  symbol,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{symbol}{Character string; the trading pair symbol (e.g., "BTC-USDT"). Required.}
}
\value{
Promise resolving to a \code{data.table} with columns corresponding to the order fields, including:
\itemize{
\item \code{id} (character): Unique order ID.
\item \code{clientOid} (character): Client-assigned order ID.
\item \code{symbol} (character): Trading pair.
\item \code{opType} (character): Operation type.
\item \code{type} (character): Order type ("limit" or "market").
\item \code{side} (character): Order side ("buy" or "sell").
\item \code{price} (character): Order price.
\item \code{size} (character): Order size.
\item \code{funds} (character): Order funds.
\item \code{dealSize} (character): Filled quantity.
\item \code{dealFunds} (character): Filled funds.
\item \code{cancelledSize} (character): Canceled quantity.
\item \code{cancelledFunds} (character): Canceled funds.
\item \code{remainSize} (character): Remaining quantity.
\item \code{remainFunds} (character): Remaining funds.
\item \code{fee} (character): Handling fees.
\item \code{feeCurrency} (character): Fee currency.
\item \code{stp} (character or NA): Self Trade Prevention strategy.
\item \code{timeInForce} (character): Time in force.
\item \code{postOnly} (logical): Post-only flag.
\item \code{hidden} (logical): Hidden order flag.
\item \code{iceberg} (logical): Iceberg order flag.
\item \code{visibleSize} (character): Visible size for iceberg orders.
\item \code{cancelAfter} (integer): Seconds until cancellation for GTT.
\item \code{channel} (character): Order channel.
\item \code{remark} (character or NA): Order remarks.
\item \code{tags} (character or NA): Order tags.
\item \code{cancelExist} (logical): Indicates a cancellation record.
\item \code{tradeType} (character): Trade type.
\item \code{inOrderBook} (logical): Whether in the order book.
\item \code{tax} (character): Tax information.
\item \code{active} (logical): Order status (true = active).
\item \code{createdAt} (integer): Creation timestamp (milliseconds).
\item \code{lastUpdatedAt} (integer): Last update timestamp (milliseconds).
\item \code{createdAtDatetime} (POSIXct): Creation time in UTC.
\item \code{lastUpdatedAtDatetime} (POSIXct): Last update time in UTC.
}
}
\description{
Retrieves all active spot orders for a specified symbol from the KuCoin Spot trading system asynchronously.
This function returns a \code{data.table} with detailed information about each active order, sorted by the latest update time in descending order.
}
\details{
\subsection{Description}{

This endpoint fetches all active orders for a given trading pair (e.g., "BTC-USDT"). Active orders are those currently in the order book and not fully filled or canceled.
The orders are returned in descending order based on their last update time.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures \code{symbol} is a non-empty string and a valid trading pair.
\item \strong{Request Construction}: Builds the endpoint URL with \code{symbol} as a query parameter.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the GET method and endpoint.
\item \strong{API Request}: Sends a GET request to the KuCoin API with a 3-second timeout.
\item \strong{Response Processing}: Parses the response, converts the array of orders to a \code{data.table}, and adds \code{createdAtDatetime} and \code{lastUpdatedAtDatetime} columns.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{GET https://api.kucoin.com/api/v1/hf/orders/active?symbol=\{symbol\}}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: General
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 2
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: getOpenOrders
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/get-open-orders}{KuCoin Get Open Orders}
}
}

\subsection{Request}{
\subsection{Query Parameters}{
\itemize{
\item \code{symbol}: String (required) - The trading pair symbol (e.g., "BTC-USDT").
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request GET 'https://api.kucoin.com/api/v1/hf/orders/active?symbol=BTC-USDT'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Array of objects (required) - List of active orders, each with fields such as:
\itemize{
\item \code{id}: String - Unique order ID.
\item \code{clientOid}: String - Client-assigned order ID.
\item \code{symbol}: String - Trading pair.
\item \code{opType}: String - Operation type.
\item \code{type}: Enum\if{html}{\out{<String>}} - Order type: "limit" or "market".
\item \code{side}: Enum\if{html}{\out{<String>}} - Order side: "buy" or "sell".
\item \code{price}: String - Order price.
\item \code{size}: String - Order size.
\item \code{funds}: String - Order funds.
\item \code{dealSize}: String - Filled quantity.
\item \code{dealFunds}: String - Filled funds.
\item \code{cancelledSize}: String - Canceled quantity.
\item \code{cancelledFunds}: String - Canceled funds.
\item \code{remainSize}: String - Remaining quantity.
\item \code{remainFunds}: String - Remaining funds.
\item \code{fee}: String - Handling fees.
\item \code{feeCurrency}: String - Fee currency.
\item \code{stp}: Enum\if{html}{\out{<String>}} - Self Trade Prevention: "DC", "CO", "CN", "CB" or null.
\item \code{timeInForce}: Enum\if{html}{\out{<String>}} - Time in force: "GTC", "GTT", "IOC", "FOK".
\item \code{postOnly}: Boolean - Post-only flag.
\item \code{hidden}: Boolean - Hidden order flag.
\item \code{iceberg}: Boolean - Iceberg order flag.
\item \code{visibleSize}: String - Visible size for iceberg orders.
\item \code{cancelAfter}: Integer - Seconds until cancellation for GTT.
\item \code{channel}: String - Order channel.
\item \code{remark}: String or null - Order remarks.
\item \code{tags}: String or null - Order tags.
\item \code{cancelExist}: Boolean - Indicates a cancellation record.
\item \code{tradeType}: String - Trade type.
\item \code{inOrderBook}: Boolean - Whether in the order book.
\item \code{tax}: String - Tax information.
\item \code{active}: Boolean - Order status (true = active).
\item \code{createdAt}: Integer\if{html}{\out{<int64>}} - Creation timestamp in milliseconds.
\item \code{lastUpdatedAt}: Integer\if{html}{\out{<int64>}} - Last update timestamp in milliseconds.
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": [
    \{
      "id": "67120bbef094e200070976f6",
      "clientOid": "5c52e11203aa677f33e493fb",
      "symbol": "BTC-USDT",
      "opType": "DEAL",
      "type": "limit",
      "side": "buy",
      "price": "50000",
      "size": "0.00001",
      "funds": "0.5",
      "dealSize": "0",
      "dealFunds": "0",
      "fee": "0",
      "feeCurrency": "USDT",
      "stp": null,
      "timeInForce": "GTC",
      "postOnly": false,
      "hidden": false,
      "iceberg": false,
      "visibleSize": "0",
      "cancelAfter": 0,
      "channel": "API",
      "remark": "order remarks",
      "tags": "order tags",
      "cancelExist": false,
      "tradeType": "TRADE",
      "inOrderBook": true,
      "cancelledSize": "0",
      "cancelledFunds": "0",
      "remainSize": "0.00001",
      "remainFunds": "0.5",
      "tax": "0",
      "active": true,
      "createdAt": 1729235902748,
      "lastUpdatedAt": 1729235909862
    \}
  ]
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Retrieve open orders for BTC-USDT
  open_orders <- await(get_open_orders_impl(symbol = "BTC-USDT"))
  print(open_orders)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
