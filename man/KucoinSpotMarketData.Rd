% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KucoinSpotMarketData.R
\name{KucoinSpotMarketData}
\alias{KucoinSpotMarketData}
\title{KucoinSpotMarketData Class for KuCoin Spot Market Data Retrieval}
\description{
The \code{KucoinSpotMarketData} class provides an asynchronous interface for retrieving spot market data from KuCoin.
It leverages the \code{coro} package for non-blocking HTTP requests, returning promises that resolve to \code{data.table} objects
(or character vectors for simple lists). This class supports a comprehensive set of market data endpoints, including
announcements, historical klines, currency details, trading symbols, tickers, trade history, orderbooks, 24-hour stats,
and market lists.
}
\details{
\subsection{Purpose and Scope}{

This class is designed to facilitate market analysis and monitoring in the KuCoin Spot trading ecosystem, covering:
\itemize{
\item \strong{Market News}: Announcements for updates and events.
\item \strong{Historical Data}: Klines for technical analysis.
\item \strong{Asset Metadata}: Currency and symbol details for configuration.
\item \strong{Real-Time Data}: Tickers, trade history, and orderbooks for live market insights.
\item \strong{Market Overview}: 24-hour stats and market lists for broad monitoring.
}
}

\subsection{Usage}{

Utilised by traders and developers to programmatically access KuCoin Spot market data. The class is initialized with API
credentials (required only for \code{get_full_orderbook}), automatically loaded via \code{get_api_keys()} if not provided, and a
base URL from \code{get_base_url()}. Most endpoints are public, except \code{get_full_orderbook}, which requires authentication.
For detailed endpoint information, parameters, and response schemas, refer to the official \href{https://www.kucoin.com/docs-new}{KuCoin API Documentation}.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/introduction}{KuCoin API Documentation - Spot Market Data}
}
}
\section{Methods}{

\itemize{
\item \strong{initialize(keys, base_url):} Initialises the object with API credentials and base URL.
\item \strong{get_announcements(query, page_size, max_pages):} Retrieves paginated market announcements.
\item \strong{get_klines(symbol, freq, from, to, concurrent, delay_ms, retries):} Fetches historical klines data with segmentation.
\item \strong{get_currency(currency, chain):} Retrieves details for a specific currency.
\item \strong{get_all_currencies():} Retrieves details for all available currencies.
\item \strong{get_symbol(symbol):} Retrieves details for a specific trading symbol.
\item \strong{get_all_symbols(market):} Retrieves all trading symbols, optionally filtered by market.
\item \strong{get_ticker(symbol):} Retrieves Level 1 ticker data for a symbol.
\item \strong{get_all_tickers():} Retrieves ticker data for all trading pairs.
\item \strong{get_trade_history(symbol):} Retrieves recent trade history for a symbol.
\item \strong{get_part_orderbook(symbol, size):} Retrieves partial orderbook data (20 or 100 levels).
\item \strong{get_full_orderbook(symbol):} Retrieves full orderbook data (authenticated).
\item \strong{get_24hr_stats(symbol):} Retrieves 24-hour market statistics for a symbol.
\item \strong{get_market_list():} Retrieves a list of all trading markets.
}
}

\examples{
\dontrun{
# Comprehensive example demonstrating key methods
main_async <- coro::async(function() {
  # Initialise the class
  market <- KucoinSpotMarketData$new()

  # Get new listings announcements
  announcements <- await(market$get_announcements(list(annType = "new-listings"), page_size = 10, max_pages = 2))
  print("New Listings Announcements:"); print(announcements)

  # Get 48 hours of hourly klines
  klines <- await(market$get_klines("BTC-USDT", "1hour", lubridate::now() - lubridate::dhours(48), lubridate::now()))
  print("BTC-USDT Klines:"); print(klines)

  # Get ticker data
  ticker <- await(market$get_ticker("BTC-USDT"))
  print("BTC-USDT Ticker:"); print(ticker)

  # Get full orderbook (authenticated)
  orderbook <- await(market$get_full_orderbook("BTC-USDT"))
  print("BTC-USDT Full Orderbook:"); print(orderbook)

  # Get 24-hour stats
  stats <- await(market$get_24hr_stats("BTC-USDT"))
  print("BTC-USDT 24hr Stats:"); print(stats)
})
main_async()
while (!later::loop_empty()) later::run_now()
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{keys}}{List containing KuCoin API keys (\code{api_key}, \code{api_secret}, \code{api_passphrase}, \code{key_version}).}

\item{\code{base_url}}{Character string representing the base URL for KuCoin API endpoints.
Initialise a New KucoinSpotMarketData Object
\subsection{Description}{

Initialises a \code{KucoinSpotMarketData} object with API credentials and a base URL for retrieving Spot market data
asynchronously. Credentials are only required for authenticated endpoints (e.g., \code{get_full_orderbook}).
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Credential Assignment}: Sets \code{self$keys} to the provided or default API keys from \code{get_api_keys()}.
\item \strong{URL Assignment}: Sets \code{self$base_url} to the provided or default base URL from \code{get_base_url()}.
}
}

\subsection{API Endpoint}{

Not applicable (initialisation method).
}

\subsection{Usage}{

Creates an instance for accessing KuCoin Spot market data, with most methods being public except where authentication is noted.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/introduction#authentication}{KuCoin API Authentication}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Data Foundation}: Use as the primary market data source in your trading bot, feeding real-time and historical data into strategy engines.
\item \strong{Secure Setup}: Provide explicit \code{keys} for authenticated methods or rely on \code{get_api_keys()} for portability across environments.
\item \strong{Lifecycle}: Instantiate once and reuse across trading cycles, pairing with order management classes for a complete system.
}
}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-KucoinSpotMarketData-new}{\code{KucoinSpotMarketData$new()}}
\item \href{#method-KucoinSpotMarketData-get_announcements}{\code{KucoinSpotMarketData$get_announcements()}}
\item \href{#method-KucoinSpotMarketData-get_klines}{\code{KucoinSpotMarketData$get_klines()}}
\item \href{#method-KucoinSpotMarketData-get_currency}{\code{KucoinSpotMarketData$get_currency()}}
\item \href{#method-KucoinSpotMarketData-get_all_currencies}{\code{KucoinSpotMarketData$get_all_currencies()}}
\item \href{#method-KucoinSpotMarketData-get_symbol}{\code{KucoinSpotMarketData$get_symbol()}}
\item \href{#method-KucoinSpotMarketData-get_all_symbols}{\code{KucoinSpotMarketData$get_all_symbols()}}
\item \href{#method-KucoinSpotMarketData-get_ticker}{\code{KucoinSpotMarketData$get_ticker()}}
\item \href{#method-KucoinSpotMarketData-get_all_tickers}{\code{KucoinSpotMarketData$get_all_tickers()}}
\item \href{#method-KucoinSpotMarketData-get_trade_history}{\code{KucoinSpotMarketData$get_trade_history()}}
\item \href{#method-KucoinSpotMarketData-get_part_orderbook}{\code{KucoinSpotMarketData$get_part_orderbook()}}
\item \href{#method-KucoinSpotMarketData-get_full_orderbook}{\code{KucoinSpotMarketData$get_full_orderbook()}}
\item \href{#method-KucoinSpotMarketData-get_24hr_stats}{\code{KucoinSpotMarketData$get_24hr_stats()}}
\item \href{#method-KucoinSpotMarketData-get_market_list}{\code{KucoinSpotMarketData$get_market_list()}}
\item \href{#method-KucoinSpotMarketData-clone}{\code{KucoinSpotMarketData$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-new"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$new(keys = get_api_keys(), base_url = get_base_url())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{List containing API configuration parameters from \code{get_api_keys()}, including:
\itemize{
\item \code{api_key}: Character string; your KuCoin API key.
\item \code{api_secret}: Character string; your KuCoin API secret.
\item \code{api_passphrase}: Character string; your KuCoin API passphrase.
\item \code{key_version}: Character string; API key version (e.g., \code{"2"}).
Defaults to \code{get_api_keys()}.
}}

\item{\code{base_url}}{Character string representing the base URL for the API. Defaults to \code{get_base_url()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the \code{KucoinSpotMarketData} class.
Get Announcements
\subsection{Description}{

Retrieves paginated market announcements asynchronously via a GET request to \verb{/api/v3/announcements}.
Calls \code{get_announcements_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Query Setup}: Merges defaults with user \code{query} (e.g., \code{annType = "latest-announcements"}).
\item \strong{Pagination}: Fetches pages up to \code{max_pages} with \code{page_size} results each.
\item \strong{Response}: Aggregates into a \code{data.table} of announcement details.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v3/announcements}
}

\subsection{Usage}{

Utilised to monitor KuCoin news, such as new listings or maintenance updates.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-announcements}{KuCoin Get Announcements}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Event Detection}: Filter for \code{annType = "new-listings"} to detect new trading pairs, triggering symbol queries or strategy adjustments.
\item \strong{Scheduled Polling}: Run hourly with \code{max_pages = 1} to capture recent updates, logging critical announcements (e.g., delistings) for risk management.
\item \strong{Alerting}: Parse \code{annDesc} for keywords (e.g., "maintenance") to pause trading or notify users via your system’s alerting mechanism.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_announcements"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_announcements}{}}}
\subsection{Method \code{get_announcements()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_announcements(
  query = list(),
  page_size = 50,
  max_pages = Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{Named list; filters for announcements:
\itemize{
\item \code{annType} (character): Type (e.g., \code{"new-listings"}, \code{"maintenance-updates"}). Optional.
\item \code{lang} (character): Language (e.g., \code{"en_US"}). Optional.
\item \code{startTime} (integer): Start time (ms). Optional.
\item \code{endTime} (integer): End time (ms). Optional.
}}

\item{\code{page_size}}{Integer; results per page (default 50).}

\item{\code{max_pages}}{Numeric; max pages to fetch (default \code{Inf}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{annId} (integer): Announcement ID.
\item \code{annTitle} (character): Title.
\item \code{annType} (list): Types.
\item \code{annDesc} (character): Description.
\item \code{cTime} (integer): Release time (ms).
\item \code{language} (character): Language.
\item \code{annUrl} (character): Full URL.
\item Pagination fields: \code{currentPage}, \code{pageSize}, \code{totalNum}, \code{totalPage}.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"items": [\{"annId": 123, "annTitle": "New Listing", "annType": ["new-listings"], "annDesc": "BTC-USDT listed", "cTime": 1733049198863, "language": "en_US", "annUrl": "https://kucoin.com/news/123"\}]\}\}
}\if{html}{\out{</div>}}

Get Klines
}

\subsection{Description}{

Retrieves historical klines (candlestick) data asynchronously via a GET request to \verb{/api/v1/market/candes},
segmenting requests to handle the 1500-candle limit. Calls \code{get_klines_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Segmentation}: Splits time range into segments based on \code{freq} and 1500-candle limit.
\item \strong{Fetching}: Retrieves segments concurrently or sequentially based on \code{concurrent}.
\item \strong{Aggregation}: Combines results, removes duplicates, and orders by time.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/candles}
}

\subsection{Usage}{

Utilised for historical price and volume analysis, supporting various intervals.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-klines}{KuCoin Get Klines}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Technical Analysis}: Fetch daily klines (\code{freq = "1day"}) for moving averages or RSI, feeding into strategy signals.
\item \strong{Backtesting}: Use with large time ranges (e.g., 1 year) and \code{concurrent = FALSE} to build datasets, ensuring rate limit compliance.
\item \strong{Real-Time Feed}: Set \code{from} to recent past (e.g., 1 hour ago) and poll frequently, caching results to reduce API load.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_klines"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_klines}{}}}
\subsection{Method \code{get_klines()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_klines(
  symbol,
  freq = "15min",
  from = lubridate::now() - lubridate::dhours(24),
  to = lubridate::now(),
  concurrent = TRUE,
  delay_ms = 0,
  retries = 3
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading pair (e.g., "BTC-USDT"). Required.}

\item{\code{freq}}{Character string; interval (e.g., "15min"). Options: "1min", "3min", "5min", "15min", "30min", "1hour", "2hour", "4hour", "6hour", "8hour", "12hour", "1day", "1week", "1month". Default "15min".}

\item{\code{from}}{POSIXct; start time (default 24 hours ago).}

\item{\code{to}}{POSIXct; end time (default now).}

\item{\code{concurrent}}{Logical; fetch segments concurrently (default TRUE). Caution: May hit rate limits.}

\item{\code{delay_ms}}{Numeric; delay between requests (ms, default 0).}

\item{\code{retries}}{Integer; retry attempts per segment (default 3).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{datetime} (POSIXct): Timestamp.
\item \code{timestamp} (numeric): Time (seconds).
\item \code{open} (numeric): Opening price.
\item \code{close} (numeric): Closing price.
\item \code{high} (numeric): High price.
\item \code{low} (numeric): Low price.
\item \code{volume} (numeric): Volume.
\item \code{turnover} (numeric): Turnover.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": [["1698777600", "30000", "30500", "31000", "29500", "10", "300000"]]\}
}\if{html}{\out{</div>}}

Get Currency
}

\subsection{Description}{

Retrieves details for a specific currency asynchronously via a GET request to \verb{/api/v3/currencies/\{currency\}}.
Calls \code{get_currency_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Query}: Includes optional \code{chain} parameter.
\item \strong{Request}: Fetches currency data.
\item \strong{Response}: Combines summary and chain-specific details into a \code{data.table}.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v3/currencies/\{currency\}}
}

\subsection{Usage}{

Utilised to fetch currency metadata, such as precision and chain support.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-currency}{KuCoin Get Currency}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Configuration}: Use \code{precision} to format order sizes correctly in your bot, avoiding rejection.
\item \strong{Chain Selection}: Specify \code{chain} (e.g., "ERC20") to verify deposit/withdrawal support for multi-chain assets.
\item \strong{Validation}: Check \code{isMarginEnabled} to enable/disable margin strategies per currency dynamically.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_currency"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_currency}{}}}
\subsection{Method \code{get_currency()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_currency(currency, chain = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{currency}}{Character string; currency code (e.g., "BTC"). Required.}

\item{\code{chain}}{Character string; specific chain (e.g., "ERC20"). Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{currency} (character): Code.
\item \code{name} (character): Short name.
\item \code{fullName} (character): Full name.
\item \code{precision} (integer): Decimals.
\item \code{chainName} (character): Blockchain name (if chain-specific).
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"currency": "BTC", "name": "BTC", "fullName": "Bitcoin", "precision": 8, "chains": [\{"chainName": "BTC"\}]\}\}
}\if{html}{\out{</div>}}

Get All Currencies
}

\subsection{Description}{

Retrieves details for all available currencies asynchronously via a GET request to \verb{/api/v3/currencies}.
Calls \code{get_all_currencies_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches all currency data.
\item \strong{Response}: Combines summary and chain details into a \code{data.table}.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v3/currencies}
}

\subsection{Usage}{

Utilised to obtain a comprehensive currency list for market configuration.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-currencies}{KuCoin Get All Currencies}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Asset Discovery}: Fetch periodically to update your system’s supported assets, triggering new trading pair setups.
\item \strong{Fee Planning}: Use chain-specific fields (e.g., \code{withdrawFeeRate}) to calculate transaction costs in strategy logic.
\item \strong{Portfolio Check}: Filter by \code{isMarginEnabled} to identify margin-eligible assets for leverage strategies.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_all_currencies"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_all_currencies}{}}}
\subsection{Method \code{get_all_currencies()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_all_currencies()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{currency} (character): Code.
\item \code{name} (character): Short name.
\item \code{fullName} (character): Full name.
\item \code{precision} (integer): Decimals.
\item \code{chainName} (character): Blockchain name.
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": [\{"currency": "BTC", "name": "BTC", "fullName": "Bitcoin", "precision": 8, "chains": [\{"chainName": "BTC"\}]\}]\}
}\if{html}{\out{</div>}}

Get Symbol
}

\subsection{Description}{

Retrieves details for a specific trading symbol asynchronously via a GET request to \verb{/api/v2/symbols/\{symbol\}}.
Calls \code{get_symbol_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches symbol data.
\item \strong{Response}: Returns metadata as a \code{data.table}.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v2/symbols/\{symbol\}}
}

\subsection{Usage}{

Utilised to fetch trading pair metadata, such as increments and limits.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-symbols}{KuCoin Get Symbol}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Order Precision}: Use \code{priceIncrement} and \code{baseIncrement} to format orders correctly, ensuring API acceptance.
\item \strong{Trading Status}: Check \code{enableTrading} to confirm pair availability before placing orders.
\item \strong{Fee Adjustment}: Apply \code{makerFeeCoefficient} and \code{takerFeeCoefficient} to calculate precise trading costs.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_symbol"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_symbol}{}}}
\subsection{Method \code{get_symbol()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_symbol(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., "BTC-USDT"). Required.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{symbol} (character): Symbol code.
\item \code{baseCurrency} (character): Base currency.
\item \code{quoteCurrency} (character): Quote currency.
\item \code{priceIncrement} (character): Price step.
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"symbol": "BTC-USDT", "baseCurrency": "BTC", "quoteCurrency": "USDT", "priceIncrement": "0.01"\}\}
}\if{html}{\out{</div>}}

Get All Symbols
}

\subsection{Description}{

Retrieves all trading symbols asynchronously via a GET request to \verb{/api/v2/symbols}, optionally filtered by market.
Calls \code{get_all_symbols_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches symbol list with optional \code{market} filter.
\item \strong{Response}: Returns a \code{data.table} of all symbols.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v2/symbols}
}

\subsection{Usage}{

Utilised to explore available trading pairs or filter by market.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-symbols}{KuCoin Get All Symbols}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Market Scanning}: Filter by \code{market} (e.g., "USDS") to identify pairs for specific strategies, updating trading lists dynamically.
\item \strong{Pair Validation}: Use \code{baseMinSize} and \code{quoteMaxSize} to enforce order size limits in your bot.
\item \strong{Periodic Sync}: Run daily to refresh symbol availability, logging new or disabled pairs (\code{enableTrading}).
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_all_symbols"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_all_symbols}{}}}
\subsection{Method \code{get_all_symbols()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_all_symbols(market = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{market}}{Character string; trading market (e.g., "ALTS"). Optional.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{symbol} (character): Symbol code.
\item \code{baseCurrency} (character): Base currency.
\item \code{quoteCurrency} (character): Quote currency.
\item \code{market} (character): Market identifier.
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": [\{"symbol": "BTC-USDT", "baseCurrency": "BTC", "quoteCurrency": "USDT", "market": "USDS"\}]\}
}\if{html}{\out{</div>}}

Get Ticker
}

\subsection{Description}{

Retrieves Level 1 ticker data asynchronously via a GET request to \verb{/api/v1/market/orderbook/level1}.
Calls \code{get_ticker_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches real-time ticker data for a symbol.
\item \strong{Response}: Returns a \code{data.table} with bid/ask and last price.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/orderbook/level1}
}

\subsection{Usage}{

Utilised for real-time price and liquidity monitoring.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-ticker}{KuCoin Get Ticker}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Price Feed}: Poll every few seconds to update live price (\code{price}) and spread (\code{bestAsk - bestBid}) for entry/exit decisions.
\item \strong{Liquidity Check}: Use \code{bestBidSize} and \code{bestAskSize} to assess market depth before placing large orders.
\item \strong{Latency Monitoring}: Track \code{timestamp} latency to ensure data freshness, alerting if delays exceed thresholds.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_ticker"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_ticker}{}}}
\subsection{Method \code{get_ticker()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_ticker(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., "BTC-USDT"). Required.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{symbol} (character): Symbol.
\item \code{timestamp} (POSIXct): Snapshot time.
\item \code{time_ms} (integer): Time (ms).
\item \code{price} (character): Last price.
\item \code{bestBid} (character): Best bid.
\item \code{bestAsk} (character): Best ask.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"time": 1733049198863, "price": "30000", "bestBid": "29990", "bestAsk": "30010"\}\}
}\if{html}{\out{</div>}}

Get All Tickers
}

\subsection{Description}{

Retrieves ticker data for all trading pairs asynchronously via a GET request to \verb{/api/v1/market/allTickers}.
Calls \code{get_all_tickers_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches a snapshot of all tickers.
\item \strong{Response}: Returns a \code{data.table} with market-wide data.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/allTickers}
}

\subsection{Usage}{

Utilised for a broad market overview, including 24-hour metrics.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-tickers}{KuCoin Get All Tickers}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Market Screening}: Filter by \code{changeRate} to identify trending pairs for momentum strategies, updating every minute.
\item \strong{Volume Analysis}: Use \code{volValue} to prioritize high-liquidity pairs, avoiding low-volume markets.
\item \strong{Snapshot Sync}: Cache results and compare \code{globalTime_datetime} to detect API delays or outages.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_all_tickers"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_all_tickers}{}}}
\subsection{Method \code{get_all_tickers()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_all_tickers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{symbol} (character): Symbol.
\item \code{buy} (character): Best bid.
\item \code{sell} (character): Best ask.
\item \code{vol} (character): 24-hour volume.
\item \code{globalTime_datetime} (POSIXct): Snapshot time.
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"time": 1733049198863, "ticker": [\{"symbol": "BTC-USDT", "buy": "29990", "sell": "30010"\}]\}\}
}\if{html}{\out{</div>}}

Get Trade History
}

\subsection{Description}{

Retrieves the most recent 100 trades for a symbol asynchronously via a GET request to \verb{/api/v1/market/histories}.
Calls \code{get_trade_history_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches recent trade records.
\item \strong{Response}: Returns a \code{data.table} with trade details.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/histories}
}

\subsection{Usage}{

Utilised to track recent market trades for a symbol.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-trade-history}{KuCoin Get Trade History}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Momentum Tracking}: Analyze \code{side} and \code{price} trends to detect buying/selling pressure, triggering scalping trades.
\item \strong{Execution Timing}: Use \code{timestamp} to measure trade frequency, adjusting order timing in high-frequency strategies.
\item \strong{Volume Spike}: Sum \code{size} over recent trades to spot volume spikes, signaling potential breakouts.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_trade_history"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_trade_history}{}}}
\subsection{Method \code{get_trade_history()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_trade_history(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., "BTC-USDT"). Required.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{sequence} (character): Trade sequence.
\item \code{price} (character): Price.
\item \code{size} (character): Amount.
\item \code{side} (character): "buy" or "sell".
\item \code{timestamp} (POSIXct): Trade time.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": [\{"sequence": "123", "price": "30000", "size": "0.1", "side": "buy", "time": 1733049198863000000\}]\}
}\if{html}{\out{</div>}}

Get Partial Orderbook
}

\subsection{Description}{

Retrieves partial orderbook data (20 or 100 levels) asynchronously via a GET request to \verb{/api/v1/market/orderbook/level2_\{size\}}.
Calls \code{get_part_orderbook_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches orderbook snapshot with specified depth.
\item \strong{Response}: Returns a \code{data.table} of bids and asks.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/orderbook/level2_\{size\}}
}

\subsection{Usage}{

Utilised for a quick orderbook snapshot without authentication.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-part-orderbook}{KuCoin Get Part Orderbook}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Liquidity Assessment}: Use \code{size} at \code{price} levels to gauge depth for slippage estimation, opting for \code{size = 100} in volatile markets.
\item \strong{Spread Trading}: Calculate bid-ask spread (\code{max(bid) - min(ask)}) to identify arbitrage opportunities, polling frequently.
\item \strong{Order Placement}: Adjust limit order prices based on top \code{price} levels to compete effectively in the book.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_part_orderbook"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_part_orderbook}{}}}
\subsection{Method \code{get_part_orderbook()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_part_orderbook(symbol, size = 20)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., "BTC-USDT"). Required.}

\item{\code{size}}{Integer; depth (20 or 100, default 20).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{timestamp} (POSIXct): Snapshot time.
\item \code{sequence} (character): Sequence number.
\item \code{side} (character): "bid" or "ask".
\item \code{price} (character): Price level.
\item \code{size} (character): Size at price.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"time": 1733049198863, "bids": [["29990", "0.5"]], "asks": [["30010", "0.3"]]\}\}
}\if{html}{\out{</div>}}

Get Full Orderbook
}

\subsection{Description}{

Retrieves full orderbook data asynchronously via a GET request to \verb{/api/v3/market/orderbook/level2}, requiring authentication.
Calls \code{get_full_orderbook_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches complete orderbook with authentication.
\item \strong{Response}: Returns a \code{data.table} of all bids and asks.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v3/market/orderbook/level2}
}

\subsection{Usage}{

Utilised for detailed orderbook analysis with authenticated access.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-full-orderbook}{KuCoin Get Full Orderbook}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Depth Analysis}: Aggregate \code{size} by \code{price} to assess total liquidity, optimizing large order placement.
\item \strong{HFT Strategies}: Poll frequently (e.g., every second) with \code{sequence} tracking to detect book changes, enabling rapid arbitrage.
\item \strong{Risk Management}: Monitor deep levels to anticipate price walls, adjusting stop-loss triggers accordingly.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_full_orderbook"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_full_orderbook}{}}}
\subsection{Method \code{get_full_orderbook()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_full_orderbook(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., "BTC-USDT"). Required.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{timestamp} (POSIXct): Snapshot time.
\item \code{sequence} (character): Sequence number.
\item \code{side} (character): "bid" or "ask".
\item \code{price} (character): Price level.
\item \code{size} (character): Size at price.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"time": 1733049198863, "bids": [["29990", "0.5"]], "asks": [["30010", "0.3"]]\}\}
}\if{html}{\out{</div>}}

Get 24-Hour Stats
}

\subsection{Description}{

Retrieves 24-hour market statistics asynchronously via a GET request to \verb{/api/v1/market/stats}.
Calls \code{get_24hr_stats_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches 24-hour stats for a symbol.
\item \strong{Response}: Returns a \code{data.table} with volume and price metrics.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/market/stats}
}

\subsection{Usage}{

Utilised for a 24-hour market performance snapshot.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-24hr-stats}{KuCoin Get 24hr Stats}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Volatility Check}: Use \code{changeRate} to identify volatile pairs for breakout strategies, polling hourly.
\item \strong{Volume Filter}: Filter pairs with \code{volValue} above a threshold for liquidity-focused trading.
\item \strong{Trend Confirmation}: Compare \code{last} with \code{averagePrice} to confirm short-term trends, adjusting positions.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_24hr_stats"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_24hr_stats}{}}}
\subsection{Method \code{get_24hr_stats()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_24hr_stats(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., "BTC-USDT"). Required.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} with:
\itemize{
\item \code{timestamp} (POSIXct): Snapshot time.
\item \code{symbol} (character): Symbol.
\item \code{buy} (character): Best bid.
\item \code{sell} (character): Best ask.
\item \code{vol} (character): 24-hour volume.
\item Full schema in implementation docs.
}
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": \{"time": 1733049198863, "symbol": "BTC-USDT", "vol": "100", "last": "30000"\}\}
}\if{html}{\out{</div>}}

Get Market List
}

\subsection{Description}{

Retrieves a list of trading markets asynchronously via a GET request to \verb{/api/v1/markets}.
Calls \code{get_market_list_impl}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Request}: Fetches all market identifiers.
\item \strong{Response}: Returns a character vector of markets.
}
}

\subsection{API Endpoint}{

\verb{GET https://api.kucoin.com/api/v1/markets}
}

\subsection{Usage}{

Utilised to identify available markets for filtering symbols.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-market-list}{KuCoin Get Market List}
}

\subsection{Automated Trading Usage}{
\itemize{
\item \strong{Market Selection}: Use as a filter for \code{get_all_symbols} to focus strategies on specific markets (e.g., "USDS").
\item \strong{Portfolio Diversification}: Iterate over markets to ensure coverage across asset classes, automating pair selection.
\item \strong{Static Cache}: Fetch once daily and cache, as market lists change infrequently, reducing API calls.
}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_market_list"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_market_list}{}}}
\subsection{Method \code{get_market_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_market_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Promise resolving to a character vector of market IDs (e.g., "USDS", "TON").
\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{"code": "200000", "data": ["USDS", "TON"]\}
}\if{html}{\out{</div>}}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-clone"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
