% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KucoinSpotMarketData.R
\name{KucoinSpotMarketData}
\alias{KucoinSpotMarketData}
\title{KucoinSpotMarketData Class for KuCoin Spot Market Data Endpoints}
\value{
Not applicable (class definition; see individual methods for return values).
}
\description{
The \code{KucoinSpotMarketData} class provides an asynchronous interface for interacting with KuCoin's spot market data
API endpoints. It leverages the \code{coro} package for non-blocking HTTP requests, returning promises that typically
resolve to \code{data.table} objects or character vectors. This class supports retrieving market announcements, historical
klines data, currency details, trading symbols, ticker information, trade history, orderbook data, 24-hour statistics,
and market lists.
}
\details{
\subsection{Workflow Overview}{

Not applicable (class definition overview).
}

\subsection{API Endpoint}{

Not applicable (class-level documentation; see individual methods).
}

\subsection{Usage}{

Utilised by users to access KuCoin spot market data programmatically. The class is initialised with API credentials,
automatically loaded via \code{get_api_keys()} if not provided, and a base URL from \code{get_base_url()}. Most methods use
public endpoints, except \code{get_full_orderbook()} which requires authentication. For detailed endpoint information and
response schemas, refer to the official \href{https://www.kucoin.com/docs-new}{KuCoin API Documentation}.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new}{KuCoin API Documentation}
}
}
\section{Methods}{

\itemize{
\item \strong{initialize(keys, base_url):} Initialises the object with API credentials and the base URL.
\item \strong{get_announcements(query, page_size, max_pages):} Retrieves paginated market announcements.
\item \strong{get_klines(symbol, freq, from, to, concurrent, delay_ms, retries):} Retrieves historical klines data with segmentation.
\item \strong{get_currency(currency, chain):} Retrieves details for a specific currency.
\item \strong{get_all_currencies():} Retrieves details for all available currencies.
\item \strong{get_symbol(symbol):} Retrieves details for a specific trading symbol.
\item \strong{get_all_symbols(market):} Retrieves details for all trading symbols, optionally filtered by market.
\item \strong{get_ticker(symbol):} Retrieves Level 1 ticker data for a trading symbol.
\item \strong{get_all_tickers():} Retrieves ticker data for all trading pairs.
\item \strong{get_trade_history(symbol):} Retrieves recent trade history for a trading symbol.
\item \strong{get_part_orderbook(symbol, size):} Retrieves partial orderbook data (20 or 100 levels).
\item \strong{get_full_orderbook(symbol):} Retrieves full orderbook data (authenticated).
\item \strong{get_24hr_stats(symbol):} Retrieves 24-hour market statistics for a trading symbol.
\item \strong{get_market_list():} Retrieves a list of all available trading markets.
}
}

\examples{
\dontrun{
# Comprehensive example demonstrating all methods
main_async <- coro::async(function() {
  # Initialise the class
  market <- KucoinSpotMarketData$new()

  # Get announcements
  announcements <- await(market$get_announcements(list(annType = "new-listings")))
  print("Announcements:")
  print(announcements)

  # Get klines data
  klines <- await(market$get_klines("BTC-USDT", "1hour", lubridate::now() - 48 * 3600, lubridate::now()))
  print("Klines:")
  print(klines)

  # Get currency details
  btc <- await(market$get_currency("BTC", "ERC20"))
  print("BTC (ERC20):")
  print(btc)

  # Get all currencies
  currencies <- await(market$get_all_currencies())
  print("All Currencies:")
  print(currencies)

  # Get symbol details
  symbol <- await(market$get_symbol("BTC-USDT"))
  print("BTC-USDT Symbol:")
  print(symbol)

  # Get all symbols for a market
  markets <- await(market$get_market_list())
  if (length(markets) > 0) {
    alts_symbols <- await(market$get_all_symbols(markets[1]))
    print(paste("Symbols for", markets[1], ":"))
    print(alts_symbols)
  }

  # Get ticker
  ticker <- await(market$get_ticker("BTC-USDT"))
  print("BTC-USDT Ticker:")
  print(ticker)

  # Get all tickers
  all_tickers <- await(market$get_all_tickers())
  print("All Tickers:")
  print(all_tickers)

  # Get trade history
  trades <- await(market$get_trade_history("BTC-USDT"))
  print("BTC-USDT Trade History:")
  print(trades)

  # Get partial orderbook
  part_orderbook <- await(market$get_part_orderbook("BTC-USDT", 20))
  print("Partial Orderbook (20 levels):")
  print(part_orderbook)

  # Get full orderbook (authenticated)
  full_orderbook <- await(market$get_full_orderbook("BTC-USDT"))
  print("Full Orderbook:")
  print(full_orderbook)

  # Get 24-hour stats
  stats <- await(market$get_24hr_stats("BTC-USDT"))
  print("BTC-USDT 24hr Stats:")
  print(stats)

  # Get market list
  market_list <- await(market$get_market_list())
  print("Market List:")
  print(market_list)
})
main_async()
while (!later::loop_empty()) later::run_now()
}


## ------------------------------------------------
## Method `KucoinSpotMarketData$new`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  ticker <- await(market$get_ticker("BTC-USDT"))
  print(ticker)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Announcements

### Description
Retrieves paginated market announcements from the KuCoin API asynchronously, aggregating results into a `data.table`.
This includes updates, promotions, and other news. This method calls `get_announcements_impl`.

### Workflow Overview
1. **Query Construction**: Merges defaults (`currentPage = 1`, `pageSize = 50`, `annType = "latest-announcements"`, `lang = "en_US"`) with `query`.
2. **URL Assembly**: Combines `base_url` with `/api/v3/announcements` and the query string.
3. **Page Fetching**: Uses an async helper to send GET requests with a 10-second timeout.
4. **Pagination**: Fetches all pages up to `max_pages` using `auto_paginate`, extracting `"items"`.
5. **Aggregation**: Combines results into a `data.table` with `data.table::rbindlist()`.

### API Endpoint
`GET https://api.kucoin.com/api/v3/announcements`

### Usage
Utilised by users to monitor market news and developments, correlating with other market data like tickers or stats.

### Official Documentation
[KuCoin Get Announcements](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-announcements)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_announcements`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  announcements <- await(market$get_announcements(list(annType = "activities", page_size = 20)))
  print(announcements)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Historical Klines Data

### Description
Retrieves historical candlestick (klines) data for a trading pair from the KuCoin API asynchronously, segmenting
requests to handle the 1500-candle limit per request. This method calls `get_klines_impl`.

### Workflow Overview
1. **Input Validation**: Converts `from` and `to` to POSIXct, ensures `from` < `to`.
2. **Frequency Conversion**: Translates `freq` to seconds using `frequency_to_seconds()`.
3. **Segmentation**: Splits the time range into segments with `split_time_range_by_candles()`.
4. **Segment Fetching**: Creates promises for each segment via `fetch_klines_segment()`.
5. **Execution Mode**: Fetches concurrently with `promises::promise_all()` if `concurrent = TRUE`, or sequentially.
6. **Aggregation**: Combines results, removes duplicates by `timestamp`, orders by `datetime`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/candles`

### Usage
Utilised by users to fetch historical price and volume data for analysis, with options for concurrent or sequential retrieval.

### Official Documentation
[KuCoin Get Klines](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-klines)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_klines`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  klines <- await(market$get_klines("BTC-USDT", "1hour", lubridate::now() - 48 * 3600, lubridate::now()))
  print(klines)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Currency Details

### Description
Retrieves detailed information for a specified currency from the KuCoin API asynchronously, including chain-specific
details for multi-chain currencies. This method calls `get_currency_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with optional `chain` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v3/currencies/`, `currency`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Splits `"data"` into summary and `chains` data, combines into a `data.table`.

### API Endpoint
`GET https://api.kucoin.com/api/v3/currencies/{currency}`

### Usage
Utilised by users to obtain currency metadata (e.g., precision, chain support) for trading or configuration purposes.

### Official Documentation
[KuCoin Get Currency](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-currency)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_currency`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  btc <- await(market$get_currency("BTC", "ERC20"))
  print(btc)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve All Currencies

### Description
Retrieves a list of all currencies available on KuCoin asynchronously, combining summary and chain-specific details
into a `data.table`. This method calls `get_all_currencies_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url` with `/api/v3/currencies`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
4. **Data Iteration**: Loops through currencies, extracting summary and chain data.
5. **Result Assembly**: Combines into a `data.table`, adding dummy chain columns if none exist.

### API Endpoint
`GET https://api.kucoin.com/api/v3/currencies`

### Usage
Utilised by users to fetch comprehensive currency details for market analysis or configuration.

### Official Documentation
[KuCoin Get All Currencies](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-currencies)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_all_currencies`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  currencies <- await(market$get_all_currencies())
  print(currencies)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Symbol Details

### Description
Retrieves detailed information for a specified trading symbol from the KuCoin API asynchronously. This method calls
`get_symbol_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url`, `/api/v2/symbols/`, and `symbol`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
4. **Data Conversion**: Converts `"data"` into a `data.table`.

### API Endpoint
`GET https://api.kucoin.com/api/v2/symbols/{symbol}`

### Usage
Utilised by users to fetch metadata for a specific trading symbol, such as price increments and trading limits.

### Official Documentation
[KuCoin Get Symbol](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-symbols)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_symbol`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  symbol <- await(market$get_symbol("BTC-USDT"))
  print(symbol)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve All Trading Symbols

### Description
Retrieves a list of all available trading symbols from the KuCoin API asynchronously, optionally filtered by market.
This method calls `get_all_symbols_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with optional `market` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v2/symbols`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts `"data"` into a `data.table`.

### API Endpoint
`GET https://api.kucoin.com/api/v2/symbols`

### Usage
Utilised by users to obtain a comprehensive list of trading symbols for market exploration or filtering.

### Official Documentation
[KuCoin Get All Symbols](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-symbols)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_all_symbols`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  symbols <- await(market$get_all_symbols("ALTS"))
  print(symbols)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Ticker Information

### Description
Retrieves Level 1 market data (ticker information) for a specified trading symbol from the KuCoin API asynchronously.
This method calls `get_ticker_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v1/market/orderbook/level1`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts to a `data.table`, adds `symbol`, renames `time` to `time_ms`, adds `timestamp`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/orderbook/level1`

### Usage
Utilised by users to obtain real-time ticker data (e.g., best bid/ask, last price) for a trading symbol.

### Official Documentation
[KuCoin Get Ticker](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-ticker)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_ticker`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  ticker <- await(market$get_ticker("BTC-USDT"))
  print(ticker)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve All Tickers

### Description
Retrieves market tickers for all trading pairs from the KuCoin API asynchronously, including 24-hour volume data.
This method calls `get_all_tickers_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url` with `/api/v1/market/allTickers`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
4. **Data Conversion**: Converts `"ticker"` array to a `data.table`, adds `globalTime_ms` and `globalTime_datetime`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/allTickers`

### Usage
Utilised by users to fetch a snapshot of market data across all trading pairs for monitoring or analysis.

### Official Documentation
[KuCoin Get All Tickers](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-tickers)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_all_tickers`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  tickers <- await(market$get_all_tickers())
  print(tickers)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Trade History

### Description
Retrieves the most recent 100 trade records for a specified trading symbol from the KuCoin API asynchronously.
This method calls `get_trade_history_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v1/market/histories`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts to a `data.table`, adds `timestamp` via `time_convert_from_kucoin()`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/histories`

### Usage
Utilised by users to fetch recent trade history for tracking market activity.

### Official Documentation
[KuCoin Get Trade History](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-trade-history)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_trade_history`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  trades <- await(market$get_trade_history("BTC-USDT"))
  print(trades)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Partial Orderbook

### Description
Retrieves partial orderbook depth data (20 or 100 levels) for a specified trading symbol from the KuCoin API
asynchronously. This method calls `get_part_orderbook_impl`.

### Workflow Overview
1. **Input Validation**: Ensures `size` is 20 or 100, aborts if invalid.
2. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
3. **URL Assembly**: Combines `base_url`, `/api/v1/market/orderbook/level2_{size}`, and query string.
4. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
5. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`, converts bids/asks.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/orderbook/level2_{size}`

### Usage
Utilised by users to obtain a snapshot of the orderbook, showing aggregated bid and ask levels.

### Official Documentation
[KuCoin Get Part OrderBook](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-part-orderbook)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_part_orderbook`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  orderbook <- await(market$get_part_orderbook("BTC-USDT", 100))
  print(orderbook)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Full Orderbook (Authenticated)

### Description
Retrieves full orderbook depth data for a specified trading symbol from the KuCoin API asynchronously, requiring
authentication. This method calls `get_full_orderbook_impl`.

### Workflow Overview
1. **Header Preparation**: Constructs authentication headers with `build_headers()` using `keys`.
2. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
3. **URL Assembly**: Combines `base_url`, `/api/v3/market/orderbook/level2`, and query string.
4. **HTTP Request**: Sends a GET request with headers and a 10-second timeout via `httr::GET()`.
5. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`, converts bids/asks.

### API Endpoint
`GET https://api.kucoin.com/api/v3/market/orderbook/level2`

### Usage
Utilised by users to fetch the complete orderbook, requiring API authentication for detailed depth data.

### Official Documentation
[KuCoin Get Full OrderBook](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-full-orderbook)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_full_orderbook`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  orderbook <- await(market$get_full_orderbook("BTC-USDT"))
  print(orderbook)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve 24-Hour Market Statistics

### Description
Retrieves 24-hour market statistics for a specified trading symbol from the KuCoin API asynchronously. This method
calls `get_24hr_stats_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v1/market/stats`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts to a `data.table`, renames `time` to `time_ms`, adds `timestamp`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/stats`

### Usage
Utilised by users to fetch a 24-hour snapshot of market statistics, including volume and price changes.

### Official Documentation
[KuCoin Get 24hr Stats](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-24hr-stats)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_24hr_stats`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  stats <- await(market$get_24hr_stats("BTC-USDT"))
  print(stats)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Market List

### Description
Retrieves a list of all available trading markets from the KuCoin API asynchronously as a character vector.
This method calls `get_market_list_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url` with `/api/v1/markets`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/markets`

### Usage
Utilised by users to identify available trading markets for filtering or querying market-specific data.

### Official Documentation
[KuCoin Get Market List](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-market-list)


## ------------------------------------------------
## Method `KucoinSpotMarketData$get_market_list`
## ------------------------------------------------

\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  markets <- await(market$get_market_list())
  print(markets)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{keys}}{Named list containing API keys for KuCoin (\code{api_key}, \code{api_secret}, \code{api_passphrase}, \code{key_version}).}

\item{\code{base_url}}{Character string representing the base URL for the KuCoin API.
Initialise a New KucoinSpotMarketData Object
\subsection{Description}{

Initialises a \code{KucoinSpotMarketData} object with API credentials and a base URL for accessing KuCoin spot market data
endpoints asynchronously. If not provided, credentials are sourced from \code{get_api_keys()} and the base URL from
\code{get_base_url()}.
}

\subsection{Workflow Overview}{
\enumerate{
\item \strong{Credential Assignment}: Sets \code{self$keys} to the provided or default API keys.
\item \strong{URL Assignment}: Sets \code{self$base_url} to the provided or default base URL.
}
}

\subsection{API Endpoint}{

Not applicable (initialisation method).
}

\subsection{Usage}{

Utilised to create an instance of the class with authentication details for market data retrieval.
}

\subsection{Official Documentation}{

\href{https://www.kucoin.com/docs-new/rest/introduction}{KuCoin API Authentication}
}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-KucoinSpotMarketData-new}{\code{KucoinSpotMarketData$new()}}
\item \href{#method-KucoinSpotMarketData-get_announcements}{\code{KucoinSpotMarketData$get_announcements()}}
\item \href{#method-KucoinSpotMarketData-get_klines}{\code{KucoinSpotMarketData$get_klines()}}
\item \href{#method-KucoinSpotMarketData-get_currency}{\code{KucoinSpotMarketData$get_currency()}}
\item \href{#method-KucoinSpotMarketData-get_all_currencies}{\code{KucoinSpotMarketData$get_all_currencies()}}
\item \href{#method-KucoinSpotMarketData-get_symbol}{\code{KucoinSpotMarketData$get_symbol()}}
\item \href{#method-KucoinSpotMarketData-get_all_symbols}{\code{KucoinSpotMarketData$get_all_symbols()}}
\item \href{#method-KucoinSpotMarketData-get_ticker}{\code{KucoinSpotMarketData$get_ticker()}}
\item \href{#method-KucoinSpotMarketData-get_all_tickers}{\code{KucoinSpotMarketData$get_all_tickers()}}
\item \href{#method-KucoinSpotMarketData-get_trade_history}{\code{KucoinSpotMarketData$get_trade_history()}}
\item \href{#method-KucoinSpotMarketData-get_part_orderbook}{\code{KucoinSpotMarketData$get_part_orderbook()}}
\item \href{#method-KucoinSpotMarketData-get_full_orderbook}{\code{KucoinSpotMarketData$get_full_orderbook()}}
\item \href{#method-KucoinSpotMarketData-get_24hr_stats}{\code{KucoinSpotMarketData$get_24hr_stats()}}
\item \href{#method-KucoinSpotMarketData-get_market_list}{\code{KucoinSpotMarketData$get_market_list()}}
\item \href{#method-KucoinSpotMarketData-clone}{\code{KucoinSpotMarketData$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-new"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$new(keys = get_api_keys(), base_url = get_base_url())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{Named list containing API configuration parameters from \code{get_api_keys()}, including:
\itemize{
\item \code{api_key}: Character string; your KuCoin API key.
\item \code{api_secret}: Character string; your KuCoin API secret.
\item \code{api_passphrase}: Character string; your KuCoin API passphrase.
\item \code{key_version}: Character string; API key version (e.g., \code{"2"}).
Defaults to \code{get_api_keys()}.
}}

\item{\code{base_url}}{Character string representing the base URL for the API. Defaults to \code{get_base_url()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the \code{KucoinSpotMarketData} class.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  ticker <- await(market$get_ticker("BTC-USDT"))
  print(ticker)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Announcements

### Description
Retrieves paginated market announcements from the KuCoin API asynchronously, aggregating results into a `data.table`.
This includes updates, promotions, and other news. This method calls `get_announcements_impl`.

### Workflow Overview
1. **Query Construction**: Merges defaults (`currentPage = 1`, `pageSize = 50`, `annType = "latest-announcements"`, `lang = "en_US"`) with `query`.
2. **URL Assembly**: Combines `base_url` with `/api/v3/announcements` and the query string.
3. **Page Fetching**: Uses an async helper to send GET requests with a 10-second timeout.
4. **Pagination**: Fetches all pages up to `max_pages` using `auto_paginate`, extracting `"items"`.
5. **Aggregation**: Combines results into a `data.table` with `data.table::rbindlist()`.

### API Endpoint
`GET https://api.kucoin.com/api/v3/announcements`

### Usage
Utilised by users to monitor market news and developments, correlating with other market data like tickers or stats.

### Official Documentation
[KuCoin Get Announcements](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-announcements)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_announcements"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_announcements}{}}}
\subsection{Method \code{get_announcements()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_announcements(
  query = list(),
  page_size = 50,
  max_pages = Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{Named list; additional query parameters to filter announcements:
\itemize{
\item \code{currentPage} (integer, optional): Page number to retrieve.
\item \code{pageSize} (integer, optional): Number of announcements per page.
\item \code{annType} (string, optional): Type (e.g., \code{"latest-announcements"}, \code{"activities"}, \code{"new-listings"}).
\item \code{lang} (string, optional): Language (e.g., \code{"en_US"}, \code{"zh_HK"}).
\item \code{startTime} (integer, optional): Start time in milliseconds.
\item \code{endTime} (integer, optional): End time in milliseconds.
}}

\item{\code{page_size}}{Integer; results per page (default 50).}

\item{\code{max_pages}}{Numeric; maximum pages to fetch (default \code{Inf} for all pages).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{annId} (integer): Unique announcement ID.
\item \code{annTitle} (character): Announcement title.
\item \code{annType} (list): List of announcement types.
\item \code{annDesc} (character): Announcement description.
\item \code{cTime} (integer): Release time in milliseconds.
\item \code{language} (character): Language of the announcement.
\item \code{annUrl} (character): URL to the full announcement.
\item \code{currentPage} (integer): Current page number.
\item \code{pageSize} (integer): Records per page.
\item \code{totalNum} (integer): Total announcements.
\item \code{totalPage} (integer): Total pages.
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  announcements <- await(market$get_announcements(list(annType = "activities", page_size = 20)))
  print(announcements)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Historical Klines Data

### Description
Retrieves historical candlestick (klines) data for a trading pair from the KuCoin API asynchronously, segmenting
requests to handle the 1500-candle limit per request. This method calls `get_klines_impl`.

### Workflow Overview
1. **Input Validation**: Converts `from` and `to` to POSIXct, ensures `from` < `to`.
2. **Frequency Conversion**: Translates `freq` to seconds using `frequency_to_seconds()`.
3. **Segmentation**: Splits the time range into segments with `split_time_range_by_candles()`.
4. **Segment Fetching**: Creates promises for each segment via `fetch_klines_segment()`.
5. **Execution Mode**: Fetches concurrently with `promises::promise_all()` if `concurrent = TRUE`, or sequentially.
6. **Aggregation**: Combines results, removes duplicates by `timestamp`, orders by `datetime`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/candles`

### Usage
Utilised by users to fetch historical price and volume data for analysis, with options for concurrent or sequential retrieval.

### Official Documentation
[KuCoin Get Klines](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-klines)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_klines"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_klines}{}}}
\subsection{Method \code{get_klines()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_klines(
  symbol,
  freq = "15min",
  from = lubridate::now() - 24 * 3600,
  to = lubridate::now(),
  concurrent = TRUE,
  delay_ms = 0,
  retries = 3
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading pair (e.g., \code{"BTC-USDT"}).}

\item{\code{freq}}{Character string; candlestick interval (e.g., \code{"15min"}). Allowed values: \code{"1min"}, \code{"3min"}, \code{"5min"}, \code{"15min"}, \code{"30min"}, \code{"1hour"}, \code{"2hour"}, \code{"4hour"}, \code{"6hour"}, \code{"8hour"}, \code{"12hour"}, \code{"1day"}, \code{"1week"}, \code{"1month"}. Default \code{"15min"}.}

\item{\code{from}}{POSIXct object; start time (default 24 hours ago).}

\item{\code{to}}{POSIXct object; end time (default now).}

\item{\code{concurrent}}{Logical; fetch segments concurrently (default \code{TRUE}). Caution: May trigger rate limits.}

\item{\code{delay_ms}}{Numeric; delay in milliseconds before each request (default 0).}

\item{\code{retries}}{Integer; retry attempts per segment (default 3).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{datetime} (POSIXct): Converted timestamp.
\item \code{timestamp} (numeric): Raw timestamp in seconds.
\item \code{open} (numeric): Opening price.
\item \code{close} (numeric): Closing price.
\item \code{high} (numeric): Highest price.
\item \code{low} (numeric): Lowest price.
\item \code{volume} (numeric): Trading volume.
\item \code{turnover} (numeric): Trading turnover.
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  klines <- await(market$get_klines("BTC-USDT", "1hour", lubridate::now() - 48 * 3600, lubridate::now()))
  print(klines)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Currency Details

### Description
Retrieves detailed information for a specified currency from the KuCoin API asynchronously, including chain-specific
details for multi-chain currencies. This method calls `get_currency_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with optional `chain` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v3/currencies/`, `currency`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Splits `"data"` into summary and `chains` data, combines into a `data.table`.

### API Endpoint
`GET https://api.kucoin.com/api/v3/currencies/{currency}`

### Usage
Utilised by users to obtain currency metadata (e.g., precision, chain support) for trading or configuration purposes.

### Official Documentation
[KuCoin Get Currency](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-currency)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_currency"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_currency}{}}}
\subsection{Method \code{get_currency()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_currency(currency, chain = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{currency}}{Character string; currency code (e.g., \code{"BTC"}, \code{"USDT"}).}

\item{\code{chain}}{Character string (optional); specific chain (e.g., \code{"ERC20"}, \code{"TRC20"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{currency} (character): Unique currency code.
\item \code{name} (character): Short name.
\item \code{fullName} (character): Full name.
\item \code{precision} (integer): Decimal places.
\item \code{confirms} (integer or NULL): Block confirmations.
\item \code{contractAddress} (character or NULL): Primary contract address.
\item \code{isMarginEnabled} (logical): Margin trading status.
\item \code{isDebitEnabled} (logical): Debit status.
\item Chain-specific fields (e.g., \code{chainName}, \code{withdrawalMinSize}).
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  btc <- await(market$get_currency("BTC", "ERC20"))
  print(btc)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve All Currencies

### Description
Retrieves a list of all currencies available on KuCoin asynchronously, combining summary and chain-specific details
into a `data.table`. This method calls `get_all_currencies_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url` with `/api/v3/currencies`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
4. **Data Iteration**: Loops through currencies, extracting summary and chain data.
5. **Result Assembly**: Combines into a `data.table`, adding dummy chain columns if none exist.

### API Endpoint
`GET https://api.kucoin.com/api/v3/currencies`

### Usage
Utilised by users to fetch comprehensive currency details for market analysis or configuration.

### Official Documentation
[KuCoin Get All Currencies](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-currencies)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_all_currencies"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_all_currencies}{}}}
\subsection{Method \code{get_all_currencies()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_all_currencies()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \strong{Summary Fields}:
\itemize{
\item \code{currency} (character): Unique currency code.
\item \code{name} (character): Short name.
\item \code{fullName} (character): Full name.
\item \code{precision} (integer): Decimal places.
\item \code{confirms} (integer or NA): Block confirmations.
\item \code{contractAddress} (character or NA): Primary contract address.
\item \code{isMarginEnabled} (logical): Margin trading status.
\item \code{isDebitEnabled} (logical): Debit status.
}
\item \strong{Chain-Specific Fields}:
\itemize{
\item \code{chainName} (character or NA): Blockchain name.
\item \code{withdrawalMinSize} (character or NA): Minimum withdrawal amount.
\item And more (see implementation docs).
}
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  currencies <- await(market$get_all_currencies())
  print(currencies)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Symbol Details

### Description
Retrieves detailed information for a specified trading symbol from the KuCoin API asynchronously. This method calls
`get_symbol_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url`, `/api/v2/symbols/`, and `symbol`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
4. **Data Conversion**: Converts `"data"` into a `data.table`.

### API Endpoint
`GET https://api.kucoin.com/api/v2/symbols/{symbol}`

### Usage
Utilised by users to fetch metadata for a specific trading symbol, such as price increments and trading limits.

### Official Documentation
[KuCoin Get Symbol](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-symbols)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_symbol"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_symbol}{}}}
\subsection{Method \code{get_symbol()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_symbol(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., \code{"BTC-USDT"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{symbol} (character): Unique trading symbol code.
\item \code{name} (character): Name of the trading pair.
\item \code{baseCurrency} (character): Base currency.
\item \code{quoteCurrency} (character): Quote currency.
\item \code{feeCurrency} (character): Currency for fees.
\item \code{market} (character): Trading market.
\item \code{baseMinSize} (character): Minimum order quantity.
\item And more (see implementation docs).
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  symbol <- await(market$get_symbol("BTC-USDT"))
  print(symbol)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve All Trading Symbols

### Description
Retrieves a list of all available trading symbols from the KuCoin API asynchronously, optionally filtered by market.
This method calls `get_all_symbols_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with optional `market` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v2/symbols`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts `"data"` into a `data.table`.

### API Endpoint
`GET https://api.kucoin.com/api/v2/symbols`

### Usage
Utilised by users to obtain a comprehensive list of trading symbols for market exploration or filtering.

### Official Documentation
[KuCoin Get All Symbols](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-symbols)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_all_symbols"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_all_symbols}{}}}
\subsection{Method \code{get_all_symbols()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_all_symbols(market = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{market}}{Character string (optional); trading market filter (e.g., \code{"ALTS"}, \code{"USDS"}, \code{"ETF"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{symbol} (character): Unique trading symbol code.
\item \code{name} (character): Name of the trading pair.
\item \code{baseCurrency} (character): Base currency.
\item \code{quoteCurrency} (character): Quote currency.
\item \code{feeCurrency} (character): Currency for fees.
\item \code{market} (character): Trading market.
\item \code{baseMinSize} (character): Minimum order quantity.
\item And more (see implementation docs).
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  symbols <- await(market$get_all_symbols("ALTS"))
  print(symbols)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Ticker Information

### Description
Retrieves Level 1 market data (ticker information) for a specified trading symbol from the KuCoin API asynchronously.
This method calls `get_ticker_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v1/market/orderbook/level1`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts to a `data.table`, adds `symbol`, renames `time` to `time_ms`, adds `timestamp`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/orderbook/level1`

### Usage
Utilised by users to obtain real-time ticker data (e.g., best bid/ask, last price) for a trading symbol.

### Official Documentation
[KuCoin Get Ticker](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-ticker)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_ticker"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_ticker}{}}}
\subsection{Method \code{get_ticker()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_ticker(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., \code{"BTC-USDT"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{symbol} (character): Trading symbol.
\item \code{timestamp} (POSIXct): Snapshot timestamp in UTC.
\item \code{time_ms} (integer): Snapshot timestamp in milliseconds.
\item \code{sequence} (character): Update sequence identifier.
\item \code{price} (character): Last traded price.
\item \code{size} (character): Last traded size.
\item \code{bestBid} (character): Best bid price.
\item \code{bestBidSize} (character): Best bid size.
\item \code{bestAsk} (character): Best ask price.
\item \code{bestAskSize} (character): Best ask size.
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  ticker <- await(market$get_ticker("BTC-USDT"))
  print(ticker)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve All Tickers

### Description
Retrieves market tickers for all trading pairs from the KuCoin API asynchronously, including 24-hour volume data.
This method calls `get_all_tickers_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url` with `/api/v1/market/allTickers`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
4. **Data Conversion**: Converts `"ticker"` array to a `data.table`, adds `globalTime_ms` and `globalTime_datetime`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/allTickers`

### Usage
Utilised by users to fetch a snapshot of market data across all trading pairs for monitoring or analysis.

### Official Documentation
[KuCoin Get All Tickers](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-all-tickers)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_all_tickers"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_all_tickers}{}}}
\subsection{Method \code{get_all_tickers()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_all_tickers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{symbol} (character): Trading symbol.
\item \code{symbolName} (character): Symbol name.
\item \code{buy} (character): Best bid price.
\item \code{bestBidSize} (character): Best bid size.
\item \code{sell} (character): Best ask price.
\item \code{bestAskSize} (character): Best ask size.
\item \code{changeRate} (character): 24-hour change rate.
\item And more (see implementation docs).
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  tickers <- await(market$get_all_tickers())
  print(tickers)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Trade History

### Description
Retrieves the most recent 100 trade records for a specified trading symbol from the KuCoin API asynchronously.
This method calls `get_trade_history_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v1/market/histories`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts to a `data.table`, adds `timestamp` via `time_convert_from_kucoin()`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/histories`

### Usage
Utilised by users to fetch recent trade history for tracking market activity.

### Official Documentation
[KuCoin Get Trade History](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-trade-history)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_trade_history"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_trade_history}{}}}
\subsection{Method \code{get_trade_history()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_trade_history(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., \code{"BTC-USDT"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{sequence} (character): Trade sequence number.
\item \code{price} (character): Filled price.
\item \code{size} (character): Filled amount.
\item \code{side} (character): Trade side (\code{"buy"} or \code{"sell"}).
\item \code{time} (integer): Trade timestamp in nanoseconds.
\item \code{timestamp} (POSIXct): Converted timestamp in UTC.
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  trades <- await(market$get_trade_history("BTC-USDT"))
  print(trades)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Partial Orderbook

### Description
Retrieves partial orderbook depth data (20 or 100 levels) for a specified trading symbol from the KuCoin API
asynchronously. This method calls `get_part_orderbook_impl`.

### Workflow Overview
1. **Input Validation**: Ensures `size` is 20 or 100, aborts if invalid.
2. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
3. **URL Assembly**: Combines `base_url`, `/api/v1/market/orderbook/level2_{size}`, and query string.
4. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
5. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`, converts bids/asks.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/orderbook/level2_{size}`

### Usage
Utilised by users to obtain a snapshot of the orderbook, showing aggregated bid and ask levels.

### Official Documentation
[KuCoin Get Part OrderBook](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-part-orderbook)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_part_orderbook"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_part_orderbook}{}}}
\subsection{Method \code{get_part_orderbook()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_part_orderbook(symbol, size = 20)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., \code{"BTC-USDT"}).}

\item{\code{size}}{Integer; orderbook depth (20 or 100, default 20).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{timestamp} (POSIXct): Snapshot timestamp in UTC.
\item \code{time_ms} (integer): Snapshot timestamp in milliseconds.
\item \code{sequence} (character): Orderbook update sequence.
\item \code{side} (character): Order side (\code{"bid"} or \code{"ask"}).
\item \code{price} (character): Aggregated price level.
\item \code{size} (character): Aggregated size.
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  orderbook <- await(market$get_part_orderbook("BTC-USDT", 100))
  print(orderbook)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Full Orderbook (Authenticated)

### Description
Retrieves full orderbook depth data for a specified trading symbol from the KuCoin API asynchronously, requiring
authentication. This method calls `get_full_orderbook_impl`.

### Workflow Overview
1. **Header Preparation**: Constructs authentication headers with `build_headers()` using `keys`.
2. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
3. **URL Assembly**: Combines `base_url`, `/api/v3/market/orderbook/level2`, and query string.
4. **HTTP Request**: Sends a GET request with headers and a 10-second timeout via `httr::GET()`.
5. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`, converts bids/asks.

### API Endpoint
`GET https://api.kucoin.com/api/v3/market/orderbook/level2`

### Usage
Utilised by users to fetch the complete orderbook, requiring API authentication for detailed depth data.

### Official Documentation
[KuCoin Get Full OrderBook](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-full-orderbook)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_full_orderbook"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_full_orderbook}{}}}
\subsection{Method \code{get_full_orderbook()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_full_orderbook(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., \code{"BTC-USDT"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{timestamp} (POSIXct): Snapshot timestamp in UTC.
\item \code{time_ms} (integer): Snapshot timestamp in milliseconds.
\item \code{sequence} (character): Orderbook update sequence.
\item \code{side} (character): Order side (\code{"bid"} or \code{"ask"}).
\item \code{price} (character): Aggregated price level.
\item \code{size} (character): Aggregated size.
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  orderbook <- await(market$get_full_orderbook("BTC-USDT"))
  print(orderbook)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve 24-Hour Market Statistics

### Description
Retrieves 24-hour market statistics for a specified trading symbol from the KuCoin API asynchronously. This method
calls `get_24hr_stats_impl`.

### Workflow Overview
1. **Query Construction**: Builds a query string with `symbol` using `build_query()`.
2. **URL Assembly**: Combines `base_url`, `/api/v1/market/stats`, and query string.
3. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
4. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.
5. **Data Conversion**: Converts to a `data.table`, renames `time` to `time_ms`, adds `timestamp`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/market/stats`

### Usage
Utilised by users to fetch a 24-hour snapshot of market statistics, including volume and price changes.

### Official Documentation
[KuCoin Get 24hr Stats](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-24hr-stats)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_24hr_stats"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_24hr_stats}{}}}
\subsection{Method \code{get_24hr_stats()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_24hr_stats(symbol)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{symbol}}{Character string; trading symbol (e.g., \code{"BTC-USDT"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Promise resolving to a \code{data.table} containing:
\itemize{
\item \code{timestamp} (POSIXct): Snapshot timestamp in UTC.
\item \code{time_ms} (integer): Snapshot timestamp in milliseconds.
\item \code{symbol} (character): Trading symbol.
\item \code{buy} (character): Best bid price.
\item \code{sell} (character): Best ask price.
\item \code{changeRate} (character): 24-hour change rate.
\item And more (see implementation docs).
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  stats <- await(market$get_24hr_stats("BTC-USDT"))
  print(stats)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
Retrieve Market List

### Description
Retrieves a list of all available trading markets from the KuCoin API asynchronously as a character vector.
This method calls `get_market_list_impl`.

### Workflow Overview
1. **URL Assembly**: Combines `base_url` with `/api/v1/markets`.
2. **HTTP Request**: Sends a GET request with a 10-second timeout via `httr::GET()`.
3. **Response Processing**: Validates with `process_kucoin_response()`, extracts `"data"`.

### API Endpoint
`GET https://api.kucoin.com/api/v1/markets`

### Usage
Utilised by users to identify available trading markets for filtering or querying market-specific data.

### Official Documentation
[KuCoin Get Market List](https://www.kucoin.com/docs-new/rest/spot-trading/market-data/get-market-list)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-get_market_list"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-get_market_list}{}}}
\subsection{Method \code{get_market_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$get_market_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Promise resolving to a character vector of market identifiers (e.g., \code{"USDS"}, \code{"TON"}).
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
market <- KucoinSpotMarketData$new()
main_async <- coro::async(function() {
  markets <- await(market$get_market_list())
  print(markets)
})
main_async()
while (!later::loop_empty()) later::run_now()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KucoinSpotMarketData-clone"></a>}}
\if{latex}{\out{\hypertarget{method-KucoinSpotMarketData-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KucoinSpotMarketData$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
