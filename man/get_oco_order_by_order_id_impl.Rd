% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_oco.R
\name{get_oco_order_by_order_id_impl}
\alias{get_oco_order_by_order_id_impl}
\title{Get OCO Order By OrderId (Implementation)}
\usage{
get_oco_order_by_order_id_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  orderId,
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{orderId}{Character string; the unique order ID to retrieve (e.g., "674c3b6e688dea0007c7bab2"). Required.}
}
\value{
Promise resolving to a \code{data.table} with one row containing:
\itemize{
\item \code{orderId} (character): Unique order ID generated by the KuCoin system.
\item \code{symbol} (character): Trading pair symbol (e.g., "BTC-USDT").
\item \code{clientOid} (character): Client-assigned order ID.
\item \code{orderTime} (integer): Order placement time in milliseconds.
\item \code{status} (character): Order status ("NEW", "DONE", "TRIGGERED", "CANCELED").
}
}
\description{
Retrieves basic information about an OCO order using its system-generated order ID (\code{orderId}) from the KuCoin Spot trading system asynchronously by sending a GET request to the \verb{/api/v3/oco/order/\{orderId\}} endpoint.
}
\details{
\subsection{What is an OCO Order?}{

An OCO order combines a limit order (e.g., to take profits) with a stop-limit order (e.g., to limit losses), canceling one when the other executes. Retrieving this info is useful for:
\itemize{
\item \strong{Status Monitoring}: Check if the order is "NEW", "TRIGGERED", or "CANCELED" to assess its current state.
\item \strong{Trade Review}: Confirm order details like symbol and placement time match your strategy.
\item \strong{Decision Making}: Use status to decide whether to adjust or cancel (e.g., if still "NEW" during a trend shift).
For example, checking an OCO order placed at $50,000 for BTC might show itâ€™s still "NEW", prompting a tighter stop if volatility rises.
}
}

\subsection{Description}{

This function fetches basic OCO order details (\code{orderId}, \code{symbol}, \code{clientOid}, \code{orderTime}, \code{status}) and returns them in a \code{data.table}.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures \code{orderId} is a non-empty string.
\item \strong{Request Construction}: Constructs the endpoint URL by embedding \code{orderId} as a path parameter.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the GET method and endpoint.
\item \strong{API Request}: Sends a GET request to the KuCoin API with a 3-second timeout via \code{httr::GET}.
\item \strong{Response Processing}: Parses the response, confirms success ("200000"), and converts the \code{data} object to a \code{data.table}.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{GET https://api.kucoin.com/api/v3/oco/order/\{orderId\}}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: General
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 2
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: getOcoOrderByOrderId
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/get-oco-order-by-orderld}{KuCoin Get OCO Order By OrderId}
}
}

\subsection{Request}{
\subsection{Path Parameters}{
\itemize{
\item \code{orderId}: String (required) - The unique order ID generated by the trading system (e.g., "674c3b6e688dea0007c7bab2").
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request GET 'https://api.kucoin.com/api/v3/oco/order/674c3b6e688dea0007c7bab2'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Object (required) - Contains:
\itemize{
\item \code{symbol}: String (required) - Trading pair symbol.
\item \code{clientOid}: String (required) - Client-assigned order ID.
\item \code{orderId}: String (required) - System-generated order ID.
\item \code{orderTime}: Integer\if{html}{\out{<int64>}} (required) - Order placement time in milliseconds.
\item \code{status}: Enum\if{html}{\out{<String>}} (required) - Order status: "NEW", "DONE", "TRIGGERED", "CANCELED".
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "orderId": "674c3b6e688dea0007c7bab2",
    "symbol": "BTC-USDT",
    "clientOid": "5c52e1203aa6f37f1e493fb",
    "orderTime": 1733049198863,
    "status": "NEW"
  \}
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Retrieve OCO order by orderId
  oco_order <- await(get_oco_order_by_order_id_impl(
    orderId = "674c3b6e688dea0007c7bab2"
  ))
  print(oco_order)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
