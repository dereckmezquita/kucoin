% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impl_spottrading_orders_stop.R
\name{cancel_stop_order_batch_impl}
\alias{cancel_stop_order_batch_impl}
\title{Batch Cancel Stop Orders (Implementation)}
\usage{
cancel_stop_order_batch_impl(
  keys = get_api_keys(),
  base_url = get_base_url(),
  query = list(),
  .__coro_env_parent__ = <environment>
)
}
\arguments{
\item{keys}{List; API configuration parameters from \code{get_api_keys()}. Defaults to \code{get_api_keys()}.}

\item{base_url}{Character string; base URL for the KuCoin API. Defaults to \code{get_base_url()}.}

\item{query}{Named list; optional query parameters for filtering (e.g., \code{list(symbol = "ETH-BTC", orderIds = "5bd6e9286d99522a52e458de,5bd6e9286d99522a52e458df")}).}
}
\value{
Promise resolving to a \code{data.table} with one row containing:
\itemize{
\item \code{cancelledOrderIds} (list): A list of character strings representing the IDs of the canceled stop orders.
}
}
\description{
Cancels a batch of stop orders on the KuCoin Spot trading system asynchronously by sending a DELETE request to the \verb{/api/v1/stop-order/cancel} endpoint.
Returns a \code{data.table} with the IDs of the canceled stop orders.
}
\details{
\subsection{What is a Stop Order and Batch Cancellation?}{

A stop order is a conditional order that triggers a market or limit order when a specified price (stop price) is reached, commonly used for:
\itemize{
\item \strong{Loss Limiting}: Sell an asset if its price drops to a threshold (e.g., sell BTC at $48,000 if it falls from $50,000).
\item \strong{Breakout Trading}: Buy an asset if its price rises past a resistance level (e.g., buy BTC at $52,000 if it breaks $51,000).
Batch cancellation allows you to cancel multiple stop orders at once, which is useful for:
\item \strong{Portfolio Adjustment}: Clear all stop orders for a symbol (e.g., "BTC-USDT") if market conditions shift unexpectedly.
\item \strong{Strategy Reset}: Cancel outdated stop orders across multiple pairs or IDs when refining your trading plan.
\item \strong{Risk Management}: Remove pending stops during high volatility to avoid unintended triggers (e.g., canceling stops on ETH-BTC during a flash crash).
For example, if you have stop orders at $48,000 and $47,000 for BTC-USDT but anticipate a rally, batch canceling them prevents premature sales.
}
}

\subsection{Description}{

This function cancels multiple stop orders using optional filters (\code{symbol}, \code{tradeType}, \code{orderIds}) via a DELETE request, returning the canceled order IDs in a \code{data.table}.
}

\subsection{Workflow}{
\enumerate{
\item \strong{Parameter Validation}: Ensures \code{query} is a named list, validates \code{symbol} if provided, and checks \code{tradeType} enum.
\item \strong{Request Construction}: Builds the endpoint URL with query parameters (\code{symbol}, \code{tradeType}, \code{orderIds}) using \code{build_query}.
\item \strong{Authentication}: Generates private API headers using \code{build_headers()} with the DELETE method and endpoint.
\item \strong{API Request}: Sends a DELETE request to the KuCoin API with a 3-second timeout via \code{httr::DELETE}.
\item \strong{Response Processing}: Parses the response with \code{process_kucoin_response}, confirms success ("200000"), and converts the \code{cancelledOrderIds} array to a \code{data.table} column as a list.
}
}

\subsection{API Details}{
\itemize{
\item \strong{Endpoint}: \verb{DELETE https://api.kucoin.com/api/v1/stop-order/cancel}
\item \strong{Domain}: Spot
\item \strong{API Channel}: Private
\item \strong{API Permission}: Spot
\item \strong{Rate Limit Pool}: Spot
\item \strong{Rate Limit Weight}: 3
\item \strong{SDK Service}: Spot
\item \strong{SDK Sub-Service}: Order
\item \strong{SDK Method Name}: batchCancelStopOrder
\item \strong{Official Documentation}: \href{https://www.kucoin.com/docs-new/rest/spot-trading/orders/batch-cancel-stop-orders}{KuCoin Batch Cancel Stop Orders}
}
}

\subsection{Request}{
\subsection{Query Parameters}{
\itemize{
\item \code{symbol}: String (optional) - Filter by trading pair symbol (e.g., "ETH-BTC"). Cancels all stop orders for this symbol if specified.
\item \code{tradeType}: Enum\if{html}{\out{<String>}} (optional) - Transaction type: "TRADE" (Spot), "MARGIN_TRADE" (Cross Margin), "MARGIN_ISOLATED_TRADE" (Isolated Margin). Defaults to "TRADE".
\item \code{orderIds}: String (optional) - Comma-separated list of stop order IDs (e.g., "5bd6e9286d99522a52e458de,5bd6e9286d99522a52e458df").
}
}

\subsection{Example Request}{

\if{html}{\out{<div class="sourceCode bash">}}\preformatted{curl --location --request DELETE 'https://api.kucoin.com/api/v1/stop-order/cancel?symbol=ETH-BTC&tradeType=TRADE&orderIds=5bd6e9286d99522a52e458de,5bd6e9286d99522a52e458df'
}\if{html}{\out{</div>}}
}

}

\subsection{Response}{
\subsection{HTTP Code: 200}{
\itemize{
\item \strong{Content Type}: \code{application/json}
}
}

\subsection{Data Schema}{
\itemize{
\item \code{code}: String (required) - Response code ("200000" indicates success).
\item \code{data}: Object (required) - Contains:
\itemize{
\item \code{cancelledOrderIds}: Array\link{String} (required) - List of canceled stop order IDs.
}
}
}

\subsection{JSON Response Example}{

\if{html}{\out{<div class="sourceCode json">}}\preformatted{\{
  "code": "200000",
  "data": \{
    "cancelledOrderIds": [
      "671124f9365ccb00073debd4"
    ]
  \}
\}
}\if{html}{\out{</div>}}
}

}
}
\examples{
\dontrun{
library(coro)
library(data.table)

main_async <- coro::async(function() {
  # Batch cancel stop orders for ETH-BTC
  canceled_orders <- await(cancel_stop_order_batch_impl(
    query = list(
      symbol = "ETH-BTC",
      tradeType = "TRADE",
      orderIds = "5bd6e9286d99522a52e458de,5bd6e9286d99522a52e458df"
    )
  ))
  print(canceled_orders)
})

# Run the async function
main_async()
while (!later::loop_empty()) later::run_now()
}
}
